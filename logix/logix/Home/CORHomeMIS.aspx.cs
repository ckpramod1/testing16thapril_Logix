using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Web.Services;
using System.Text;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html;
using iTextSharp.text.html.simpleparser;
using System.Web.UI.DataVisualization.Charting;

namespace logix.Home
{
    public partial class CORHomeMIS : System.Web.UI.Page
    {
        DataAccess.Accounts.Invoice invoiceobj = new DataAccess.Accounts.Invoice();
        DataAccess.BuyingRate Buyobj = new DataAccess.BuyingRate();
        DataAccess.Masters.MasterPort port = new DataAccess.Masters.MasterPort();
        DataAccess.LogDetails Logobj = new DataAccess.LogDetails();
        DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
        DataAccess.Outstanding outobj = new DataAccess.Outstanding();
        DataAccess.BuyingRate objbu = new DataAccess.BuyingRate();

        DataAccess.Masters.MasterExRate exrobj = new DataAccess.Masters.MasterExRate();
        DataAccess.Marketing.Quotation objQuat = new DataAccess.Marketing.Quotation();
        DataAccess.Masters.MasterEmployee empobj = new DataAccess.Masters.MasterEmployee();
        DataAccess.CostingDetails costobj = new DataAccess.CostingDetails();
        DataAccess.UserPermission obj_UP = new DataAccess.UserPermission();
        string naem;
        string tran;
        bool blerrOE, blerrOI, blerrAE, blerrAI, blerrBT, blerrCH;
        DataTable dt = new DataTable();
        DataTable dataOut = new DataTable();
        int time;
        DataTable dataQuat = new DataTable();
        DataTable dtNew = new DataTable();
        DataAccess.Outstanding oustobj = new DataAccess.Outstanding();
        //  DataTable dt = new DataTable();
        DataTable dts = new DataTable();
        string customername;
        int customerid;
        double amt = 0.00;
        string product = "";
        string value = "";
        string trantype;
        int custid;
        DataTable dtTemp = new DataTable();
        DataAccess.Masters.MasterCreditApproval mca = new DataAccess.Masters.MasterCreditApproval();
        DataAccess.ForwardingExports.JobInfo objJobInfo = new DataAccess.ForwardingExports.JobInfo();



        //MIs COPRT START

        DataAccess.Masters.MasterCustomer customerobj = new DataAccess.Masters.MasterCustomer();
        DataAccess.Masters.MasterEmployee employeeobj = new DataAccess.Masters.MasterEmployee();

        DataAccess.Masters.MasterPort Portobj = new DataAccess.Masters.MasterPort();
        DataAccess.CostingTemp costtempobj = new DataAccess.CostingTemp();
        DataAccess.MIS misobj = new DataAccess.MIS();
        DataAccess.MisCorporate miscorobj = new DataAccess.MisCorporate();
        DataAccess.HR.Employee HREmpobj = new DataAccess.HR.Employee();
        DataAccess.Masters.MasterBranch bobj = new DataAccess.Masters.MasterBranch();
        DataAccess.MISGrd misgrdobj = new DataAccess.MISGrd();
        string cust, str_Branch;
        string str_TranType = "";
        int bid;
        string Filename = "";
        int j;
        DataTable Dtbl = new DataTable();

        string strtemp = "";
        string strtrantype = "";
        double totalincome = 0, totalexpense = 0, totalretention = 0, totalincomeAE = 0, totalexpenseAE = 0, totalretentionAE = 0;
        double totalincomeFE = 0, totalexpenseFE = 0, totalretentionFE = 0, totalincomeFI = 0, totalexpenseFI = 0, totalretentionFI = 0;
        double totalincomeCHA = 0, totalexpenseCHA = 0, totalretentionCHA = 0, btotalincomeFC = 0, totalexpenseFC = 0, totalretentionFC = 0;
        double totalincomeBT = 0, totalexpenseBT = 0, totalretentionBT = 0;
        double totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0, totalgrandvou = 0, totalgrand20 = 0, totalgrand40 = 0;
        double totalvou = 0, total20 = 0, total40 = 0; double temp2 = 0;

        DataTable dtuser = new DataTable();
        //MIS COPR END


        //Retentions

        DataAccess.LogDetails da_obj_Log = new DataAccess.LogDetails();
        DataAccess.Masters.MasterCustomer da_obj_Customer = new DataAccess.Masters.MasterCustomer();
        DataAccess.Masters.MasterEmployee da_obj_Employee = new DataAccess.Masters.MasterEmployee();
        DataAccess.CostingTemp da_obj_CostTemp = new DataAccess.CostingTemp();
        DataAccess.Masters.MasterPort da_obj_Port = new DataAccess.Masters.MasterPort();

        public int int_divid, int_bid, int_Vouyear, int_Empid;
        public string Str_Trantype, Str_Dbname;


        //Retentions end



        //Statistics


        DataAccess.HR.Employee da_obj_HrEmp = new DataAccess.HR.Employee();

        DataAccess.Masters.MasterBranch da_obj_Branch = new DataAccess.Masters.MasterBranch();
        DataAccess.TotalShipmentDtls da_obj_Totalship = new DataAccess.TotalShipmentDtls();
        public string Str_by;

        int branchID, employeeID, divisionID;
        DataTable dt_MenuRights = new DataTable();
        string str_CtrlLists;


        //statistics End


        //INBOUND

        DataAccess.DashBoard.RightFrame da_obj_Right = new DataAccess.DashBoard.RightFrame();
        DataAccess.Corporate da_obj_Corp = new DataAccess.Corporate();
        DataAccess.LogDetails logDetails = new DataAccess.LogDetails();
        //INBOUND END


        //BLVOUCHERWISE

        //DataAccess.LogDetails da_obj_Log = new DataAccess.LogDetails();
        //DataAccess.Masters.MasterEmployee da_obj_Employee = new DataAccess.Masters.MasterEmployee();
        //DataAccess.CostingTemp da_obj_CostTemp = new DataAccess.CostingTemp();

        //int int_divid, int_bid;

        //BLVOUCHERWISEEND

        //JobDetails


        DataAccess.ForwardingExports.JobInfo da_obj_Job = new DataAccess.ForwardingExports.JobInfo();


        //JobDetails End


        //EXEMPTIONLIST



        int intdiv;
        int i;
        int intBranchId;

        DataAccess.Masters.MasterBranch objBranch = new DataAccess.Masters.MasterBranch();

        DataTable dtTable = new DataTable();
        DataAccess.HR.Employee objHr = new DataAccess.HR.Employee();
        DataAccess.Accounts.Exemption objiExcm = new DataAccess.Accounts.Exemption();




        //Exemptionlistend


        //BillingReport

        int intDivID, intBranchID, NPortID;
        string strTran, strBy;
        bool bolerr;
        DataTable Dt, Dtbill = new DataTable();

        DataAccess.Accounts.Exemption billObj = new DataAccess.Accounts.Exemption();
        DataAccess.LogDetails LogObj = new DataAccess.LogDetails();
        DataAccess.Masters.MasterPort PortObj = new DataAccess.Masters.MasterPort();


        //BillingReportEnd

        //CutoffDetails 

        DataAccess.LogDetails obj_da_Logobj = new DataAccess.LogDetails();

        //Cutoffdetails end


        //TradeLine



        DataAccess.Masters.MasterEmployee da_obj_Emp = new DataAccess.Masters.MasterEmployee();
        DataAccess.CrdtAppLimit da_obj_Credit = new DataAccess.CrdtAppLimit();
        DataAccess.Masters.MasterDivision da_obj_Division = new DataAccess.Masters.MasterDivision();
        DataAccess.Masters.MasterSector da_obj_Sector = new DataAccess.Masters.MasterSector();

        DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();

        DataAccess.Accounts.Approval Appobj = new DataAccess.Accounts.Approval();


        DataAccess.MISGrd da_obj_misgrd2 = new DataAccess.MISGrd();
        DataAccess.Accounts.Reversal cutobj = new DataAccess.Accounts.Reversal();
        DataAccess.CostingTemp da_obj_Costing = new DataAccess.CostingTemp();

        DataAccess.LogDetails obj_da_Log = new DataAccess.LogDetails();

        public DataTable obj_dtchk = new DataTable();

        //TradeLineEnd



        protected void Page_Load(object sender, EventArgs e)
        {

            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "script", "GenerateLabelAfter();", true);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(bnt);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btn_cancel);

            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btncancel_billrpt);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btn_export_billrpt);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btn_cancel_trade);

            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btnBack);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btnExporttoexcel);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btn_exportinb);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btn_cancelinb);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(btn_exp_cutoff);
            //((ScriptManager)Master.FindControl("ScriptManager1")).RegisterPostBackControl(excportexc);
            // ((ScriptManager)CORHomeMIS.FindControl("ScriptManager1")).RegisterPostBackControl(btnExport);


            //if (Session["LoginUserName"] == null || Session["LoginEmpId"] == null || Session["LoginDivisionId"] == null || Session["LoginBranchid"] == null)
            //{
            //    ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "Master", "alertify.alert('Session TimeOut');window.open('"+ Session["Site"].ToString() + "/','_top');", true);
            //}
            //else if (Session["StrTranType"] == null)
            //{
            //    ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "Master", "alertify.alert('Session TimeOut');window.open('"+ Session["Site"].ToString() + "/FormMain.aspx','_top');", true);
            //}


            string Ccode = Convert.ToString(Session["Ccode"]);

            if (Ccode != "")
            {

                Logobj.GetDataBase(Ccode);
                obj_UP.GetDataBase(Ccode);
                port.GetDataBase(Ccode);
                invoiceobj.GetDataBase(Ccode);
                Buyobj.GetDataBase(Ccode);
                objJob.GetDataBase(Ccode);
                outobj.GetDataBase(Ccode);
                objbu.GetDataBase(Ccode);
                exrobj.GetDataBase(Ccode);
                objQuat.GetDataBase(Ccode);
                empobj.GetDataBase(Ccode);
                costobj.GetDataBase(Ccode);
                obj_UP.GetDataBase(Ccode);
                oustobj.GetDataBase(Ccode);
                mca.GetDataBase(Ccode);
                objJobInfo.GetDataBase(Ccode);
                customerobj.GetDataBase(Ccode);
                employeeobj.GetDataBase(Ccode);
                Portobj.GetDataBase(Ccode);
                costtempobj.GetDataBase(Ccode);
                misobj.GetDataBase(Ccode);
                miscorobj.GetDataBase(Ccode);
                HREmpobj.GetDataBase(Ccode);
                bobj.GetDataBase(Ccode);
                misgrdobj.GetDataBase(Ccode);
                da_obj_Log.GetDataBase(Ccode);
                da_obj_Customer.GetDataBase(Ccode);
                da_obj_Employee.GetDataBase(Ccode);
                da_obj_CostTemp.GetDataBase(Ccode);
                da_obj_Port.GetDataBase(Ccode);
                da_obj_HrEmp.GetDataBase(Ccode);
                da_obj_Branch.GetDataBase(Ccode);
                da_obj_Totalship.GetDataBase(Ccode);
                da_obj_Right.GetDataBase(Ccode);
                da_obj_Corp.GetDataBase(Ccode);
                logDetails.GetDataBase(Ccode);
                da_obj_Job.GetDataBase(Ccode);
                objBranch.GetDataBase(Ccode);
                objHr.GetDataBase(Ccode);
                objiExcm.GetDataBase(Ccode);
                billObj.GetDataBase(Ccode);
                LogObj.GetDataBase(Ccode);
                PortObj.GetDataBase(Ccode);
                obj_da_Logobj.GetDataBase(Ccode);


                da_obj_Emp.GetDataBase(Ccode);
                da_obj_Credit.GetDataBase(Ccode);
                port.GetDataBase(Ccode);
                da_obj_Division.GetDataBase(Ccode);
                da_obj_Sector.GetDataBase(Ccode);
                da_obj_misgrd.GetDataBase(Ccode);
                Appobj.GetDataBase(Ccode);
                objJob.GetDataBase(Ccode);
                da_obj_misgrd2.GetDataBase(Ccode);
                cutobj.GetDataBase(Ccode);
                da_obj_Costing.GetDataBase(Ccode);
                obj_da_Log.GetDataBase(Ccode);
               

            }

            if (!IsPostBack)
            {

                //MIS COR


                Loadbranch();
                LoadReport();
                RententionLb.Attributes["class"] = "RententionLblnew";
                divby.Visible = false;
                ddl_branch.Visible = true;ddl_branch_id.Visible = true;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                txt_agent.Visible = true;txt_agent_id.Visible = true;
                div_JobDetails.Visible = false;
                ddl_product.Visible = false;
                ddl_by.Visible = false;
                divstatistics.Visible = false;
                div_BLVoucherwise.Visible = false;
                div_inbound.Visible = false;
                div_ExemptionList.Visible = false;
                div_BillingReport.Visible = false;
                div_CutOffBreakUp.Visible = false;
                div_Tradelane.Visible = false;
                str_CtrlLists = "txt_from~txt_to";
                btnview.Attributes.Add("OnClick", "return IsDate('" + str_CtrlLists + "') && IsDoubleCheck('txt_retention');");

                if (Request.QueryString.ToString().Contains("mis"))
                {
                    // breadcrumbs.Visible = false;
                    //crumbsid.Attributes["class"] = "crumbs1";
                    btn_cancel.Enabled = false;
                    btn_print.Enabled = false;
                    btn_get.Enabled = true;
                    bnt.Enabled = false;
                    ddl_branch.SelectedValue = "ALL";
                    ddl_Report.SelectedValue = "Operating Profit";
                    txt_agent.Enabled = false;
                    ddl_branch.Enabled = false;
                    ddl_Report.Enabled = false;
                    btn_get_Click(sender, e);
                }

                //MIS CORPEND





                //STATISTICS



                //if (Session["trantype_process"] != null)
                //{
                //   // Session["StrTranType"] = null;

                //    //if (Session["StrTranType"].ToString() == null || Session["StrTranType"].ToString() == "CO")
                //    //{
                //    //    Session["StrTranType"] = "CO";
                //    //}
                //    //else
                //    //{
                //    //    Session["StrTranType"] = null;
                //    //}
                //    dt_MenuRights = Session["trantype_process"] as DataTable;
                //    ddl_product.Items.Add("");
                //    ddl_product.Items.Add("ALL");
                //    for (int i = 0; i < dt_MenuRights.Rows.Count; i++)
                //    {
                //        if (dt_MenuRights.Rows[i]["trantype"].ToString() == "FE")
                //        {
                //            ddl_product.Items.Add("Ocean Exports");
                //        }
                //        else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "FI")
                //        {
                //            ddl_product.Items.Add("Ocean Imports");
                //        }
                //        else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "AE")
                //        {
                //            ddl_product.Items.Add("Air Exports");
                //        }
                //        else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "AI")
                //        {
                //            ddl_product.Items.Add("Air Imports");
                //        }

                //    }

                //}

                //else
                //    if (Session["StrTranType"] != null)
                //    {
                //        ddl_product.Items.Add("");
                //        if (Session["StrTranType"].ToString() == "FE")
                //        {
                //            ddl_product.Items.Add("Ocean Exports");
                //            //ddl_product.SelectedIndex = 1;
                //            ddl_product.SelectedValue = "Ocean Exports";
                //        }
                //        else if (Session["StrTranType"].ToString() == "FI")
                //        {
                //            ddl_product.Items.Add("Ocean Imports");
                //            ddl_product.SelectedValue = "Ocean Imports";
                //            //ddl_product.SelectedIndex = 1;
                //        }
                //        else if (Session["StrTranType"].ToString() == "AE")
                //        {
                //            ddl_product.Items.Add("Air Exports");
                //            ddl_product.SelectedValue = "Air Exports";
                //            //ddl_product.SelectedIndex = 1;
                //        }
                //        else if (Session["StrTranType"].ToString() == "AI")
                //        {
                //            ddl_product.Items.Add("Air Imports");
                //            ddl_product.SelectedValue = "Air Imports";
                //        }

                //        else if (Session["StrTranType"].ToString() == "AC")
                //        {
                //            ddl_product.Items.Add("ALL");
                //            ddl_product.SelectedValue = "ALL";
                //            ddl_product_SelectedIndexChanged(sender, e);
                //        }
                //        else if (Session["StrTranType"].ToString() == "CH")
                //        {
                //            ddl_product.Items.Add("Custom House Agent");
                //            ddl_product.SelectedValue = "Custom House Agent";
                //            ddl_product_SelectedIndexChanged(sender, e);
                //        }
                //        ddl_product.Enabled = false;
                //        //ddl_product.SelectedIndex = 1;
                //    }




                if (Session["trantype_process"] != null)
                {
                    //lblHead1.Visible = false;
                    //lblHead2.Visible = false;
                    //   dt_MenuRights = Session["trantype_process"] as DataTable;
                    dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");
                    ddl_product.Items.Add("");
                    if (dt_MenuRights.Rows.Count > 0)
                    {
                        ddl_product.Items.Add("ALL");
                        lbl_from.Visible = true;
                        lbl_to.Visible = true;
                        txt_from.Visible = true;
                        txt_to.Visible = true;
                        ddl_product.Visible = true;
                        ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                        btn_get.Visible = true;btn_get_id.Visible = true;

                    }
                    else
                    {
                        lbl_from.Visible = false;
                        lbl_to.Visible = false;
                        txt_from.Visible = false;
                        txt_to.Visible = false;
                        ddl_product.Visible = false;
                        ddl_Report.Visible = false;ddl_Report_id.Visible = false;
                        btn_get.Visible = false;btn_get_id.Visible = false;
                    }

                    for (int i = 0; i < dt_MenuRights.Rows.Count; i++)
                    {

                        if (dt_MenuRights.Rows[i]["trantype"].ToString() == "FE")
                        {
                            ddl_product.Items.Add("Ocean Exports");
                        }
                        else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "FI")
                        {
                            ddl_product.Items.Add("Ocean Imports");
                        }
                        else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "AE")
                        {
                            ddl_product.Items.Add("Air Exports");
                        }
                        else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "AI")
                        {
                            ddl_product.Items.Add("Air Imports");
                        }
                        else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "CH")
                        {
                            // ddl_product.Items.Add("CHA");
                        }
                        else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "BT")
                        {
                            //  ddl_product.Items.Add("Bonded Trucking");
                        }

                    }


                    // Session["StrTranType"] = dt_MenuRights.Rows[i]["modulename"].ToString();
                }
                else
                    if (Session["StrTranType"] != null)
                    {
                        ddl_product.Items.Add("");
                        if (Session["StrTranType"].ToString() == "FE")
                        {
                            ddl_product.Items.Add("Ocean Exports");
                            //ddl_product.SelectedIndex = 1;
                            ddl_product.SelectedValue = "Ocean Exports";
                        }
                        else if (Session["StrTranType"].ToString() == "FI")
                        {
                            ddl_product.Items.Add("Ocean Imports");
                            ddl_product.SelectedValue = "Ocean Imports";
                            //ddl_product.SelectedIndex = 1;
                        }
                        else if (Session["StrTranType"].ToString() == "AE")
                        {
                            ddl_product.Items.Add("Air Exports");
                            ddl_product.SelectedValue = "Air Exports";
                            //ddl_product.SelectedIndex = 1;
                        }
                        else if (Session["StrTranType"].ToString() == "AI")
                        {
                            ddl_product.Items.Add("Air Imports");
                            ddl_product.SelectedValue = "Air Imports";
                        }

                        else if (Session["StrTranType"].ToString() == "AC")
                        {
                            ddl_product.Items.Add("ALL");
                            ddl_product.SelectedValue = "ALL";
                            ddl_product_SelectedIndexChanged(sender, e);
                        }
                        else if (Session["StrTranType"].ToString() == "CH")
                        {
                            //ddl_product.Items.Add("CHA");
                            //ddl_product.SelectedValue = "CHA";
                            //ddl_product_SelectedIndexChanged(sender, e);
                        }
                        else if (Session["StrTranType"].ToString() == "BT")
                        {
                            //ddl_product.Items.Add("Bonded Trucking");
                            //ddl_product.SelectedValue = "Bonded Trucking";
                            //ddl_product_SelectedIndexChanged(sender, e);
                        }
                        ddl_product.Enabled = false;
                        //ddl_product.SelectedIndex = 1;
                    }




                str_CtrlLists = "txt_from~txt_to";
                btnget.Attributes.Add("OnClick", "return IsDate('" + str_CtrlLists + "')");
                //  Str_Trantype = Session["StrTranType"].ToString();
              //  string Str_CurrrentDate = Utility.fn_ConvertDate(Logobj.GetDate().ToShortDateString());
                string firstDayOfMonth = Utility.fn_ConvertDate(new DateTime(Logobj.GetDate().Year, Logobj.GetDate().Month, 1).ToShortDateString());
                txt_from.Text = firstDayOfMonth;
                string Str_CurrrentDate = DateTime.Now.ToString("dd/MM/yyyy");
               // txt_from.Text = Str_CurrrentDate;
                txt_to.Text = Str_CurrrentDate;
                GrdJob.DataSource = new DataTable();
                GrdJob.DataBind();
                grdbudget.DataSource = new DataTable();
                grdbudget.DataBind();

                if (Session["StrTranType"] != null)
                {
                    if (Session["StrTranType"].ToString() == "AC")
                    {
                        ddl_branch.Enabled = false;
                        ddl_product.Enabled = true;
                        ddl_branch.SelectedIndex = ddl_branch.Items.IndexOf(ddl_branch.Items.FindByText(Session["LoginBranchName"].ToString()));
                    }
                    else if (Session["StrTranType"].ToString() == "CO")
                    {
                        ddl_branch.Enabled = true;
                        ddl_product.Enabled = true;
                    }
                    else
                    {
                        ddl_branch.SelectedIndex = ddl_branch.Items.IndexOf(ddl_branch.Items.FindByText(Session["LoginBranchName"].ToString()));
                        ddl_product.SelectedIndex = ddl_product.Items.IndexOf(ddl_product.Items.FindByValue(Session["StrTranType"].ToString()));
                        ddl_product_SelectedIndexChanged(sender, e);
                        ddl_branch.Enabled = false;
                        ddl_product.Enabled = false;
                    }
                }





                //STATISTICS END


                //BLVOUCHERWISE              


                grdvoucher.DataSource = null;
                grdvoucher.DataBind();

                Grdjob_BL.DataSource = null;
                Grdjob_BL.DataBind();
                Grd_BL.DataSource = null;
                Grd_BL.DataBind();

                //BLVOUCHERWISE END


                //Job details

                Grdjobdetails.DataSource = new DataTable();
                Grdjobdetails.DataBind();

                //job details end


                //Exemption list


                if (Session["LoginBranchName"] != "CORPORATE")
                {
                    ddldivision.Items.Add(Session["LoginDivisionName"].ToString());

                    ddldivision.Text = Session["LoginDivisionName"].ToString();

                    ddldivision.Enabled = false;
                }

                else
                {
                    ddldivision.Items.Add(Session["LoginDivisionName"].ToString());

                    ddldivision.Text = Session["LoginDivisionName"].ToString();

                    ddldivision.Enabled = false;
                }

                emptygrd();

                //Exemption List End





                //Billing Reports 




                //Billing Reports end

                //Tradeline

                BindDivision();

                BindSector();
                BindDate();
                Grd_product.DataSource = null;
                Grd_product.DataBind();
                Grd_Country.DataSource = null;
                Grd_Country.DataBind();
                btncancel.Text = "Cancel";

                btncancel.ToolTip = "Cancel";
                btncancel1.Attributes["class"] = "btn ico-cancel";
                // ddl_division.Text = Session["LoginDivisionName"].ToString();

                //Tradeline end
                vis_div();
                fn_GetOperatingProfit();
                fn_Getnewoutstanding4MISHomeOutStndTotal();
                div_bar.Visible = true;
                div_line.Visible = true;
                barchartdetails();
                div2_Bookchart.Visible = true;

                trendlinechart();
                getdataforallbranch("");
            }
        }
        public void getdataforallbranch(string trantype)
        {
            div1.Visible = true;
            DataTable dt = new DataTable();
            //DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();

            //DataAccess.Accounts.Approval Appobj = new DataAccess.Accounts.Approval();


         //   dt = da_obj_misgrd.Getretentionforcustomerfordiv_NEWONE(Convert.ToInt32(Session["LoginBranchid"]));

              dt = da_obj_misgrd.Getretentionforcustomerfordiv_NEWONE(Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()), Convert.ToInt32(Session["LoginBranchid"]),trantype);


            //end
            StringBuilder str = new StringBuilder();
            str.Append(@"<script type=*text/javascript*> google.load( *visualization*, *1*, {packages:[*geochart*]});
            google.setOnLoadCallback(drawRegionsMap);
            function drawRegionsMap() {
            var data1 = new google.visualization.DataTable();

            data1.addColumn('string','countryname');
           data1.addColumn('number','Retention');
             data1.addColumn('number','Tues');
           
            
            
            
           
            data1.addRows(" + dt.Rows.Count + ");");


            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {


                str.Append("data1.setValue( " + i + "," + 0 + "," + "'" + dt.Rows[i]["countryname"].ToString() + "');");
                str.Append("data1.setValue( " + i + "," + 1 + "," + "'" + dt.Rows[i]["Retention"].ToString() + "') ;");
                str.Append("data1.setValue( " + i + "," + 2 + "," + "'" + dt.Rows[i]["Tues"].ToString() + "') ;");
                // string strvol = dt.Rows[i]["Tues"].ToString() + "  " + dt.Rows[i]["cbm"].ToString() + "  " + dt.Rows[i]["kgs"].ToString();
                //str.Append("data1.setValue( " + i + "," + 2 + "," + "'" + strvol + "') ;");
                //str.Append("data1.setValue( " + i + "," + 2 + "," + "'" + dt.Rows[i]["Tues"].ToString() + " / " + dt.Rows[i]["cbm"].ToString() + " / " + dt.Rows[i]["kgs"].ToString() + "') ;");
                //str.Append("data1.setValue( " + i + "," + 3 + "," + "'" + dt.Rows[i]["cont40"].ToString() + "') ;");
                //str.Append("data1.setValue( " + i + "," + 4 + "," + "'" + dt.Rows[i]["cbm"].ToString() + "') ;");
                //str.Append("data1.setValue( " + i + "," + 5 + "," + "'" + dt.Rows[i]["kgs"].ToString() + "') ;");
            }

            str.Append(" var chart = new google.visualization.GeoChart(document.getElementById('chart'));");
            str.Append(" chart.draw(data1, {width: 900,height:440,");
            str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'}},legend:'none',colors: ['#4ebcd5','#bce3c8','#408fdc','#5765b2','#9669cc','#ef58a7'],");

            str.Append("}); }");
            str.Append("</script>");
            Literal2.Text = str.ToString().Replace('*', '"');
            //PieChart
        }
        public void fn_Getnewoutstanding4MISHomeOutStndTotal()
        {
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt = new DataTable();
            int subgrpid = 40;
            // dt = da_obj_misgrd.Getnewoutstanding4MISHomeOutStndTotal(Convert.ToInt32(Session["LoginEmpId"].ToString()), Convert.ToInt32(Session["LoginBranchid"].ToString()), Convert.ToInt32(Session["LoginDivisionId"].ToString()), subgrpid);
            dt = da_obj_misgrd2.Getnewoutstanding4MISHomeOutStndTotal(Convert.ToInt32(Session["LoginEmpId"].ToString()), 0, int.Parse(Session["LoginDivisionId"].ToString()), subgrpid);
            ViewState["Getnewoutstanding4MISHomeOutStndTotal"] = dt;
            if (dt.Rows.Count > 0)
            {

                //for (int i = 0; i <= dt.Rows.Count - 1; i++)
                //{

                //    if (dt.Rows[0]["FE"].ToString() == "FE")
                //    {
                //        value = "OE";
                //    }
                //    else if (dt.Rows[0]["FI"].ToString() == "FI")
                //    {
                //        value = "OI";
                //    }
                //    else if (dt.Rows[0]["AE"].ToString() == "AE")
                //    {
                //        value = "AE";
                //    }
                //    else if (dt.Rows[0]["AI"].ToString() == "AI")
                //    {
                //        value = "AI";
                //    }
                //    else if (dt.Rows[0]["CH"].ToString() == "CH")
                //    {
                //        value = "CHA";
                //    }
                //    else if (dt.Rows[0]["BT"].ToString() == "BT")
                //    {
                //        value = "BT";
                //    }
                //}

                DataView dt_check = dt.DefaultView;
                dt_check.RowFilter = "trantype = 'AE'";
                DataTable dtNew_check = dt_check.ToTable();
                if (dtNew_check.Rows.Count == 0)
                {
                    SPoutstAE.InnerText = "0.0";
                }
                else
                {

                    SPoutstAE.InnerText = Math.Round(Convert.ToDouble(dtNew_check.Rows[0]["Amount"].ToString())).ToString("#,0");
                }
                dt_check = dt.DefaultView;
                dt_check.RowFilter = "trantype = 'AI'";
                dtNew_check = dt_check.ToTable();
                if (dtNew_check.Rows.Count == 0)
                {
                    SPoutstAI.InnerText = "0";
                }
                else
                {

                    SPoutstAI.InnerText = Math.Round(Convert.ToDouble(dtNew_check.Rows[0]["Amount"].ToString())).ToString("#,0");
                }

                dt_check = dt.DefaultView;
                dt_check.RowFilter = "trantype = 'OE'";
                dtNew_check = dt_check.ToTable();
                if (dtNew_check.Rows.Count == 0)
                {
                    SPoutstOE.InnerText = "0";
                }
                else
                {

                    SPoutstOE.InnerText = Math.Round(Convert.ToDouble(dtNew_check.Rows[0]["Amount"].ToString())).ToString("#,0");
                }
                dt_check = dt.DefaultView;
                dt_check.RowFilter = "trantype = 'OI'";
                dtNew_check = dt_check.ToTable();
                if (dtNew_check.Rows.Count == 0)
                {
                    SPoutstOI.InnerText = "0";
                }
                else
                {

                    SPoutstOI.InnerText = Math.Round(Convert.ToDouble(dtNew_check.Rows[0]["Amount"].ToString())).ToString("#,0");
                }

                dt_check = dt.DefaultView;
                dt_check.RowFilter = "trantype = 'CH'";
                dtNew_check = dt_check.ToTable();
                if (dtNew_check.Rows.Count == 0)
                {
                    SPoutstCH.InnerText = "0";
                }
                else
                {

                    SPoutstCH.InnerText = Math.Round(Convert.ToDouble(dtNew_check.Rows[0]["Amount"].ToString())).ToString("#,0");
                }

                dt_check = dt.DefaultView;
                dt_check.RowFilter = "trantype = 'BT'";
                dtNew_check = dt_check.ToTable();
                if (dtNew_check.Rows.Count == 0)
                {
                    SPoutstBT.InnerText = "0";
                }
                else
                {

                    SPoutstBT.InnerText = Math.Round(Convert.ToDouble(dtNew_check.Rows[0]["Amount"].ToString())).ToString("#,0");
                }
                double tot = Convert.ToDouble(SPoutstBT.InnerText) + Convert.ToDouble(SPoutstCH.InnerText) + Convert.ToDouble(SPoutstOI.InnerText) + Convert.ToDouble(SPoutstOE.InnerText) + Convert.ToDouble(SPoutstAI.InnerText) + Convert.ToDouble(SPoutstAE.InnerText);
                SPoutsttot.InnerText = Math.Round(tot).ToString("#,0");
                //SPoutstAI.InnerText = (Convert.ToDouble(dt.Rows[0]["AI"].ToString())).ToString("#,0.00");
                //SPoutstBT.InnerText = (Convert.ToDouble(dt.Rows[0]["BT"].ToString())).ToString("#,0.00");
                //SPoutstCH.InnerText = (Convert.ToDouble(dt.Rows[0]["CH"].ToString())).ToString("#,0.00");
                //SPoutstOE.InnerText = (Convert.ToDouble(dt.Rows[0]["FE"].ToString())).ToString("#,0.00");
                //SPoutstOI.InnerText = (Convert.ToDouble(dt.Rows[0]["FI"].ToString())).ToString("#,0.00");
                //SPoutsttot.InnerText = (Convert.ToDouble(dt.ToString())).ToString("#,0.00"); //dbl_Full_Total.ToString();

            }

        }
        [WebMethod]
        public static List<countrydetails> GetChartPIE()
        {
            //DataAccess.BuyingRate objbu = new DataAccess.BuyingRate();
            //DataTable dtemptyfree = new DataTable();
            //dtemptyfree = objbu.selpendingBookcutomerwisecount_Chart(Convert.ToInt32(HttpContext.Current.Session["LoginBranchid"]), HttpContext.Current.Session["StrTranType"].ToString());

            DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt = new DataTable();
            int subgrpid = 40;
            dt = da_obj_misgrd.Getnewoutstanding4MISHomeOutStndTotal(Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString()), 0, Convert.ToInt32(HttpContext.Current.Session["LoginDivisionId"].ToString()), subgrpid);

            List<countrydetails> dataList = new List<countrydetails>();
            foreach (DataRow dtrow in dt.Rows)
            {
                countrydetails details = new countrydetails();
                details.Countryname = dtrow[0].ToString();
                details.Total = Convert.ToDouble(dtrow[1]);
                dataList.Add(details);
            }
            return dataList;
            //dtemptyfree.Columns.Add("S#");
            //dtemptyfree.Columns.Add("Customer Name");
            //dtemptyfree.Columns.Add("Numbers");
            //dtemptyfree.Columns.Add("cusid");
            //DataRow dr = dtemptyfree.NewRow();
            //if (dt.Rows.Count > 0)
            //{
            //    for (int j = 0; j <= dt.Rows.Count - 1; j++)
            //    {

            //        dtemptyfree.Rows.Add();
            //        dr = dtemptyfree.NewRow();
            //        dtemptyfree.Rows[j]["S#"] = dt.Rows[j]["SI"].ToString();
            //        dtemptyfree.Rows[j]["Customer Name"] = dt.Rows[j]["customername"].ToString();
            //        dtemptyfree.Rows[j]["Numbers"] = dt.Rows[j]["Counts"].ToString();
        }

        public class countrydetails
        {
            public string Countryname { get; set; }
            public Double Total { get; set; }
        }


        public void fn_GetOperatingProfit()
        {

            DataTable dt_OprProfit = new DataTable();
            DataTable dt = new DataTable();
          //  DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            //string transtype = Session["StrTranType"].ToString();
            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
          //  DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
            int month = Todate.Month;
            int year = Todate.Year;
            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
            int count;

            //    dt_OprProfit = da_obj_misgrd.GetOperatingProfit(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AC", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));

            dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_OprProfit = da_obj_misgrd.GetOperatingProfitnew(0, int.Parse(Session["LoginDivisionId"].ToString()), "CO", Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()));
            }
            else
            {
                SPANAE.InnerText = "0";
                SPANAI.InnerText = "0";
                SPANBT.InnerText = "0";
                spanCH.InnerText = "0";
                SpanOE.InnerText = "0";
                SpanOI.InnerText = "0";
                SpanOI.InnerText = "0";
                SpanTOTAL.InnerText = "0";
            }
            if (dt_OprProfit.Rows.Count > 0)
            {

                dt_OprProfit.Columns.Add(new DataColumn("Total"));
                double dbl_Total = 0, dbl_Full_Total = 0;
                /*for (int k = 0; k < dt_OprProfit.Rows.Count; k++)
                {
                    dbl_Total = 0;
                    for (int R = 1; R < dt_OprProfit.Columns.Count; R++)
                    {
                        if (dt_OprProfit.Rows[k][R].ToString().Length > 0)
                            dbl_Total = dbl_Total + Convert.ToDouble(dt_OprProfit.Rows[k][R].ToString());
                    }
                    dt_OprProfit.Rows[k]["Total"] = dbl_Total;
                    dbl_Full_Total = dbl_Full_Total + dbl_Total;
                }*/

                for (int k = 0; k < dt_OprProfit.Rows.Count; k++)
                {
                    dbl_Total = 0;
                    for (int R = 2; R < dt_OprProfit.Columns.Count; R++)
                    {
                        if (dt_OprProfit.Rows[k][R].ToString().Length > 0)
                            dbl_Total = dbl_Total + Convert.ToDouble(dt_OprProfit.Rows[k][R].ToString());
                    }
                    dt_OprProfit.Rows[k]["Total"] = dbl_Total;
                    dbl_Full_Total = dbl_Full_Total + dbl_Total;
                }



                DataRow dr_temp = dt_OprProfit.NewRow();
                dr_temp[0] = "Total";


                /*for (int R = 1; R < dt_OprProfit.Columns.Count - 1; R++)
                {
                    dr_temp[R] = dt_OprProfit.Compute("sum(" + dt_OprProfit.Columns[R].Caption.ToString() + ")", "");
                }*/
                for (int R = 2; R < dt_OprProfit.Columns.Count - 1; R++)
                {
                    dr_temp[R] = dt_OprProfit.Compute("sum(" + dt_OprProfit.Columns[R].Caption.ToString() + ")", "");
                }


                dr_temp["Total"] = dbl_Full_Total;
                double tot = 0;
                dt_OprProfit.Rows.Add(dr_temp);
                count = dt_OprProfit.Rows.Count - 1;
                if (dt_OprProfit.Columns.Contains("AE"))
                {
                    SPANAE.InnerText = Math.Round(Convert.ToDouble(dt_OprProfit.Rows[count]["AE"].ToString())).ToString("#,0");
                    tot += Convert.ToDouble(dt_OprProfit.Rows[count]["AE"].ToString());
                }
                else
                {
                    SPANAE.InnerText = "0"; //(Convert.ToDouble(dt_OprProfit.Rows[count]["BT"].ToString())).ToString("#,0.00");
                    tot += 0.0;
                }
                if (dt_OprProfit.Columns.Contains("AI"))
                {
                    SPANAI.InnerText = Math.Round(Convert.ToDouble(dt_OprProfit.Rows[count]["AI"].ToString())).ToString("#,0");
                    tot += Convert.ToDouble(dt_OprProfit.Rows[count]["AI"].ToString());
                }
                else
                {
                    SPANAI.InnerText = "0";
                    tot += 0.0;
                }

                if (dt_OprProfit.Columns.Contains("BT"))
                {
                    SPANBT.InnerText = Math.Round(Convert.ToDouble(dt_OprProfit.Rows[count]["BT"].ToString())).ToString("#,0");
                    tot += Convert.ToDouble(dt_OprProfit.Rows[count]["BT"].ToString());
                }
                else
                {
                    SPANBT.InnerText = "0";
                    tot += 0.0;
                }


                if (dt_OprProfit.Columns.Contains("CH"))
                {
                    spanCH.InnerText = Math.Round(Convert.ToDouble(dt_OprProfit.Rows[count]["CH"].ToString())).ToString("#,0");
                    tot += Convert.ToDouble(dt_OprProfit.Rows[count]["CH"].ToString());
                }
                else
                {
                    spanCH.InnerText = "0";
                    tot += 0.0;
                }

                if (dt_OprProfit.Columns.Contains("OE"))
                {
                    SpanOE.InnerText = Math.Round(Convert.ToDouble(dt_OprProfit.Rows[count]["OE"].ToString())).ToString("#,0");
                    tot += Convert.ToDouble(dt_OprProfit.Rows[count]["OE"].ToString());
                }
                else
                {
                    SpanOE.InnerText = "0";
                    tot += 0.0;
                }

                if (dt_OprProfit.Columns.Contains("OI"))
                {
                    SpanOI.InnerText = Math.Round(Convert.ToDouble(dt_OprProfit.Rows[count]["OI"].ToString())).ToString("#,0");
                    tot += Convert.ToDouble(dt_OprProfit.Rows[count]["OI"].ToString());
                }
                else
                {

                    SpanOI.InnerText = "0";
                    tot += 0.0;
                }




                SpanTOTAL.InnerText = Math.Round(tot).ToString("#,0");//(Convert.ToDouble(dbl_Full_Total.ToString())).ToString("#,0.00"); //dbl_Full_Total.ToString();

            }
            else
            {
                SPANAE.InnerText = "0";
                SPANAI.InnerText = "0";
                SPANBT.InnerText = "0";
                spanCH.InnerText = "0";
                SpanOE.InnerText = "0";
                SpanOI.InnerText = "0";
                SpanOI.InnerText = "0";
                SpanTOTAL.InnerText = "0";

            }



        }


        public void barchartdetails()
        {
            //            string color = "";
            //            DataAccess.ForwardingExports.JobInfo objsales = new DataAccess.ForwardingExports.JobInfo();
            //            dt = objsales.getbookingbar(Convert.ToInt32(Session["LoginEmpId"]), Convert.ToInt32(Session["LoginBranchid"]), Convert.ToInt32(Session["LoginDivisionId"]));
            //            StringBuilder str = new StringBuilder();
            //            str.Append(@"<script type=*text/javascript*> google.load( *visualization*, *1*, {packages:[*corechart*]});
            //                       google.setOnLoadCallback(drawChart);
            //                       function drawChart() {
            //                       var data = new google.visualization.DataTable();
            //                    data.addColumn('string', 'month');
            //                    data.addColumn('number', '');     
            //                    data.addRows(" + dt.Rows.Count + ");");

            //            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            //            {
            //                str.Append("data.setValue( " + i + "," + 0 + "," + "'" + dt.Rows[i]["month"].ToString() + "');");
            //                str.Append("data.setValue(" + i + "," + 1 + "," + dt.Rows[i]["BookingCounts"].ToString() + ") ;");
            //                if (dt.Rows[i]["month"].ToString() == "month")
            //                {
            //                    color = "green";
            //                }
            //                else
            //                {
            //                    color = "maroon";
            //                }
            //            }

            //            str.Append(" var chart = new google.visualization.ColumnChart(document.getElementById('chart_divbar'));");
            //            str.Append(" chart.draw(data, {width: 680, height: 300, title: 'Bookings',");
            //            str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'},slantedText:true},width:'685',colors: ['maroon','" + color + "'],");
            //            // str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'}}");
            //            str.Append("}); }");
            //            str.Append("</script>");
            //            lts.Text = str.ToString().Replace('*', '"');

            //string[] color=new string[100];
            DataTable dt0 = new DataTable();
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            DataTable dt3 = new DataTable();
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            dt0 = da_obj_misgrd.GetOurAgentGrdhomeCount(0, Convert.ToInt32(Session["LoginDivisionId"]));
            StringBuilder str = new StringBuilder();
            str.Append(@"<script type=*text/javascript*> google.load( *visualization*, *1*, {packages:[*corechart*]});
            google.setOnLoadCallback(drawChart);
            function drawChart() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'month');
            data.addColumn('number', 'Our');
             data.addColumn('number', 'Agent');
           
            data.addRows(" + dt0.Rows.Count + ");");




            for (int i = 0; i <= dt0.Rows.Count - 1; i++)
            {


                str.Append("data.setValue( " + i + "," + 0 + "," + "'" + dt0.Rows[i]["month"].ToString() + "');");
                str.Append("data.setValue(" + i + "," + 1 + "," + dt0.Rows[i]["Our"].ToString() + ") ;");
                str.Append("data.setValue(" + i + "," + 2 + "," + dt0.Rows[i]["Agent"].ToString() + ") ;");




            }

            /* str.Append("   var chart = new google.visualization.ColumnChart(document.getElementById('chart_divbar'));");
             str.Append(" chart.draw(data, {width: 450, title: 'Our Control vs Agent Control',");
              str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'}}");
             //str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'},slantedText:true},width:'685',colors: ['maroon','" + color + "'],");
           
            
            
             str.Append("}); }");
             str.Append("</script>");
             lts.Text = str.ToString().Replace('*', '"');
             */


            str.Append("   var chart = new google.visualization.ColumnChart(document.getElementById('chart_divbar'));");
            str.Append(" chart.draw(data, {width: 450,height:300, title: 'Our Control vs Agent Control',");
            str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'}} ,colors: ['#06529b','#f67e09']");
            str.Append("}); }");
            str.Append("</script>");
            lts.Text = str.ToString().Replace('*', '"');


        }
        public void trendlinechart()
        {

            DataTable dt0 = new DataTable();
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            DataTable dt3 = new DataTable();
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            // dt0 = da_obj_misgrd.GetOPsDocHomeCount(0, Convert.ToInt32(Session["LoginDivisionId"]));
            StringBuilder str = new StringBuilder();
            str.Append(@"<script type=*text/javascript*> google.load( *visualization*, *1*, {packages:[*corechart*]});
            google.setOnLoadCallback(drawChart);
            function drawChart() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'month');
            data.addColumn('number', 'AE');
             data.addColumn('number', 'AI');
            data.addColumn('number', 'OE');
             data.addColumn('number', 'OI');
             data.addColumn('number', 'CH');
            data.addColumn('number', 'BT');
            data.addRows(" + dt0.Rows.Count + ");");

            dt_MenuRights = obj_UP.GetformuserrightsnewMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {

                for (int i = 0; i <= dt0.Rows.Count - 1; i++)
                {


                    str.Append("data.setValue( " + i + "," + 0 + "," + "'" + dt0.Rows[i]["month"].ToString() + "');");
                    str.Append("data.setValue(" + i + "," + 1 + "," + dt0.Rows[i]["AE"].ToString() + ") ;");
                    str.Append("data.setValue(" + i + "," + 2 + "," + dt0.Rows[i]["AI"].ToString() + ") ;");
                    str.Append("data.setValue(" + i + "," + 3 + "," + dt0.Rows[i]["OE"].ToString() + ") ;");
                    str.Append("data.setValue(" + i + "," + 4 + "," + dt0.Rows[i]["OI"].ToString() + ") ;");
                    str.Append("data.setValue(" + i + "," + 5 + "," + dt0.Rows[i]["CH"].ToString() + ") ;");
                    str.Append("data.setValue(" + i + "," + 6 + "," + dt0.Rows[i]["BT"].ToString() + ") ;");
                }


            }
            else
            {

                for (int i = 0; i <= dt0.Rows.Count - 1; i++)
                {


                    str.Append("data.setValue( " + i + "," + 0 + "," + "'" + dt0.Rows[i]["month"].ToString() + "');");
                    str.Append("data.setValue(" + i + "," + 1 + "," + "0" + ") ;");
                    str.Append("data.setValue(" + i + "," + 2 + "," + "0" + ") ;");
                    str.Append("data.setValue(" + i + "," + 3 + "," + "0" + ") ;");
                    str.Append("data.setValue(" + i + "," + 4 + "," + "0" + ") ;");
                    str.Append("data.setValue(" + i + "," + 5 + "," + "0" + ") ;");
                    str.Append("data.setValue(" + i + "," + 6 + "," + "0" + ") ;");
                }
            }
            str.Append("   var chart = new google.visualization.LineChart(document.getElementById('Liner_chart_div'));");
            str.Append(" chart.draw(data, {width: 450, height: 300, title: 'Trend Analysis',");
            str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'}},colors: ['#408fdc','#5765b2','#4ebcd5','#bce3c8','9669cc','ef58a7'],");
            str.Append("}); }");
            str.Append("</script>");
            lt.Text = str.ToString().Replace('*', '"');


        }

        protected void lnkAE_Click(object sender, EventArgs e)
        {
            div_Statistics.Visible = false;
            div_inbound.Visible = false;
            //div5.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            outstanding.Visible = false;
            GridView2.Visible = false;
            penBlRelase.Visible = false;
            GridView1.Visible = false;
            PanelAI.Visible = true;
            GrdAI.Visible = true;
            getdataforallbranch("AE");
            GrdOI.Visible = false;
            PanelOI.Visible = false;



            PanelOE.Visible = false;
            GrdOE.Visible = false;
            Panel4.Visible = false;
            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            lbl_cut.Attributes["class"] = "lbl_cutlnkAE";
            lbl_cut.Visible = true;
            hid.Value = "AE";
            lbl_cut.Text = "Air Exports";
            DataTable dt_OprProfit = new DataTable();
            DataTable dt = new DataTable();
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            //string transtype = Session["StrTranType"].ToString();
            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
           // DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
            int month = Todate.Month;
            int year = Todate.Year;
            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
            int count;
            DataTable dtemptyfree = new DataTable();
            dtemptyfree.Columns.Add("S#");
            dtemptyfree.Columns.Add("Branch");
            dtemptyfree.Columns.Add("Product");
            dtemptyfree.Columns.Add("Job #");
            dtemptyfree.Columns.Add("BPJ");
            dtemptyfree.Columns.Add("Flight Details");
            dtemptyfree.Columns.Add("Opend On");
            dtemptyfree.Columns.Add("ETA");
            dtemptyfree.Columns.Add("ETD");
            dtemptyfree.Columns.Add("Closed On");
            dtemptyfree.Columns.Add("Income");
            dtemptyfree.Columns.Add("Expenses");
            dtemptyfree.Columns.Add("Retention");
            //   dt_OprProfit = da_obj_misgrd.Getshipmentnewhome(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AE", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));
            dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_OprProfit = da_obj_misgrd.Getshipmentnewhome("AE", 0, Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()), int.Parse(Session["LoginDivisionId"].ToString()));
            }
            else
            {
                excportexc.Visible = false;
                PanelAI.Visible = false;
                GrdAI.Visible = false;
                lbl_cut.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }

            if (dt_OprProfit.Rows.Count > 0)
            {
                //GridView1.DataSource = dt_OprProfit;
                //GridView1.DataBind();

                DataRow dr = dtemptyfree.NewRow();
                if (dt_OprProfit.Rows.Count > 0)
                {
                    for (int j = 0; j <= dt_OprProfit.Rows.Count - 1; j++)
                    {


                        dtemptyfree.Rows.Add();
                        dr = dtemptyfree.NewRow();
                        dtemptyfree.Rows[j]["S#"] = dt_OprProfit.Rows[j]["S#"].ToString();
                        dtemptyfree.Rows[j]["Branch"] = dt_OprProfit.Rows[j]["Branch"].ToString();
                        dtemptyfree.Rows[j]["Product"] = dt_OprProfit.Rows[j]["Product"].ToString();
                        dtemptyfree.Rows[j]["Job #"] = dt_OprProfit.Rows[j]["JOBNO"].ToString();
                        dtemptyfree.Rows[j]["BPJ"] = dt_OprProfit.Rows[j]["BPJ"].ToString();
                        dtemptyfree.Rows[j]["Flight Details"] = dt_OprProfit.Rows[j]["VSLorVOY"].ToString();
                        dtemptyfree.Rows[j]["Opend On"] = dt_OprProfit.Rows[j]["OpenedON"].ToString();
                        dtemptyfree.Rows[j]["ETA"] = dt_OprProfit.Rows[j]["ETA"].ToString();
                        dtemptyfree.Rows[j]["ETD"] = dt_OprProfit.Rows[j]["ETD"].ToString();
                        dtemptyfree.Rows[j]["Closed On"] = dt_OprProfit.Rows[j]["ClosedON"].ToString();
                        dtemptyfree.Rows[j]["Income"] = dt_OprProfit.Rows[j]["Income"].ToString();
                        dtemptyfree.Rows[j]["Expenses"] = dt_OprProfit.Rows[j]["Expense"].ToString();
                        dtemptyfree.Rows[j]["Retention"] = dt_OprProfit.Rows[j]["Retention"].ToString();

                    }

                    GrdAI.DataSource = dtemptyfree;
                    GrdAI.DataBind();
                }
            }
            else
            {
                GrdAI.DataSource = dtemptyfree;
                GrdAI.DataBind();
            }
        }
        public void vis_div()
        {
            div_Tradelane.Visible = false;
            div_ExemptionList.Visible = false;
            div_CutOffBreakUp.Visible = false;
            div_BillingReport.Visible = false;
            divstatistics.Visible = false;
            div_JobDetails.Visible = false;
            div_inbound.Visible = false;
            div_BLVoucherwise.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            div_line.Visible = false;
            penBlRelase.Visible = false;
            GridView1.Visible = false;
            outstanding.Visible = false;
            GridView2.Visible = false;
            lbl_cut.Visible = false;
            div2_Bookchart.Visible = false;
            excportexc.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;


        }

        protected void lnkAI_Click(object sender, EventArgs e)
        {
            //div5.Visible = false;
            div_inbound.Visible = false;
            div_Statistics.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            outstanding.Visible = false;
            GridView2.Visible = false;
            penBlRelase.Visible = false;
            GridView1.Visible = false;
            PanelAI.Visible = true;
            GrdAI.Visible = true;
            Panel4.Visible = false;
            PanelOE.Visible = false;
            GrdOE.Visible = false;
            div_line.Visible = false;
            excportexc.Visible = true;
            getdataforallbranch("AI");
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkAI";
            div2_Bookchart.Visible = false;
            lbl_cut.Text = "Air Imports";
            DataTable dt_OprProfit = new DataTable();
            DataTable dt = new DataTable();
          // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            //string transtype = Session["StrTranType"].ToString();
            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
           // DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
            int month = Todate.Month;
            int year = Todate.Year;
            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
            int count;
            DataTable dtemptyfree = new DataTable();
            dtemptyfree.Columns.Add("S#");
            dtemptyfree.Columns.Add("Branch");
            dtemptyfree.Columns.Add("Product");
            dtemptyfree.Columns.Add("Job #");
            dtemptyfree.Columns.Add("BPJ");
            dtemptyfree.Columns.Add("Flight Details");
            dtemptyfree.Columns.Add("ETA");
            dtemptyfree.Columns.Add("ETD");
            dtemptyfree.Columns.Add("Opend On");
            dtemptyfree.Columns.Add("Closed On");
            dtemptyfree.Columns.Add("Income");
            dtemptyfree.Columns.Add("Expenses");
            dtemptyfree.Columns.Add("Retention");
            //   dt_OprProfit = da_obj_misgrd.Getshipmentnewhome(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AE", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));

            dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {

                dt_OprProfit = da_obj_misgrd.Getshipmentnewhome("AI", 0, Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()), int.Parse(Session["LoginDivisionId"].ToString()));
            }
            else
            {
                PanelAI.Visible = false;
                GrdAI.Visible = false;
                excportexc.Visible = false;
                lbl_cut.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }

            if (dt_OprProfit.Rows.Count > 0)
            {
                //GridView1.DataSource = dt_OprProfit;
                //GridView1.DataBind();

                DataRow dr = dtemptyfree.NewRow();
                if (dt_OprProfit.Rows.Count > 0)
                {
                    for (int j = 0; j <= dt_OprProfit.Rows.Count - 1; j++)
                    {


                        dtemptyfree.Rows.Add();
                        dr = dtemptyfree.NewRow();
                        dtemptyfree.Rows[j]["S#"] = dt_OprProfit.Rows[j]["S#"].ToString();
                        dtemptyfree.Rows[j]["Branch"] = dt_OprProfit.Rows[j]["Branch"].ToString();
                        dtemptyfree.Rows[j]["Product"] = dt_OprProfit.Rows[j]["Product"].ToString();
                        dtemptyfree.Rows[j]["Job #"] = dt_OprProfit.Rows[j]["JOBNO"].ToString();
                        dtemptyfree.Rows[j]["BPJ"] = dt_OprProfit.Rows[j]["BPJ"].ToString();
                        dtemptyfree.Rows[j]["Flight Details"] = dt_OprProfit.Rows[j]["VSLorVOY"].ToString();
                        dtemptyfree.Rows[j]["ETA"] = dt_OprProfit.Rows[j]["ETA"].ToString();
                        dtemptyfree.Rows[j]["ETD"] = dt_OprProfit.Rows[j]["ETD"].ToString();
                        dtemptyfree.Rows[j]["Opend On"] = dt_OprProfit.Rows[j]["OpenedON"].ToString();
                        dtemptyfree.Rows[j]["Closed On"] = dt_OprProfit.Rows[j]["ClosedON"].ToString();
                        dtemptyfree.Rows[j]["Income"] = dt_OprProfit.Rows[j]["Income"].ToString();
                        dtemptyfree.Rows[j]["Expenses"] = dt_OprProfit.Rows[j]["Expense"].ToString();
                        dtemptyfree.Rows[j]["Retention"] = dt_OprProfit.Rows[j]["Retention"].ToString();

                    }

                    GrdAI.DataSource = dtemptyfree;
                    GrdAI.DataBind();
                }
            }
            else
            {
                GrdAI.DataSource = dtemptyfree;
                GrdAI.DataBind();
            }
        }

        protected void lnkBT_Click(object sender, EventArgs e)
        {
            div_BillingReport.Visible = false;
            div_inbound.Visible = false;
            div_Statistics.Visible = false;

            div_mis.Visible = false;
            div_retention.Visible = false;
            PanelOE.Visible = false;
            Panel4.Visible = false;
            div_bar.Visible = false;
            Panel2.Visible = false;
            outstanding.Visible = false;
            GridView2.Visible = false;
            penBlRelase.Visible = true;
            GridView1.Visible = true;
            div_line.Visible = false;
            excportexc.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkBT";
            div2_Bookchart.Visible = false;
            lbl_cut.Text = "Bounded Trucking";
            DataTable dt_OprProfit = new DataTable();
            DataTable dt = new DataTable();
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            //string transtype = Session["StrTranType"].ToString();
            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
           // DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
            int month = Todate.Month;
            int year = Todate.Year;
            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
            int count;
            DataTable dtemptyfree = new DataTable();
           
            dtemptyfree.Columns.Add("S#");
            dtemptyfree.Columns.Add("Branch");
            dtemptyfree.Columns.Add("Product");
            dtemptyfree.Columns.Add("Job #");
            dtemptyfree.Columns.Add("Opend On");
            dtemptyfree.Columns.Add("VSL/Voy");
            dtemptyfree.Columns.Add("ETA");
            dtemptyfree.Columns.Add("ETD");
            dtemptyfree.Columns.Add("Closed On");
            dtemptyfree.Columns.Add("Income");
            dtemptyfree.Columns.Add("Expenses");
            dtemptyfree.Columns.Add("Retention");
            //   dt_OprProfit = da_obj_misgrd.Getshipmentnewhome(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AE", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));
            dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {

                dt_OprProfit = da_obj_misgrd.Getshipmentnewhome("BT", 0, Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()), int.Parse(Session["LoginDivisionId"].ToString()));
            }
            else
            {
                excportexc.Visible = false;
                lbl_cut.Visible = false;
                penBlRelase.Visible = false;
                GridView1.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_OprProfit.Rows.Count > 0)
            {
                //GridView1.DataSource = dt_OprProfit;
                //GridView1.DataBind();
                DataRow dr = dtemptyfree.NewRow();
                if (dt_OprProfit.Rows.Count > 0)
                {
                    for (int j = 0; j <= dt_OprProfit.Rows.Count - 1; j++)
                    {


                        dtemptyfree.Rows.Add();
                        dr = dtemptyfree.NewRow();
                        dtemptyfree.Rows[j]["S#"] = dt_OprProfit.Rows[j]["S#"].ToString();
                        dtemptyfree.Rows[j]["Branch"] = dt_OprProfit.Rows[j]["Branch"].ToString();
                        dtemptyfree.Rows[j]["Product"] = dt_OprProfit.Rows[j]["Product"].ToString();
                        dtemptyfree.Rows[j]["Job #"] = dt_OprProfit.Rows[j]["JOBNO"].ToString();
                        dtemptyfree.Rows[j]["Opend On"] = dt_OprProfit.Rows[j]["OpenedON"].ToString();
                        dtemptyfree.Rows[j]["VSL/Voy"] = dt_OprProfit.Rows[j]["VSLorVOY"].ToString();
                        dtemptyfree.Rows[j]["ETA"] = dt_OprProfit.Rows[j]["ETA"].ToString();
                        dtemptyfree.Rows[j]["ETD"] = dt_OprProfit.Rows[j]["ETD"].ToString();
                        dtemptyfree.Rows[j]["Closed On"] = dt_OprProfit.Rows[j]["ClosedON"].ToString();
                        dtemptyfree.Rows[j]["Income"] = dt_OprProfit.Rows[j]["Income"].ToString();
                        dtemptyfree.Rows[j]["Expenses"] = dt_OprProfit.Rows[j]["Expense"].ToString();
                        dtemptyfree.Rows[j]["Retention"] = dt_OprProfit.Rows[j]["Retention"].ToString();

                    }

                    GridView1.DataSource = dtemptyfree;
                    GridView1.DataBind();
                }
            }
            else
            {
                GridView1.DataSource = dtemptyfree;
                GridView1.DataBind();
            }
        }

        protected void lnkCH_Click(object sender, EventArgs e)
        {
            Panel3.Visible = true;
            div_BillingReport.Visible = false;
            div_inbound.Visible = false;

            div_Statistics.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;
            PanelOE.Visible = false;
            Panel4.Visible = false;
            div_bar.Visible = false;
            outstanding.Visible = false;
            GridView2.Visible = false;
            PanelAI.Visible = false;
            GrdAI.Visible = false;
            penBlRelase.Visible = true;
            GridView1.Visible = true;
            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkCH";
            excportexc.Visible = true;
            lbl_cut.Text = "Customs Broking";
            DataTable dt_OprProfit = new DataTable();
            DataTable dt = new DataTable();
          //  DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            //string transtype = Session["StrTranType"].ToString();
            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
          // DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
            int month = Todate.Month;
            int year = Todate.Year;
            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
            int count;
            DataTable dtemptyfree = new DataTable();
            dtemptyfree.Columns.Add("S#");
            dtemptyfree.Columns.Add("Branch");
            dtemptyfree.Columns.Add("Product");
            dtemptyfree.Columns.Add("Job #");
            dtemptyfree.Columns.Add("BPJ");
            dtemptyfree.Columns.Add("Opend On");
            dtemptyfree.Columns.Add("VSL/Voy");
            dtemptyfree.Columns.Add("ETA");
            dtemptyfree.Columns.Add("ETD");
            dtemptyfree.Columns.Add("Closed On");
            dtemptyfree.Columns.Add("Income");
            dtemptyfree.Columns.Add("Expenses");
            dtemptyfree.Columns.Add("Retention");
            //   dt_OprProfit = da_obj_misgrd.Getshipmentnewhome(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AE", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));
            dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_OprProfit = da_obj_misgrd.Getshipmentnewhome("CH", 0, Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()), int.Parse(Session["LoginDivisionId"].ToString()));
            }
            else
            {
                Panel3.Visible = false;
                penBlRelase.Visible = false;
                GridView1.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_OprProfit.Rows.Count > 0)
            {
                //GridView1.DataSource = dt_OprProfit;
                //GridView1.DataBind();

                DataRow dr = dtemptyfree.NewRow();
                if (dt_OprProfit.Rows.Count > 0)
                {
                    for (int j = 0; j <= dt_OprProfit.Rows.Count - 1; j++)
                    {


                        dtemptyfree.Rows.Add();
                        dr = dtemptyfree.NewRow();
                        dtemptyfree.Rows[j]["S#"] = dt_OprProfit.Rows[j]["S#"].ToString();
                        dtemptyfree.Rows[j]["Branch"] = dt_OprProfit.Rows[j]["Branch"].ToString();
                        dtemptyfree.Rows[j]["Product"] = dt_OprProfit.Rows[j]["Product"].ToString();
                        dtemptyfree.Rows[j]["Job #"] = dt_OprProfit.Rows[j]["JOBNO"].ToString();
                        dtemptyfree.Rows[j]["BPJ"] = dt_OprProfit.Rows[j]["BPJ"].ToString();
                        dtemptyfree.Rows[j]["Opend On"] = dt_OprProfit.Rows[j]["OpenedON"].ToString();
                        dtemptyfree.Rows[j]["VSL/Voy"] = dt_OprProfit.Rows[j]["VSLorVOY"].ToString();
                        dtemptyfree.Rows[j]["ETA"] = dt_OprProfit.Rows[j]["ETA"].ToString();
                        dtemptyfree.Rows[j]["ETD"] = dt_OprProfit.Rows[j]["ETD"].ToString();
                        dtemptyfree.Rows[j]["Closed On"] = dt_OprProfit.Rows[j]["ClosedON"].ToString();
                        dtemptyfree.Rows[j]["Income"] = dt_OprProfit.Rows[j]["Income"].ToString();
                        dtemptyfree.Rows[j]["Expenses"] = dt_OprProfit.Rows[j]["Expense"].ToString();
                        dtemptyfree.Rows[j]["Retention"] = dt_OprProfit.Rows[j]["Retention"].ToString();

                    }

                    GridView1.DataSource = dtemptyfree;
                    GridView1.DataBind();
                }
            }
            else
            {
                GridView1.DataSource = dtemptyfree;
                GridView1.DataBind();
            }
        }

        protected void lnkOE_Click(object sender, EventArgs e)
        {

            div_inbound.Visible = false;
            div_Statistics.Visible = false;
            //div5.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            outstanding.Visible = false;
            GridView2.Visible = false;
            penBlRelase.Visible = false;
            GridView1.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            getdataforallbranch("FE");

            PanelOI.Visible = false;
            GrdOI.Visible = false;


            PanelOE.Visible = true;
            GrdOE.Visible = true;
            Panel4.Visible = true;
            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            excportexc.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkOE";
            lbl_cut.Text = "Ocean Exports";
            DataTable dt_OprProfit = new DataTable();
            DataTable dt = new DataTable();
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            //string transtype = Session["StrTranType"].ToString();
            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
           // DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
            int month = Todate.Month;
            int year = Todate.Year;
            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
            int count;
            DataTable dtemptyfree = new DataTable();
            dtemptyfree.Columns.Add("S#");
            dtemptyfree.Columns.Add("Branch");
            dtemptyfree.Columns.Add("Product");
            dtemptyfree.Columns.Add("Job #");
            dtemptyfree.Columns.Add("BPJ");
            dtemptyfree.Columns.Add("VSL/Voy");
            dtemptyfree.Columns.Add("ETA");
            dtemptyfree.Columns.Add("ETD");
            dtemptyfree.Columns.Add("POD");
            dtemptyfree.Columns.Add("POL");
            dtemptyfree.Columns.Add("Opend On");
            dtemptyfree.Columns.Add("Closed On");
            dtemptyfree.Columns.Add("Income");
            dtemptyfree.Columns.Add("Expenses");
            dtemptyfree.Columns.Add("Retention");
            //   dt_OprProfit = da_obj_misgrd.Getshipmentnewhome(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AE", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));
            dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_OprProfit = da_obj_misgrd.Getshipmentnewhome("FE", 0, Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()), int.Parse(Session["LoginDivisionId"].ToString()));

            }
            else
            {


                PanelOE.Visible = false;
                GrdOE.Visible = false;
                Panel4.Visible = false;
                excportexc.Visible = false;
                lbl_cut.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_OprProfit.Rows.Count > 0)
            {
                //GridView1.DataSource = dt_OprProfit;
                //GridView1.DataBind();

                DataRow dr = dtemptyfree.NewRow();
                if (dt_OprProfit.Rows.Count > 0)
                {
                    for (int j = 0; j <= dt_OprProfit.Rows.Count - 1; j++)
                    {


                        dtemptyfree.Rows.Add();
                        dr = dtemptyfree.NewRow();
                        dtemptyfree.Rows[j]["S#"] = dt_OprProfit.Rows[j]["S#"].ToString();
                        dtemptyfree.Rows[j]["Branch"] = dt_OprProfit.Rows[j]["Branch"].ToString();
                        dtemptyfree.Rows[j]["Product"] = dt_OprProfit.Rows[j]["Product"].ToString();
                        dtemptyfree.Rows[j]["Job #"] = dt_OprProfit.Rows[j]["JOBNO"].ToString();
                        dtemptyfree.Rows[j]["BPJ"] = dt_OprProfit.Rows[j]["BPJ"].ToString();
                        dtemptyfree.Rows[j]["VSL/Voy"] = dt_OprProfit.Rows[j]["VSLorVOY"].ToString();
                        dtemptyfree.Rows[j]["ETA"] = dt_OprProfit.Rows[j]["ETA"].ToString();
                        dtemptyfree.Rows[j]["ETD"] = dt_OprProfit.Rows[j]["ETD"].ToString();
                        dtemptyfree.Rows[j]["POD"] = dt_OprProfit.Rows[j]["pod"].ToString();
                        dtemptyfree.Rows[j]["POL"] = dt_OprProfit.Rows[j]["pol"].ToString();
                        dtemptyfree.Rows[j]["Opend On"] = dt_OprProfit.Rows[j]["OpenedON"].ToString();
                        dtemptyfree.Rows[j]["Closed On"] = dt_OprProfit.Rows[j]["ClosedON"].ToString();
                        dtemptyfree.Rows[j]["Income"] = dt_OprProfit.Rows[j]["Income"].ToString();
                        dtemptyfree.Rows[j]["Expenses"] = dt_OprProfit.Rows[j]["Expense"].ToString();
                        dtemptyfree.Rows[j]["Retention"] = dt_OprProfit.Rows[j]["Retention"].ToString();

                    }

                    GrdOE.DataSource = dtemptyfree;
                    GrdOE.DataBind();
                }
            }
            else
            {
                GrdOE.DataSource = dtemptyfree;
                GrdOE.DataBind();
            }
        }

        protected void lnkOI_Click(object sender, EventArgs e)
        {

            div_inbound.Visible = false;
            div_Statistics.Visible = false;
            //div5.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            outstanding.Visible = false;
            GridView2.Visible = false;
            penBlRelase.Visible = false;
            GridView1.Visible = false;
            PanelOI.Visible = true;
            GrdOI.Visible = true;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            getdataforallbranch("OI");

            PanelOE.Visible = false;
            GrdOE.Visible = false;

            Panel4.Visible = false;

            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkOI";
            lbl_cut.Text = "Ocean Imports";
            DataTable dt_OprProfit = new DataTable();
            DataTable dt = new DataTable();
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            //string transtype = Session["StrTranType"].ToString();
            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
           // DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
            int month = Todate.Month;
            int year = Todate.Year;
            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
            int count;
            DataTable dtemptyfree = new DataTable();
            dtemptyfree.Columns.Add("S#");
            dtemptyfree.Columns.Add("Branch");
            dtemptyfree.Columns.Add("Product");
            dtemptyfree.Columns.Add("Job #");
            dtemptyfree.Columns.Add("BPJ");
            dtemptyfree.Columns.Add("VSL/Voy");
            dtemptyfree.Columns.Add("POD");
            dtemptyfree.Columns.Add("POL");
            dtemptyfree.Columns.Add("ETA");
            dtemptyfree.Columns.Add("ETD");
            dtemptyfree.Columns.Add("Opend On");
            dtemptyfree.Columns.Add("Closed On");
            dtemptyfree.Columns.Add("Income");
            dtemptyfree.Columns.Add("Expenses");
            dtemptyfree.Columns.Add("Retention");
            //   dt_OprProfit = da_obj_misgrd.Getshipmentnewhome(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AE", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));
            dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_OprProfit = da_obj_misgrd.Getshipmentnewhome("FI", 0, Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()), int.Parse(Session["LoginDivisionId"].ToString()));
            }
            else
            {
                PanelOI.Visible = false;
                GrdOI.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_OprProfit.Rows.Count > 0)
            {
                //GridView1.DataSource = dt_OprProfit;
                //GridView1.DataBind();

                DataRow dr = dtemptyfree.NewRow();
                if (dt_OprProfit.Rows.Count > 0)
                {
                    for (int j = 0; j <= dt_OprProfit.Rows.Count - 1; j++)
                    {


                        dtemptyfree.Rows.Add();
                        dr = dtemptyfree.NewRow();
                        dtemptyfree.Rows[j]["S#"] = dt_OprProfit.Rows[j]["S#"].ToString();
                        dtemptyfree.Rows[j]["Branch"] = dt_OprProfit.Rows[j]["Branch"].ToString();
                        dtemptyfree.Rows[j]["Product"] = dt_OprProfit.Rows[j]["Product"].ToString();
                        dtemptyfree.Rows[j]["Job #"] = dt_OprProfit.Rows[j]["JOBNO"].ToString();
                        dtemptyfree.Rows[j]["BPJ"] = dt_OprProfit.Rows[j]["BPJ"].ToString();
                        dtemptyfree.Rows[j]["VSL/Voy"] = dt_OprProfit.Rows[j]["VSLorVOY"].ToString();
                        dtemptyfree.Rows[j]["POD"] = dt_OprProfit.Rows[j]["pod"].ToString();
                        dtemptyfree.Rows[j]["POL"] = dt_OprProfit.Rows[j]["pol"].ToString();
                        dtemptyfree.Rows[j]["ETA"] = dt_OprProfit.Rows[j]["ETA"].ToString();
                        dtemptyfree.Rows[j]["ETD"] = dt_OprProfit.Rows[j]["ETD"].ToString();
                        dtemptyfree.Rows[j]["Opend On"] = dt_OprProfit.Rows[j]["OpenedON"].ToString();
                        dtemptyfree.Rows[j]["Closed On"] = dt_OprProfit.Rows[j]["ClosedON"].ToString();
                        dtemptyfree.Rows[j]["Income"] = dt_OprProfit.Rows[j]["Income"].ToString();
                        dtemptyfree.Rows[j]["Expenses"] = dt_OprProfit.Rows[j]["Expense"].ToString();
                        dtemptyfree.Rows[j]["Retention"] = dt_OprProfit.Rows[j]["Retention"].ToString();

                    }

                    GrdOI.DataSource = dtemptyfree;
                    GrdOI.DataBind();
                }
            }
            else
            {
                GrdOI.DataSource = dtemptyfree;
                GrdOI.DataBind();
            }
        }

        protected void lnkTotRen_Click(object sender, EventArgs e)
        {

            div_inbound.Visible = false;
            div_Statistics.Visible = false;
            //div5.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            outstanding.Visible = false;
            GridView2.Visible = false;
            penBlRelase.Visible = true;
            GridView1.Visible = true;
            getdataforallbranch("");
            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;

            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkTotRen";
            lbl_cut.Text = "Total Retention";
            DataTable dt_OprProfit = new DataTable();
            DataTable dt = new DataTable();
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            //string transtype = Session["StrTranType"].ToString();
            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
           // DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
            int month = Todate.Month;
            int year = Todate.Year;
            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
            int count;
            DataTable dtemptyfree = new DataTable();
            dtemptyfree.Columns.Add("S#");
            dtemptyfree.Columns.Add("Branch");
            dtemptyfree.Columns.Add("Product");
            dtemptyfree.Columns.Add("Job #");
            dtemptyfree.Columns.Add("BPJ");
            dtemptyfree.Columns.Add("Opend On");
            dtemptyfree.Columns.Add("VSL/Voy/FrightDetails");
            dtemptyfree.Columns.Add("ETA");
            dtemptyfree.Columns.Add("ETD");
            dtemptyfree.Columns.Add("Closed On");
            dtemptyfree.Columns.Add("Income");
            dtemptyfree.Columns.Add("Expenses");
            dtemptyfree.Columns.Add("Retention");
            //   dt_OprProfit = da_obj_misgrd.Getshipmentnewhome(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AE", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));
            dt_MenuRights = obj_UP.GetformuserrightsMIMIS(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 19, "M I S");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_OprProfit = da_obj_misgrd.Getshipmentnewhome("CO", 0, Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_from.Text).ToString()), Convert.ToDateTime(Utility.fn_ConvertDatetime(txt_to.Text).ToString()), int.Parse(Session["LoginDivisionId"].ToString()));
            }
            else
            {
                excportexc.Visible = false;
                penBlRelase.Visible = false;
                GridView1.Visible = false;
                lbl_cut.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_OprProfit.Rows.Count > 0)
            {
                //GridView1.DataSource = dt_OprProfit;
                //GridView1.DataBind();

                DataRow dr = dtemptyfree.NewRow();
                if (dt_OprProfit.Rows.Count > 0)
                {
                    for (int j = 0; j <= dt_OprProfit.Rows.Count - 1; j++)
                    {


                        dtemptyfree.Rows.Add();
                        dr = dtemptyfree.NewRow();
                        dtemptyfree.Rows[j]["S#"] = dt_OprProfit.Rows[j]["S#"].ToString();
                        dtemptyfree.Rows[j]["Branch"] = dt_OprProfit.Rows[j]["Branch"].ToString();
                        dtemptyfree.Rows[j]["Product"] = dt_OprProfit.Rows[j]["Product"].ToString();
                        dtemptyfree.Rows[j]["Job #"] = dt_OprProfit.Rows[j]["JOBNO"].ToString();
                        dtemptyfree.Rows[j]["BPJ"] = dt_OprProfit.Rows[j]["BPJ"].ToString();
                        dtemptyfree.Rows[j]["Opend On"] = dt_OprProfit.Rows[j]["OpenedON"].ToString();
                        dtemptyfree.Rows[j]["VSL/Voy/FrightDetails"] = dt_OprProfit.Rows[j]["VSLorVOY"].ToString();
                        dtemptyfree.Rows[j]["ETA"] = dt_OprProfit.Rows[j]["ETA"].ToString();
                        dtemptyfree.Rows[j]["ETD"] = dt_OprProfit.Rows[j]["ETD"].ToString();
                        dtemptyfree.Rows[j]["Closed On"] = dt_OprProfit.Rows[j]["ClosedON"].ToString();
                        dtemptyfree.Rows[j]["Income"] = dt_OprProfit.Rows[j]["Income"].ToString();
                        dtemptyfree.Rows[j]["Expenses"] = dt_OprProfit.Rows[j]["Expense"].ToString();
                        dtemptyfree.Rows[j]["Retention"] = dt_OprProfit.Rows[j]["Retention"].ToString();

                    }

                    GridView1.DataSource = dtemptyfree;
                    GridView1.DataBind();
                }
            }
            else
            {
                GridView1.DataSource = dtemptyfree;
                GridView1.DataBind();
            }
        }

        protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                    double dbl_temp = 0;

                    if (e.Row.Cells[1].Text == "Total")
                    {
                        e.Row.ForeColor = System.Drawing.Color.Brown;
                        e.Row.Cells[0].Text = "";
                        e.Row.Cells[3].Text = "";
                        e.Row.Cells[4].Text = "";
                        e.Row.Cells[8].Text = "";
                    }


                    if (double.TryParse(e.Row.Cells[9].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[9].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[9].Attributes.CssStyle["text-align"] = "Right";
                    }
                    if (double.TryParse(e.Row.Cells[10].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[10].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[10].Attributes.CssStyle["text-align"] = "Right";
                    }
                    if (double.TryParse(e.Row.Cells[11].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[11].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[11].Attributes.CssStyle["text-align"] = "Right";
                    }



                    //if (double.TryParse(e.Row.Cells[5].Text.ToString(), out dbl_temp))
                    //{
                    //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                    //    e.Row.Cells[5].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                    //    e.Row.Cells[5].Attributes.CssStyle["text-align"] = "Right";
                    //}
                    //if (double.TryParse(e.Row.Cells[6].Text.ToString(), out dbl_temp))
                    //{
                    //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                    //    e.Row.Cells[6].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                    //    e.Row.Cells[6].Attributes.CssStyle["text-align"] = "Right";
                    //}
                    //if (double.TryParse(e.Row.Cells[7].Text.ToString(), out dbl_temp))
                    //{
                    //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                    //    e.Row.Cells[7].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                    //    e.Row.Cells[7].Attributes.CssStyle["text-align"] = "Right";
                    //}



                }


            }
        }


        protected void GridView2_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;

                    Label lblshortname = (Label)e.Row.FindControl("shortname");
                    Label lblvouno = (Label)e.Row.FindControl("vouno");

                    if (lblshortname.Text == "Total")
                    {
                        e.Row.ForeColor = System.Drawing.Color.Brown;
                        lblvouno.Text = "";
                        e.Row.Cells[9].Text = "";
                        e.Row.Cells[10].Text = "";
                        e.Row.Cells[11].Text = "";
                        e.Row.Cells[12].Text = "";
                        e.Row.Cells[13].Text = "";
                    }
                }
                double dbl_temp = 0;
                if (double.TryParse(e.Row.Cells[8].Text.ToString(), out dbl_temp))
                {
                    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                    e.Row.Cells[8].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                    e.Row.Cells[8].Attributes.CssStyle["text-align"] = "Right";
                }
                if (double.TryParse(e.Row.Cells[10].Text.ToString(), out dbl_temp))
                {
                    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                    e.Row.Cells[10].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                    e.Row.Cells[10].Attributes.CssStyle["text-align"] = "Right";
                }
                if (double.TryParse(e.Row.Cells[12].Text.ToString(), out dbl_temp))
                {
                    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                    e.Row.Cells[12].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                    e.Row.Cells[12].Attributes.CssStyle["text-align"] = "Right";
                }
            }
        }

        protected void lnkoutstAI_Click(object sender, EventArgs e)
        {
            div_inbound.Visible = false;

            div_Statistics.Visible = false;

            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            penBlRelase.Visible = false;
            GridView1.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;


            div_line.Visible = false;


            div2_Bookchart.Visible = false;
            outstanding.Visible = true;
            GridView2.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkAI";
            lbl_cut.Text = "Air Imports Outstanding";
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt_outstanting = new DataTable();
            int subgrpid = 40;
            dt_MenuRights = obj_UP.GetformuserrightsnewOUT(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 21, "Outstanding - OnlineNew");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_outstanting = da_obj_misgrd.Getnewoutstanding4MIS(Convert.ToInt32(Session["LoginEmpId"].ToString()), 0, Convert.ToInt32(Session["LoginDivisionId"].ToString()), subgrpid, "AI");
            }
            else
            {
                outstanding.Visible = false;
                GridView2.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_outstanting.Rows.Count > 0)
            {

                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
            else
            {
                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
        }

        protected void lnkoutstAE_Click(object sender, EventArgs e)
        {
            div_inbound.Visible = false;
            div_Statistics.Visible = false;

            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            penBlRelase.Visible = false;
            GridView1.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;


            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            outstanding.Visible = true;
            GridView2.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkAE";
            lbl_cut.Text = "Air Exports Outstanding";
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt_outstanting = new DataTable();
            int subgrpid = 40;
            dt_MenuRights = obj_UP.GetformuserrightsnewOUT(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 21, "Outstanding - OnlineNew");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_outstanting = da_obj_misgrd.Getnewoutstanding4MIS(Convert.ToInt32(Session["LoginEmpId"].ToString()), 0, Convert.ToInt32(Session["LoginDivisionId"].ToString()), subgrpid, "AE");
            }
            else
            {
                outstanding.Visible = false;
                GridView2.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_outstanting.Rows.Count > 0)
            {

                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
            else
            {
                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }


        }

        protected void lnkoutstBT_Click(object sender, EventArgs e)
        {
            div_BillingReport.Visible = false;

            div_inbound.Visible = false;
            div_Statistics.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            penBlRelase.Visible = false;
            GridView1.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;


            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            outstanding.Visible = true;
            GridView2.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkBT";
            lbl_cut.Text = "Bounded Trucking Outstanding";
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt_outstanting = new DataTable();
            int subgrpid = 40;
            dt_MenuRights = obj_UP.GetformuserrightsnewOUT(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 21, "Outstanding - OnlineNew");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_outstanting = da_obj_misgrd.Getnewoutstanding4MIS(Convert.ToInt32(Session["LoginEmpId"].ToString()), 0, Convert.ToInt32(Session["LoginDivisionId"].ToString()), subgrpid, "BT");
            }
            else
            {
                outstanding.Visible = false;
                GridView2.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_outstanting.Rows.Count > 0)
            {

                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
            else
            {
                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
        }

        protected void lnkoutstCH_Click(object sender, EventArgs e)
        {
            div_inbound.Visible = false;
            div_Statistics.Visible = false;

            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            penBlRelase.Visible = true;
            GridView1.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;

            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            outstanding.Visible = true;
            GridView2.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkCH";
            lbl_cut.Text = "Customs Broking Outstanding";
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt_outstanting = new DataTable();
            int subgrpid = 40;
            dt_MenuRights = obj_UP.GetformuserrightsnewOUT(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 21, "Outstanding - OnlineNew");

            if (dt_MenuRights.Rows.Count > 0)
            {

                dt_outstanting = da_obj_misgrd.Getnewoutstanding4MIS(Convert.ToInt32(Session["LoginEmpId"].ToString()), 0, Convert.ToInt32(Session["LoginDivisionId"].ToString()), subgrpid, "CH");
            }
            else
            {
                outstanding.Visible = false;
                GridView2.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_outstanting.Rows.Count > 0)
            {

                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
            else
            {
                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
        }

        protected void lnkoutstOE_Click(object sender, EventArgs e)
        {
            div_inbound.Visible = false;
            div_Statistics.Visible = false;

            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            penBlRelase.Visible = false;
            GridView1.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;


            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            outstanding.Visible = true;
            GridView2.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkOE";
            lbl_cut.Text = "Ocean Exports Outstanding";
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt_outstanting = new DataTable();
            int subgrpid = 40;
            dt_MenuRights = obj_UP.GetformuserrightsnewOUT(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 21, "Outstanding - OnlineNew");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_outstanting = da_obj_misgrd.Getnewoutstanding4MIS(Convert.ToInt32(Session["LoginEmpId"].ToString()), 0, Convert.ToInt32(Session["LoginDivisionId"].ToString()), subgrpid, "FE");
            }
            else
            {
                outstanding.Visible = false;
                GridView2.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_outstanting.Rows.Count > 0)
            {

                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
            else
            {
                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
        }

        protected void lnkoutstOI_Click(object sender, EventArgs e)
        {
            div_inbound.Visible = false;
            div_Statistics.Visible = false;
            //div5.Visible = false;
            div_mis.Visible = false;
            div_retention.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            penBlRelase.Visible = false;
            GridView1.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;

            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            outstanding.Visible = true;
            GridView2.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkOI";
            lbl_cut.Text = "Ocean Import Outstanding";
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt_outstanting = new DataTable();
            int subgrpid = 40;
            dt_MenuRights = obj_UP.GetformuserrightsnewOUT(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 21, "Outstanding - OnlineNew");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_outstanting = da_obj_misgrd.Getnewoutstanding4MIS(Convert.ToInt32(Session["LoginEmpId"].ToString()), 0, Convert.ToInt32(Session["LoginDivisionId"].ToString()), subgrpid, "FI");
            }
            else
            {
                outstanding.Visible = false;
                GridView2.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_outstanting.Rows.Count > 0)
            {

                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
            else
            {
                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
        }

        protected void lnkoutsttot_Click(object sender, EventArgs e)
        {
            div_inbound.Visible = false;
            //div5.Visible = false;
            div_Statistics.Visible = false;

            div_retention.Visible = false;
            div_mis.Visible = false;
            div_bar.Visible = false;
            excportexc.Visible = true;
            penBlRelase.Visible = false;
            GridView1.Visible = false;
            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;


            div_line.Visible = false;
            div2_Bookchart.Visible = false;
            outstanding.Visible = true;
            GridView2.Visible = true;
            lbl_cut.Visible = true;
            lbl_cut.Attributes["class"] = "lbl_cutlnkTotRen";
            lbl_cut.Text = "Total Outstanding";
           // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
            DataTable dt_outstanting = new DataTable();
            int subgrpid = 40;
            dt_MenuRights = obj_UP.GetformuserrightsnewOUT(Convert.ToInt16(Session["LoginEmpId"].ToString()), "", Convert.ToInt16(Session["LoginBranchid"].ToString()), 21, "Outstanding - OnlineNew");

            if (dt_MenuRights.Rows.Count > 0)
            {
                dt_outstanting = da_obj_misgrd.Getnewoutstanding4MIS(Convert.ToInt32(Session["LoginEmpId"].ToString()), 0, Convert.ToInt32(Session["LoginDivisionId"].ToString()), subgrpid, "CO");
            }
            else
            {
                outstanding.Visible = false;
                GridView2.Visible = false;
                lbl_cut.Visible = false;
                excportexc.Visible = false;
                ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "logix", "alertify.alert('No Rights');", true);
                return;
            }
            if (dt_outstanting.Rows.Count > 0)
            {

                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
            else
            {
                GridView2.DataSource = dt_outstanting;
                GridView2.DataBind();
            }
        }



        protected void excportexc_Click(object sender, EventArgs e)
        {
            string Filename = "";
            if (GridView2.Rows.Count > 0 && GridView2.Visible == true)
            {
                //Response.Clear();
                //Response.Buffer = true;
                //Response.AddHeader("content-disposition", "attachment;filename=oustanding.xls");
                //Response.Charset = "";
                //Response.ContentType = "application/vnd.ms-excel";
                //StringWriter StringWriter = new System.IO.StringWriter();
                //HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);
                //grdOutStanding.GridLines = GridLines.Both;
                //grdOutStanding.HeaderStyle.Font.Bold = true;
                //grdOutStanding.RenderControl(HtmlTextWriter);
                //Response.Write(StringWriter.ToString());
                //Response.End();

                Filename = "OutStandingDetails";

                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("content-disposition", "attachment;filename=OutStandingDetails.xls");
                Response.Charset = "";
                Response.ContentType = "application/vnd.xls";
                StringWriter StringWriter = new System.IO.StringWriter();
                HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);

                GridView2.AllowPaging = false;
                //  Grdincomnotbooked();
                // get_out();

                GridView2.GridLines = GridLines.Both;
                GridView2.HeaderStyle.Font.Bold = true;
                GridView2.RenderControl(HtmlTextWriter);
                Response.Write(StringWriter.ToString());
                Response.End();
            }

            if (GridView1.Rows.Count > 0 && GridView1.Visible == true)
            {
                //Response.Clear();
                //Response.Buffer = true;
                //Response.AddHeader("content-disposition", "attachment;filename=oustanding.xls");
                //Response.Charset = "";
                //Response.ContentType = "application/vnd.ms-excel";
                //StringWriter StringWriter = new System.IO.StringWriter();
                //HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);
                //grdOutStanding.GridLines = GridLines.Both;
                //grdOutStanding.HeaderStyle.Font.Bold = true;
                //grdOutStanding.RenderControl(HtmlTextWriter);
                //Response.Write(StringWriter.ToString());
                //Response.End();

                Filename = "OperatingProfit";

                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("content-disposition", "attachment;filename=OperatingProfit.xls");
                Response.Charset = "";
                Response.ContentType = "application/vnd.xls";
                StringWriter StringWriter = new System.IO.StringWriter();
                HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);

                GridView1.AllowPaging = false;
                //  Grdincomnotbooked();
                // get_out();

                GridView1.GridLines = GridLines.Both;
                GridView1.HeaderStyle.Font.Bold = true;
                GridView1.RenderControl(HtmlTextWriter);
                Response.Write(StringWriter.ToString());
                Response.End();
            }

            if (GrdAI.Rows.Count > 0 && GrdAI.Visible == true)
            {
                //Response.Clear();
                //Response.Buffer = true;
                //Response.AddHeader("content-disposition", "attachment;filename=oustanding.xls");
                //Response.Charset = "";
                //Response.ContentType = "application/vnd.ms-excel";
                //StringWriter StringWriter = new System.IO.StringWriter();
                //HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);
                //grdOutStanding.GridLines = GridLines.Both;
                //grdOutStanding.HeaderStyle.Font.Bold = true;
                //grdOutStanding.RenderControl(HtmlTextWriter);
                //Response.Write(StringWriter.ToString());
                //Response.End();

                Filename = "OperatingProfit";

                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("content-disposition", "attachment;filename=OperatingProfit.xls");
                Response.Charset = "";
                Response.ContentType = "application/vnd.xls";
                StringWriter StringWriter = new System.IO.StringWriter();
                HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);

                GrdAI.AllowPaging = false;
                //  Grdincomnotbooked();
                // get_out();

                GrdAI.GridLines = GridLines.Both;
                GrdAI.HeaderStyle.Font.Bold = true;
                GrdAI.RenderControl(HtmlTextWriter);
                Response.Write(StringWriter.ToString());
                Response.End();
            }

            if (GrdOE.Rows.Count > 0 && GrdOE.Visible == true)
            {
                //Response.Clear();
                //Response.Buffer = true;
                //Response.AddHeader("content-disposition", "attachment;filename=oustanding.xls");
                //Response.Charset = "";
                //Response.ContentType = "application/vnd.ms-excel";
                //StringWriter StringWriter = new System.IO.StringWriter();
                //HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);
                //grdOutStanding.GridLines = GridLines.Both;
                //grdOutStanding.HeaderStyle.Font.Bold = true;
                //grdOutStanding.RenderControl(HtmlTextWriter);
                //Response.Write(StringWriter.ToString());
                //Response.End();

                Filename = "OperatingProfit";

                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("content-disposition", "attachment;filename=OperatingProfit.xls");
                Response.Charset = "";
                Response.ContentType = "application/vnd.xls";
                StringWriter StringWriter = new System.IO.StringWriter();
                HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);

                GrdOE.AllowPaging = false;
                //  Grdincomnotbooked();
                // get_out();

                GrdOE.GridLines = GridLines.Both;
                GrdOE.HeaderStyle.Font.Bold = true;
                GrdOE.RenderControl(HtmlTextWriter);
                Response.Write(StringWriter.ToString());
                Response.End();
            }


            if (GrdOI.Rows.Count > 0 && GrdOI.Visible == true)
            {
                //Response.Clear();
                //Response.Buffer = true;
                //Response.AddHeader("content-disposition", "attachment;filename=oustanding.xls");
                //Response.Charset = "";
                //Response.ContentType = "application/vnd.ms-excel";
                //StringWriter StringWriter = new System.IO.StringWriter();
                //HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);
                //grdOutStanding.GridLines = GridLines.Both;
                //grdOutStanding.HeaderStyle.Font.Bold = true;
                //grdOutStanding.RenderControl(HtmlTextWriter);
                //Response.Write(StringWriter.ToString());
                //Response.End();

                Filename = "OperatingProfit";

                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("content-disposition", "attachment;filename=OperatingProfit.xls");
                Response.Charset = "";
                Response.ContentType = "application/vnd.xls";
                StringWriter StringWriter = new System.IO.StringWriter();
                HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);

                GrdOI.AllowPaging = false;
                //  Grdincomnotbooked();
                // get_out();

                GrdOI.GridLines = GridLines.Both;
                GrdOI.HeaderStyle.Font.Bold = true;
                GrdOI.RenderControl(HtmlTextWriter);
                Response.Write(StringWriter.ToString());
                Response.End();
            }
        }





        protected void GrdAI_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                    double dbl_temp = 0;

                    if (e.Row.Cells[1].Text == "Total")
                    {
                        e.Row.ForeColor = System.Drawing.Color.Brown;
                        e.Row.Cells[0].Text = "";
                        e.Row.Cells[3].Text = "";
                        e.Row.Cells[4].Text = "";
                        e.Row.Cells[8].Text = "";
                    }


                    if (double.TryParse(e.Row.Cells[9].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[9].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[9].Attributes.CssStyle["text-align"] = "Right";
                    }
                    if (double.TryParse(e.Row.Cells[10].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[10].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[10].Attributes.CssStyle["text-align"] = "Right";
                    }
                    if (double.TryParse(e.Row.Cells[11].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[11].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[11].Attributes.CssStyle["text-align"] = "Right";
                    }


                }
            }

            //if (double.TryParse(e.Row.Cells[9].Text.ToString(), out dbl_temp))
            //{
            //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
            //    e.Row.Cells[9].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
            //    e.Row.Cells[9].Attributes.CssStyle["text-align"] = "Right";
            //}
            //if (double.TryParse(e.Row.Cells[10].Text.ToString(), out dbl_temp))
            //{
            //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
            //    e.Row.Cells[10].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
            //    e.Row.Cells[10].Attributes.CssStyle["text-align"] = "Right";
            //}
            //if (double.TryParse(e.Row.Cells[11].Text.ToString(), out dbl_temp))
            //{
            //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
            //    e.Row.Cells[11].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
            //    e.Row.Cells[11].Attributes.CssStyle["text-align"] = "Right";
            //}



            //if (double.TryParse(e.Row.Cells[5].Text.ToString(), out dbl_temp))
            //{
            //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
            //    e.Row.Cells[5].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
            //    e.Row.Cells[5].Attributes.CssStyle["text-align"] = "Right";
            //}
            //if (double.TryParse(e.Row.Cells[6].Text.ToString(), out dbl_temp))
            //{
            //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
            //    e.Row.Cells[6].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
            //    e.Row.Cells[6].Attributes.CssStyle["text-align"] = "Right";
            //}
            //if (double.TryParse(e.Row.Cells[7].Text.ToString(), out dbl_temp))
            //{
            //    //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
            //    e.Row.Cells[7].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
            //    e.Row.Cells[7].Attributes.CssStyle["text-align"] = "Right";
            //}




        }

        protected void GrdOE_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                    double dbl_temp = 0;

                    if (e.Row.Cells[1].Text == "Total")
                    {
                        e.Row.ForeColor = System.Drawing.Color.Brown;
                        e.Row.Cells[0].Text = "";
                        e.Row.Cells[3].Text = "";
                        e.Row.Cells[4].Text = "";
                        e.Row.Cells[8].Text = "";
                    }

                    if (double.TryParse(e.Row.Cells[11].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[11].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[11].Attributes.CssStyle["text-align"] = "Right";
                    }
                    if (double.TryParse(e.Row.Cells[12].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[12].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[12].Attributes.CssStyle["text-align"] = "Right";
                    }
                    if (double.TryParse(e.Row.Cells[13].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[13].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[13].Attributes.CssStyle["text-align"] = "Right";
                    }

                }
            }

        }

        protected void GrdOI_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                    double dbl_temp = 0;

                    if (e.Row.Cells[1].Text == "Total")
                    {
                        e.Row.ForeColor = System.Drawing.Color.Brown;
                        e.Row.Cells[0].Text = "";
                        e.Row.Cells[3].Text = "";
                        e.Row.Cells[4].Text = "";
                        e.Row.Cells[8].Text = "";
                    }

                    if (double.TryParse(e.Row.Cells[11].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[11].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[11].Attributes.CssStyle["text-align"] = "Right";
                    }
                    if (double.TryParse(e.Row.Cells[12].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[12].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[12].Attributes.CssStyle["text-align"] = "Right";
                    }
                    if (double.TryParse(e.Row.Cells[13].Text.ToString(), out dbl_temp))
                    {
                        //e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;                        
                        e.Row.Cells[13].Text = dbl_temp.ToString("#,##.00");//string.Format("{0:#,#.00}", dbl_temp); //string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[13].Attributes.CssStyle["text-align"] = "Right";
                    }
                }



            }

        }

        //        public void salelinechart()
        //        {
        //            DataTable dt_OprProfit = new DataTable();
        //            DataTable dt = new DataTable();
        //            DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
        //            //string transtype = Session["StrTranType"].ToString();
        //            DateTime Todate = Convert.ToDateTime(Logobj.GetDate().ToString());
        //            DataAccess.ForwardingExports.JobInfo objJob = new DataAccess.ForwardingExports.JobInfo();
        //            int month = Todate.Month;
        //            int year = Todate.Year;
        //            DateTime fromdate = Convert.ToDateTime(month + "/01/" + year);
        //            int count;

        //            dt_OprProfit = da_obj_misgrd.GetOperatingProfit(Convert.ToInt32(Session["LoginBranchid"].ToString()), int.Parse(Session["LoginDivisionId"].ToString()), "AC", Convert.ToDateTime((fromdate.ToString())), Convert.ToDateTime((Todate.ToString())));


        //            // dt= outobj.GetOutStandingProcessUiNew(Convert.ToInt32(Session["LoginEmpId"]), time, Convert.ToInt32(Session["LoginDivisionId"]));
        //            StringBuilder str = new StringBuilder();
        //            str.Append(@"<script type=*text/javascript*> google.load( *visualization*, *1*, {packages:[*corechart*]});
        //            google.setOnLoadCallback(drawChart);
        //            function drawChart() {
        //            var data = new google.visualization.DataTable();
        //            data.addColumn('string', 'month');
        //            data.addColumn('number', '');
        //            data.addRows(" + dt_OprProfit.Rows.Count + ");");

        //            for (int i = 0; i <= dt_OprProfit.Rows.Count - 1; i++)
        //            {
        //                str.Append("data.setValue( " + i + "," + 0 + "," + "'" + dt_OprProfit.Rows[i]["month"].ToString() + "');");
        //                str.Append("data.setValue(" + i + "," + 1 + "," + dt_OprProfit.Rows[i]["amount"].ToString() + ") ;");
        //                if (dt_OprProfit.Rows[i]["month"].ToString() == "month")
        //                {
        //                    color = "green";
        //                }
        //                else
        //                {
        //                    color = "DeepSkyBlue";
        //                }


        //            }

        //            str.Append("   var chart = new google.visualization.LineChart(document.getElementById('chart_div'));");
        //            str.Append(" chart.draw(data, {width: 580, height: 300, title: 'Performance',");
        //            str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'},slantedText:true},width:'645',colors: ['DeepSkyBlue','" + color + "'],");
        //            //  str.Append("hAxis: {title: '', titleTextStyle: {color: 'green'}}");
        //            str.Append("}); }");
        //            str.Append("</script>");
        //            lt.Text = str.ToString().Replace('*', '"');

        //        }



        //MIS COPR START

        [WebMethod]
        public static List<string> Getcus(string prefix)
        {
            List<string> customers = new List<string>();
            DataTable obj_dt = new DataTable();
            string port, agent, Consignee, name;

            if (HttpContext.Current.Session["Port"].ToString() != "")
            {
                port = HttpContext.Current.Session["Port"].ToString();
                if (port == "Port")
                {
                    DataAccess.Masters.MasterPort da_obj_Port = new DataAccess.Masters.MasterPort();
                    
                    obj_dt = da_obj_Port.GetLikePort(prefix.ToUpper());
                    HttpContext.Current.Session["DataTable"] = obj_dt;
                    customers = Utility.Fn_DatatableToList(obj_dt, "portname", "portid");
                }
            }
            else if (HttpContext.Current.Session["Agent"].ToString() != "")
            {
                agent = HttpContext.Current.Session["Agent"].ToString();
                if (agent == "P")
                {
                   DataAccess.Masters.MasterCustomer da_obj_Customer = new DataAccess.Masters.MasterCustomer();

                    obj_dt = da_obj_Customer.GetLikeCustomer(prefix.ToUpper(), "P");
                    HttpContext.Current.Session["DataTable"] = obj_dt;
                    customers = Utility.Fn_DatatableToList_Customer(obj_dt, "customer", "customerid");
                }
            }
            else if (HttpContext.Current.Session["Consignee"].ToString() != "")
            {
                Consignee = HttpContext.Current.Session["Consignee"].ToString();
                if (Consignee == "C")
                {
                   DataAccess.Masters.MasterCustomer da_obj_Customer = new DataAccess.Masters.MasterCustomer();
                    obj_dt = da_obj_Customer.GetLikeCustomer(prefix.ToUpper(), "C");
                    HttpContext.Current.Session["DataTable"] = obj_dt;
                    customers = Utility.Fn_DatatableToList_Customer(obj_dt, "customer", "customerid");
                }
            }
            else if (HttpContext.Current.Session["sales"].ToString() != "")
            {
                name = HttpContext.Current.Session["sales"].ToString();
                if (name == "Name")
                {
                    DataAccess.Masters.MasterEmployee da_obj_Employee = new DataAccess.Masters.MasterEmployee();
                    obj_dt = da_obj_Employee.GetLikeEmployee(prefix.ToUpper());
                    HttpContext.Current.Session["DataTable"] = obj_dt;
                    customers = Utility.Fn_DatatableToList(obj_dt, "empnamecode", "employeeid");
                }
            }
            return customers;
        }

        protected void Load_Data()
        {
            ddl_graph1.Items.Add("Data");
            ddl_graph1.Items.Add("Graph");
        }

        protected void Loadbranch()
        {
            //  ddl_branch.ForeColor = System.Drawing.Color.Black;
            //  //ddl_branch.Items.Add("---SELECT BRANCH---");
            //  ddl_branch.Items.Add("ALL");
            //  ddl_branch.Items.Add("AHMEDABAD");
            //  ddl_branch.Items.Add("BANGALORE");
            ////  ddl_branch.Items.Add("CALCUTTA");
            //  ddl_branch.Items.Add("CHENNAI");
            // // ddl_branch.Items.Add("COCHIN");
            //  //ddl_branch.Items.Add("COIMBATORE");
            //  ddl_branch.Items.Add("HYDERABAD");
            // // ddl_branch.Items.Add("KARUR");
            // // ddl_branch.Items.Add("LUDHIANA");
            //  ddl_branch.Items.Add("MUMBAI");
            //  ddl_branch.Items.Add("NEW DELHI");
            // // ddl_branch.Items.Add("PUNE");
            ////  ddl_branch.Items.Add("TIRUPUR");
            // // ddl_branch.Items.Add("TRIVANDRUM");
            //  ddl_branch.Items.Add("TUTICORIN");
            //  ddl_branch.Items.Add("VISHAKHAPATNAM");
            DataTable Dtb = new DataTable();
            try
            {
                ddl_branch.Items.Clear();
                Dtb = bobj.GetBranchByDivID(Convert.ToInt32(Session["LoginDivisionId"].ToString()));
                ddl_branch.Items.Add("");
                ddl_branch.Items.Add("ALL");
                if (Dtb.Rows.Count > 0)
                {
                    for (int i = 0; i <= Dtb.Rows.Count - 1; i++)
                    {
                        if (Dtb.Rows[i]["branch"].ToString() != "CORPORATE")
                        {
                            ddl_branch.Items.Add(Dtb.Rows[i]["branch"].ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void LoadReport()
        {
            ddl_Report.Items.Clear();
            ddl_Report.ForeColor = System.Drawing.Color.Black;
            //ddl_Report.Items.Add("---SELECT REPORT---");
            ddl_Report.Items.Add("By Agent");
            ddl_Report.Items.Add("By Consignee");
            ddl_Report.Items.Add("Controlled By Us");
            ddl_Report.Items.Add("Jobwise  P&L");
          //  ddl_Report.Items.Add("Log Details");
            ddl_Report.Items.Add("Loss Jobs");
            ddl_Report.Items.Add("By Carrier");
            ddl_Report.Items.Add("Controlled By Agent");
            ddl_Report.Items.Add("Agent Controlled Vs Our Controlled");
            ddl_Report.Items.Add("Operating Profit");
            ddl_Report.Items.Add("By POD");
            ddl_Report.Items.Add("By POL");
            ddl_Report.Items.Add("By Customer");
          //  ddl_Report.Items.Add("Retention for N / F");
            ddl_Report.Items.Add("By Sales Person");
            ddl_Report.Items.Add("By Sector");
            ddl_Report.Items.Add("By BL /AWB");
            ddl_Report.Items.Add("By Shipper");
            ddl_Report.Items.Add("Top 50 Customer");
            //ddl_Report.Items.Add("Trend Analysis - Customer");
            //ddl_Report.Items.Add("Trend Analysis - Product");
            //ddl_Report.Items.Add("Trend Analysis - Sales Person");
            //ddl_Report.Items.Add("Year M I S");

            DataTable dt_rights = Session["dt_UserRights"] as DataTable;
           // DataAccess.UserPermission obj_UP = new DataAccess.UserPermission();
            dt_rights = obj_UP.SelMainmenuWithRights4MIreport(Convert.ToInt16(Session["LoginEmpId"].ToString()), "MI", Convert.ToInt16(Session["LoginBranchid"].ToString()));
            for (int i = 0; i < dt_rights.Rows.Count; i++)
            {

                ddl_Report.Items.Add(dt_rights.Rows[i]["submenuname"].ToString().Trim());
            }       


              
            //DataTable dtLi = new DataTable();
            //DataView data1 = dt_rights.DefaultView;
            //// data1.RowFilter = "menuname = '" + "Analysis" + "'";//uiname = '" + dtnew.Rows[i]["uiname"] + "' and  and trantype <> '" + "CH" + "' and trantype <> '" + "BT" + "'
            //data1.RowFilter = "menuname = '" + "Analysis" + "' ";
            //dtLi = data1.ToTable();
            //dt_MenuRights = dtLi;
            //for (int i = 0; i < dt_MenuRights.Rows.Count; i++)
            //{
            //    if (dt_MenuRights.Rows[i]["menuname"].ToString().Trim() == "Analysis")
            //    {
            //        if (dt_MenuRights.Rows[i]["submenuname"].ToString().Trim() == "Sales Person" || dt_MenuRights.Rows[i]["submenuname"].ToString().Trim() == "Customer" || dt_MenuRights.Rows[i]["submenuname"].ToString().Trim() == "Product")
            //        {

            //        }
            //        else
            //        {
            //            ddl_Report.Items.Add(dt_MenuRights.Rows[i]["submenuname"].ToString().Trim());
            //        }


            //    }
            //}

            //List<System.Web.UI.WebControls.ListItem> li = new List<System.Web.UI.WebControls.ListItem>();
            //foreach (System.Web.UI.WebControls.ListItem list in ddl_Report.Items)
            //{
            //    li.Add(list);
            //}
            //li.Sort((x, y) => string.Compare(x.Text, y.Text));
            //ddl_Report.Items.Clear();
            //ddl_Report.DataSource = li;
            //ddl_Report.DataBind();




            //ddl_Report.Items.Add("Customer Retention");
            //ddl_Report.Items.Add("Statistics");
            //ddl_Report.Items.Add("Inbound");
            //ddl_Report.Items.Add("BL / Voucher-wise");
            //ddl_Report.Items.Add("Job Details");
            ////ddl_Report.Items.Add("Tradelane");
            //ddl_Report.Items.Add("Exemption List");
            //ddl_Report.Items.Add("Billing Report");
            //ddl_Report.Items.Add("CutOff BreakUp");



            // btn_cancel.Text = "Cancel";

            btn_cancel.ToolTip = "Cancel";
            btn_cancel1.Attributes["class"] = "btn ico-cancel";

        }

        protected void btn_cancel_Click(object sender, EventArgs e)
        {
            if (btn_cancel.ToolTip == "Back")
            {
                //this.Response.End();
                //if (Session["home"] != null)
                //{
                //if (Session["home"].ToString() == "MIS")
                //{
                Response.Redirect("../Home/CORHomeMIS.aspx");
                //}
                //}
                //else
                //{
                //    this.Response.End();
                //}

            }
            getdataforallbranch("");
            chartclear();
            ddl_graph1.SelectedIndex = 0;
            ddl_graph1.Enabled = false;
            ddl_graph2.Visible = false;

            if (GRD_Common.Visible == true)
            {
                GRD_Common.Visible = false;
                if (grd_Agent.Rows.Count > 0)
                {
                    grd_Agent.Visible = true;
                }
                else if (grd_Consignee.Rows.Count > 0)
                {
                    grd_Consignee.Visible = true;
                }
                else if (Grd_nomination.Rows.Count > 0)
                {
                    Grd_nomination.Visible = true;
                }
                else if (Grd_freeVsnomi.Rows.Count > 0)
                {
                    Grd_freeVsnomi.Visible = true;
                }
                else if (grd_JobwiseCosting.Rows.Count > 0)
                {
                    grd_JobwiseCosting.Visible = true;
                }
                else if (grd_jobloss.Rows.Count > 0)
                {
                    grd_jobloss.Visible = true;
                }
                else if (Grd_nomination.Rows.Count > 0)
                {
                    Grd_nomination.Visible = true;
                }
                else if (grd_POD.Rows.Count > 0)
                {
                    grd_POD.Visible = true;
                }
                else if (grd_POL.Rows.Count > 0)
                {
                    grd_POL.Visible = true;
                }
                else if (grd_operProfit.Rows.Count > 0)
                {
                    grd_operProfit.Visible = true;
                }
                else if (Grd_quotation.Rows.Count > 0)
                {
                    Grd_quotation.Visible = true;
                }
                else if (grd_salesperson.Rows.Count > 0)
                {
                    grd_salesperson.Visible = true;
                }
                else if (Grd_shiperconsignee.Rows.Count > 0)
                {
                    Grd_shiperconsignee.Visible = true;
                }
                else if (grd_Shipper.Rows.Count > 0)
                {
                    grd_Shipper.Visible = true;
                }
                else if (grd_Shipment.Rows.Count > 0)
                {
                    grd_Shipment.Visible = true;
                }


            }
            else if (GRD_Common.Visible == false && btn_cancel.ToolTip == "Cancel")
            {
                txt_agent.Text = "";
                ddl_Report.SelectedIndex = 0;
                ddl_branch.SelectedIndex = 0;
                //txt_from.Text = hf_date.Value;
                //txt_to.Text = hf_date.Value;
                string Str_CurrrentDate = DateTime.Now.ToString("dd/MM/yyyy");
                txt_from.Text = Str_CurrrentDate;
                txt_to.Text = Str_CurrrentDate;
                txt_agent.Enabled = true;
                ddl_branch.Enabled = true;
                GridClear();
                //btn_cancel.Text = "Back";

                btn_cancel.ToolTip = "Back"; ;
                btn_cancel1.Attributes["class"] = "btn ico-back";
            }
            else if (GRD_Common.Visible == false)
            {
                txt_agent.Text = "";
                ddl_Report.SelectedIndex = 0;
                ddl_branch.SelectedIndex = 0;
                //txt_from.Text = hf_date.Value;
                //txt_to.Text = hf_date.Value;
                string Str_CurrrentDate = DateTime.Now.ToString("dd/MM/yyyy");
                txt_from.Text = Str_CurrrentDate;
                txt_to.Text = Str_CurrrentDate;
                txt_agent.Enabled = true;
                ddl_branch.Enabled = true;
                GridClear();
            }


        }
        protected void GridClear()
        {
            //txt_agent.Text = "";
            grd_Agent.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_Agent.DataBind();
            grd_Agent.Visible = false;
            grd_Consignee.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_Consignee.DataBind();
            grd_Consignee.Visible = false;
            Grd_nomination.DataSource = Utility.Fn_GetEmptyDataTable();
            Grd_nomination.DataBind();
            Grd_nomination.Visible = false;
            grd_JobwiseCosting.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_JobwiseCosting.DataBind();
            grd_JobwiseCosting.Visible = false;
            Grd_LogDetails.DataSource = Utility.Fn_GetEmptyDataTable();
            Grd_LogDetails.DataBind();
            Grd_LogDetails.Visible = false;
            grd_jobloss.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_jobloss.DataBind();
            grd_jobloss.Visible = false;
            Grd_freeVsnomi.DataSource = Utility.Fn_GetEmptyDataTable();
            Grd_freeVsnomi.DataBind();
            Grd_freeVsnomi.Visible = false;
            grd_operProfit.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_operProfit.DataBind();
            grd_operProfit.Visible = false;
            grd_POD.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_POD.DataBind();
            grd_POD.Visible = false;
            grd_POL.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_POL.DataBind();
            grd_POL.Visible = false;
            Grd_quotation.DataSource = Utility.Fn_GetEmptyDataTable();
            Grd_quotation.DataBind();
            Grd_quotation.Visible = false;
            Grd_Retention.DataSource = Utility.Fn_GetEmptyDataTable();
            Grd_Retention.DataBind();
            Grd_Retention.Visible = false;
            grd_salesperson.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_salesperson.DataBind();
            grd_salesperson.Visible = false;
            Grd_sectorwise.DataSource = Utility.Fn_GetEmptyDataTable();
            Grd_sectorwise.DataBind();
            Grd_sectorwise.Visible = false;
            grd_Shipment.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_Shipment.DataBind();
            grd_Shipment.Visible = false;
            Grd_shiperconsignee.DataSource = Utility.Fn_GetEmptyDataTable();
            Grd_shiperconsignee.DataBind();
            Grd_shiperconsignee.Visible = false;
            grd_Shipper.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_Shipper.DataBind();
            grd_Shipper.Visible = false;
            grd_trendanalysis.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_trendanalysis.DataBind();
            grd_trendanalysis.Visible = false;
            grd_YearMIS.DataSource = Utility.Fn_GetEmptyDataTable();
            grd_YearMIS.DataBind();
            grd_YearMIS.Visible = false;
            GRD_Common.DataSource = Utility.Fn_GetEmptyDataTable();
            GRD_Common.DataBind();
            GRD_Common.Visible = false;
            signup.Visible = false;
            Gridliner.DataSource = Utility.Fn_GetEmptyDataTable();
            Gridliner.DataBind();
            Gridliner.Visible = false;

        }

        protected void Filter()
        {
            try
            {
                if (ddl_Report.SelectedItem.Text == "By Shipper")
                {
                    Session["Consignee"] = "C";
                    Session["Agent"] = "";
                    Session["sales"] = "";
                    Session["Port"] = "";
                    ddl_branch.Enabled = true;
                    txt_agent.Enabled = true;
                    txt_agent.Text = "";
                    GridClear();
                    ddl_graph1.Enabled = true;
                }
                else if (ddl_Report.SelectedItem.Text == "By Consignee")
                {
                    Session["Consignee"] = "C";
                    Session["Agent"] = "";
                    Session["sales"] = "";
                    Session["Port"] = "";
                    txt_agent.Enabled = true;
                    ddl_branch.Enabled = true;
                    txt_agent.Text = "";
                    GridClear();
                    ddl_graph1.Enabled = true;
                }
                else if (ddl_Report.SelectedItem.Text == "By Agent")
                {
                    Session["Consignee"] = "";
                    Session["Agent"] = "P";
                    Session["sales"] = "";
                    Session["Port"] = "";
                    txt_agent.Enabled = true;
                    ddl_branch.Enabled = true;
                    txt_agent.Text = "";
                    GridClear();
                    ddl_graph1.Enabled = true;
                }
                else if (ddl_Report.SelectedItem.Text == "By Sales Person")
                {
                    Session["Consignee"] = "";
                    Session["Agent"] = "";
                    Session["sales"] = "Name";
                    Session["Port"] = "";
                    ddl_branch.Enabled = true;
                    txt_agent.Enabled = true;
                    txt_agent.Text = "";
                    GridClear();
                }
                else if (ddl_Report.SelectedItem.Text == "By Customer")
                {
                    Session["Consignee"] = "C";
                    Session["Agent"] = "";
                    Session["sales"] = "";
                    Session["Port"] = "";
                    ddl_branch.Enabled = true;
                    txt_agent.Enabled = true;
                    txt_agent.Text = "";
                    GridClear();
                    ddl_graph1.Enabled = true;
                }
                else if (ddl_Report.SelectedItem.Text == "By POL")
                {
                    Session["Consignee"] = "";
                    Session["Agent"] = "";
                    Session["sales"] = "";
                    Session["Port"] = "Port";
                    txt_agent.Enabled = true;
                    ddl_branch.Enabled = true;
                    txt_agent.Text = "";
                    GridClear();
                    ddl_graph1.Enabled = true;
                }
                else if (ddl_Report.SelectedItem.Text == "By POD")
                {
                    Session["Consignee"] = "";
                    Session["Agent"] = "";
                    Session["sales"] = "";
                    Session["Port"] = "Port";
                    txt_agent.Enabled = true;
                    ddl_branch.Enabled = true;
                    txt_agent.Text = "";
                    GridClear();
                }
                else if (ddl_Report.SelectedItem.Text == "Log Details")
                {
                    ddl_branch.SelectedIndex = 1;
                    txt_agent.Text = "";
                    txt_agent.Enabled = false;
                    ddl_branch.Enabled = false;
                    GridClear();
                }
                else if (ddl_Report.SelectedItem.Text == "By Sector")
                {
                    ddl_branch.SelectedIndex = 1;
                    txt_agent.Text = "";
                    txt_agent.Enabled = false;
                    ddl_branch.Enabled = false;
                    GridClear();
                }
                else
                {
                    ddl_branch.Enabled = true;
                    txt_agent.Text = "";
                    txt_agent.Enabled = false;
                    GridClear();
                }
                // btn_cancel.Text = "Cancel";



                btn_cancel.ToolTip = "Cancel";
                btn_cancel1.Attributes["class"] = "btn ico-cancel";
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }


        protected void btn_get_Click(object sender, EventArgs e)
        {
            try
            {
                getdataforallbranch("");
                fn_GetOperatingProfit();
                //div5.Visible = false;
                if (ddl_Report.Text == "By Company/Branch/Product")
                {
                    btn_print.Visible = false;
                    Grdjob_BL.Visible = false;
                    string Str_Trantype = Session["StrTranType"].ToString();
                    int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                    DataTable obj_dt = new DataTable();
                    string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                    string str_todate = Utility.fn_ConvertDate(txt_to.Text);

                    if (Str_Trantype == "CO")
                    {
                        obj_dt = da_obj_CostTemp.GetDivisionProfit(int_divid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate));
                    }
                    else
                    {
                        obj_dt = da_obj_CostTemp.GetDivisionProfit(0, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate));
                    }
                    if (obj_dt.Rows.Count > 0)
                    {

                        grdvoucher.DataSource = obj_dt;
                        grdvoucher.DataBind();

                    }
                    da_obj_Log.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 635, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                }

                else if (ddl_Report.Text == "Shipment Count")
                {
                    btn_print.Visible = false;
                    int_Empid = Convert.ToInt32(Session["LoginEmpId"].ToString());
                    int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                    DataSet ds = new DataSet();
                    int int_year, int_month, int_day;
                    string[] Str_date = txt_from.Text.Split('/');
                    int_day = Convert.ToInt32(Str_date[0].ToString());
                    int_month = Convert.ToInt32(Str_date[1].ToString());
                    int_year = Convert.ToInt32(Str_date[2].ToString());
                    DateTime frmdate = new DateTime(int_year, int_month, int_day);

                    Str_date = null;
                    Str_date = txt_to.Text.Split('/');
                    int_day = Convert.ToInt32(Str_date[0].ToString());
                    int_month = Convert.ToInt32(Str_date[1].ToString());
                    int_year = Convert.ToInt32(Str_date[2].ToString());
                    DateTime todate = new DateTime(int_year, int_month, int_day);
                    if (frmdate >= todate)
                    {
                        ScriptManager.RegisterStartupScript(btnget, typeof(Button), "JobDetails", "alertify.alert('Fromdate Should be Less Than Todate');", true);
                        return;
                    }
                    ds = da_obj_Job.SelClosedJob(frmdate, todate, int_Empid, int_divid);
                    if (ds.Tables.Count > 3)
                    {
                        DataTable obj_dt_file = ds.Tables[0];
                        DataTable obj_dt_cbm = ds.Tables[1];
                        DataTable obj_dt_tonnage = ds.Tables[2];
                        DataTable obj_dt_teus = ds.Tables[3];
                        DataTable obj_dt = new DataTable();
                        obj_dt.Columns.Add("title", typeof(string));
                        obj_dt.Columns.Add("FE", typeof(int));
                        obj_dt.Columns.Add("FI", typeof(double));
                        obj_dt.Columns.Add("AE", typeof(double));
                        obj_dt.Columns.Add("AI", typeof(double));
                        obj_dt.Columns.Add("total", typeof(double));

                        DataRow Dr0 = obj_dt.NewRow();
                        DataRow Dr1 = obj_dt.NewRow();
                        DataRow Dr2 = obj_dt.NewRow();
                        DataRow Dr3 = obj_dt.NewRow();


                        obj_dt.Rows.Add(Dr0);
                        obj_dt.Rows.Add(Dr1);
                        obj_dt.Rows.Add(Dr2);
                        obj_dt.Rows.Add(Dr3);


                        if (obj_dt_file.Rows.Count > 0 && obj_dt_cbm.Rows.Count > 0 && obj_dt_tonnage.Rows.Count > 0 && obj_dt_teus.Rows.Count > 0)
                        {
                            Dr0[0] = obj_dt_file.Rows[0]["clm"];
                            Dr0[1] = obj_dt_file.Rows[0]["FE"] == DBNull.Value ? 0 : Convert.ToInt32(obj_dt_file.Rows[0]["FE"]);
                            Dr0[2] = obj_dt_file.Rows[0]["FI"] == DBNull.Value ? 0 : obj_dt_file.Rows[0]["FI"];
                            Dr0[3] = obj_dt_file.Rows[0]["AE"] == DBNull.Value ? 0 : obj_dt_file.Rows[0]["AE"];
                            Dr0[4] = obj_dt_file.Rows[0]["AI"] == DBNull.Value ? 0 : obj_dt_file.Rows[0]["AI"];
                            Dr0[5] = Convert.ToDouble(Dr0[1].ToString()) + Convert.ToDouble(Dr0[2].ToString()) + Convert.ToDouble(Dr0[3].ToString()) + Convert.ToDouble(Dr0[4].ToString());

                            Dr1[0] = obj_dt_cbm.Rows[0]["clm"];
                            Dr1[1] = obj_dt_cbm.Rows[0]["FE"] == DBNull.Value ? 0 : Convert.ToInt32(obj_dt_cbm.Rows[0]["FE"]);
                            Dr1[2] = obj_dt_cbm.Rows[0]["FI"] == DBNull.Value ? 0 : obj_dt_cbm.Rows[0]["FI"];
                            Dr1[3] = obj_dt_cbm.Rows[0]["AE"] == DBNull.Value ? 0 : obj_dt_cbm.Rows[0]["AE"];
                            Dr1[4] = obj_dt_cbm.Rows[0]["AI"] == DBNull.Value ? 0 : obj_dt_cbm.Rows[0]["AI"];
                            Dr1[5] = Convert.ToDouble(Dr1[1].ToString()) + Convert.ToDouble(Dr1[2].ToString()) + Convert.ToDouble(Dr1[3].ToString()) + Convert.ToDouble(Dr1[4].ToString());

                            Dr2[0] = obj_dt_tonnage.Rows[0]["clm"];
                            Dr2[1] = obj_dt_tonnage.Rows[0]["FE"] == DBNull.Value ? 0 : Convert.ToInt32(obj_dt_tonnage.Rows[0]["FE"]);
                            Dr2[2] = obj_dt_tonnage.Rows[0]["FI"] == DBNull.Value ? 0 : obj_dt_tonnage.Rows[0]["FI"];
                            Dr2[3] = obj_dt_tonnage.Rows[0]["AE"] == DBNull.Value ? 0 : obj_dt_tonnage.Rows[0]["AE"];
                            Dr2[4] = obj_dt_tonnage.Rows[0]["AI"] == DBNull.Value ? 0 : obj_dt_tonnage.Rows[0]["AI"];
                            Dr2[5] = Convert.ToDouble(Dr2[1].ToString()) + Convert.ToDouble(Dr2[2].ToString()) + Convert.ToDouble(Dr2[3].ToString()) + Convert.ToDouble(Dr2[4].ToString());

                            Dr3[0] = obj_dt_teus.Rows[0]["clm"];
                            Dr3[1] = obj_dt_teus.Rows[0]["FE"] == DBNull.Value ? 0 : Convert.ToInt32(obj_dt_teus.Rows[0]["FE"]);
                            Dr3[2] = obj_dt_teus.Rows[0]["FI"] == DBNull.Value ? 0 : obj_dt_teus.Rows[0]["FI"];
                            Dr3[3] = obj_dt_teus.Rows[0]["AE"] == DBNull.Value ? 0 : obj_dt_teus.Rows[0]["AE"];
                            Dr3[4] = obj_dt_teus.Rows[0]["AI"] == DBNull.Value ? 0 : obj_dt_teus.Rows[0]["AI"];
                            Dr3[5] = Convert.ToDouble(Dr3[1].ToString()) + Convert.ToDouble(Dr3[2].ToString()) + Convert.ToDouble(Dr3[3].ToString()) + Convert.ToDouble(Dr3[4].ToString());

                            Grdjobdetails.DataSource = obj_dt;
                            Grdjobdetails.DataBind();
                            Grdjobdetails.Rows[0].Cells[1].Text = string.Format("{0:0}", Grdjobdetails.Rows[0].Cells[1].Text);
                            Grdjobdetails.Rows[0].Cells[2].Text = string.Format("{0:0}", Grdjobdetails.Rows[0].Cells[2].Text);
                            Grdjobdetails.Rows[0].Cells[3].Text = string.Format("{0:0}", Grdjobdetails.Rows[0].Cells[3].Text);
                            Grdjobdetails.Rows[0].Cells[4].Text = string.Format("{0:0}", Grdjobdetails.Rows[0].Cells[4].Text);
                        }
                        da_obj_Log.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 790, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");

                    }
                }

                else if (ddl_Report.Text == "By Exemption")
                {
                    btn_print.Visible = false;
                    intdiv = Convert.ToInt32(Session["LoginDivisionId"].ToString());

                    for (i = 0; i <= grdExcmption.Rows.Count - 1; i++)
                    {
                        grdExcmption.DataSource = Utility.Fn_GetEmptyDataTable();
                    }

                    intBranchId = objHr.GetBranchId(Convert.ToInt32(Session["LoginDivisionId"].ToString()), ddl_branch.Text);

                    dt = objiExcm.GridFillJobdtls(Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), intBranchId, intdiv);

                    if (dt.Rows.Count > 0)
                    {
                        grdExcmption.DataSource = dt;

                        grdExcmption.DataBind();
                        logDetails.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"]), 1309, 3, Convert.ToInt32(Session["LoginBranchid"]), " From: " + txt_from.Text + "/To: " + txt_to.Text + "/Get");
                    }

                    else
                    {
                        ScriptManager.RegisterStartupScript(btn_get, typeof(Button), "logix", "alertify.alert('No Data Exits');", true);
                    }
                }

                else if (ddl_Report.Text == "Income Statement")
                {
                    btn_print.Visible = false;
                    div_BillingReport.Visible = true;
                    bind();
                }

                else if (ddl_Report.Text == "CutOff BreakUp")
                {
                    btn_print.Visible = false;
                    int LoginBranchid = Convert.ToInt16(Session["LoginBranchid"]);
                    int LoginDivisionId = Convert.ToInt16(Session["LoginDivisionId"]);
                    int LoginEmpId = Convert.ToInt16(Session["LoginEmpId"]);
                    DateTime fdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text) + " " + DateTime.Now.ToLongTimeString()); //Convert.ToDateTime(Utility.fn_ConvertDate(dtFrom.Text));
                    // fdate = Convert.ToDateTime(fdate + " " + );
                    DateTime FromDate = fdate;
                    DataTable dt = new DataTable();
                    DataTable dta = new DataTable();
                    DataTable dtb = new DataTable();
                   // DataAccess.Accounts.Reversal cutobj = new DataAccess.Accounts.Reversal();
                    string sp;
                    dt = cutobj.GetCutoffBreakUpDetails(LoginDivisionId, "A", fdate, LoginEmpId);

                    if (dt.Rows.Count > 0)
                    {
                        //GridView1.Visible = true;
                        //GridView2.Visible = false;
                        //Panel1.Visible = true;
                        //Panel1.Visible = false;
                        GridView3.Visible = true;
                        Panel1.Visible = true;

                        GridView3.DataSource = dt;
                        GridView3.DataBind();
                    }

                    dta = cutobj.GetCutoffBreakUpDetails(LoginDivisionId, "B", fdate, LoginEmpId);



                    if (dta.Rows.Count > 0)
                    {
                        //GridView2.Visible = true;
                        //GridView1.Visible = false;
                        //Panel1.Visible = false;
                        //Panel1.Visible = true;
                        GridView4.Visible = true;

                        Panel2.Visible = true;
                        GridView4.DataSource = dta;
                        GridView4.DataBind();
                    }
                    obj_da_Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 1334, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                }

                else
                {
                    if (ddl_branch.SelectedIndex > 0)
                    {

                        div_bar.Visible = false;
                        div_line.Visible = false;
                        penBlRelase.Visible = false;
                        GridView1.Visible = false;
                        outstanding.Visible = false;
                        GridView2.Visible = false;
                        lbl_cut.Visible = false;
                        div2_Bookchart.Visible = false;
                        excportexc.Visible = false;

                        GrdAI.Visible = false;
                        PanelAI.Visible = false;

                        PanelOE.Visible = false;
                        GrdOE.Visible = false;
                        PanelOI.Visible = false;
                        GrdOI.Visible = false;


                        div_mis.Visible = true;
                        div_Statistics.Visible = false;
                        div_retention.Visible = false;
                        div_inbound.Visible = false;
                        Label3.Text = ddl_Report.SelectedItem.Text;


                        GridClear();
                        Get_grid();
                    }
                    else if (ddl_Report.SelectedItem.Text != "Log Details" && ddl_Report.SelectedItem.Text != "By Sector")
                    {
                        ScriptManager.RegisterStartupScript(this.Page, typeof(Button), "StuffingDetails", "alertify.alert('Select Branch');", true);

                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Get_grid()
        {
            if (ddl_Report.SelectedItem.Text == "By Agent")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = true;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                Grid_Agent();
            }
            else if (ddl_Report.SelectedItem.Text == "By Consignee")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = true;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                fn_ConsigneeWise();
            }
            else if (ddl_Report.SelectedItem.Text == "Controlled By Us")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                grdfreehandwiseship("F");
            }
            else if (ddl_Report.SelectedItem.Text == "Jobwise  P&L")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                grdjobwisecosting();
            }
            else if (ddl_Report.SelectedItem.Text == "Log Details")
            {
                btn_print.Visible = false;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                LoadGrd_LogDetails();
            }
            else if (ddl_Report.SelectedItem.Text == "Loss Jobs")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                grd_lossjob();
            }
            else if (ddl_Report.SelectedItem.Text == "Controlled By Agent")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = false;
                bnt_details.Visible = true;
                bnt_detailsex2exce.Visible = true;
                grdfreehandwiseship("N");
            }
            else if (ddl_Report.SelectedItem.Text == "Agent Controlled Vs Our Controlled")
            {
                btn_print.Visible = false;
                ddl_graph1.Enabled = true;
                bnt_details.Visible = true;
                bnt_detailsex2exce.Visible = false;
                grd_FreehandVsNomination();
            }
            else if (ddl_Report.SelectedItem.Text == "Operating Profit")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = true;
                bnt_details.Visible = true;
                bnt_detailsex2exce.Visible = true;
                grdOperatingProfitACGrd();
            }
            else if (ddl_Report.SelectedItem.Text == "By POD")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                grdpodfromshipment();
            }
            else if (ddl_Report.SelectedItem.Text == "By POL")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = true;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                grdpolfromshipment();
            }
            else if (ddl_Report.SelectedItem.Text == "By Customer")
            {
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = false;
                bnt_details.Visible = false;
                btn_print.Visible = false;
                grdQuotation();
            }
            else if (ddl_Report.SelectedItem.Text == "Retention for N / F")
            {
                btn_print.Visible = false;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                fn_Retention();
            }
            else if (ddl_Report.SelectedItem.Text == "By Sales Person")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                grd_sales();
            }
            else if (ddl_Report.SelectedItem.Text == "By Sector")
            {
                btn_print.Visible = false;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = false;
                bnt_details.Visible = true;
                grd_Sectorwise();
            }
            else if (ddl_Report.SelectedItem.Text == "By BL /AWB")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                GrdNewShipmentDetails();
            }
            else if (ddl_Report.SelectedItem.Text == "By Shipper")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = true;
                bnt_details.Visible = true;
                grd_shipperwise();
            }
            else if (ddl_Report.SelectedItem.Text == "Top 50 Customer")
            {
                btn_print.Visible = false;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                Top50shiporconsignee();
            }
            else if (ddl_Report.SelectedItem.Text == "Trend Analysis - Customer")
            {
                btn_print.Visible = false;
                ddl_graph1.Enabled = false;
                bnt_details.Visible = true;
                bnt_detailsex2exce.Visible = true;
                tdancustomer();
            }
            else if (ddl_Report.SelectedItem.Text == "Trend Analysis - Product")
            {
                btn_print.Visible = false;
                ddl_graph1.Enabled = false;
                bnt_details.Visible = true;
                bnt_detailsex2exce.Visible = true;
                //tdanproduct();
                tdanproductnew1();
            }
            else if (ddl_Report.SelectedItem.Text == "Trend Analysis - Sales Person")
            {
                btn_print.Visible = false;
                ddl_graph1.Enabled = false;
                bnt_detailsex2exce.Visible = true;
                bnt_details.Visible = true;
                tdansales();
            }
            else if (ddl_Report.SelectedItem.Text == "Year M I S")
            {
                btn_print.Visible = true;
                ddl_graph1.Enabled = false;
                if (bid == 0)
                {
                    bnt_detailsex2exce.Visible = false;
                }
                else
                {
                    bnt_detailsex2exce.Visible = true;
                }
                bnt_details.Visible = true;
                get_Years();
            }
            else if (ddl_Report.SelectedItem.Text == "By Carrier")
            {
                btn_print.Visible = false;
                signup.Visible = false;
                ddl_graph1.Enabled = false;
                Gridliner.Visible = true;
                bnt_details.Visible = false;
                bnt_detailsex2exce.Visible = false;
                fn_linerwise();

            }
            Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");

        }

        private void Retention_Export()
        {
            int int_branchid, int_divisionid, i, j;
            string StrTrantype, Str_Export;
            double Tot_1, Tot_2, Tot_3, Tot_4, Tot_5, Tot_6, Tot_7, Tot_Retention, Tot_Tues, Tot_CBM;
            int_branchid = int.Parse(Session["LoginBranchid"].ToString());
            int_divisionid = int.Parse(Session["LoginDivisionId"].ToString());
            StrTrantype = Session["StrTranType"].ToString();
            DataSet obj_ds = new DataSet();
            DataTable obj_dt = new DataTable();
            DataTable obj_dttemp = new DataTable();
            string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
            string str_todate = Utility.fn_ConvertDate(txt_to.Text);
            DateTime frm_date, to_date;
            frm_date = Convert.ToDateTime(str_fromdate);
            to_date = Convert.ToDateTime(str_todate);
          //  DataAccess.CostingTemp da_obj_Costing = new DataAccess.CostingTemp();
            string Trantype = "";
            Str_Export = "";
            Filename = "Retention For N/F for the period of  " + txt_from.Text + " to " + txt_to.Text;
            Str_Export = Str_Export + "<html  xmlns:v=\"urn:schemas-microsoft-com:vml\"xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\"xmlns=\"http://www.w3.org/TR/REC-html40\">";
            Str_Export = Str_Export + "<table BORDER=1 BORDERCOLOR=darkblue><tr><td  align=center colspan=8><B>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</B></td></tr>";
            Str_Export = Str_Export + "<tr><td  align=center colspan=8><B>" + Filename + "</B></td></tr>";
            for (j = 0; j <= 3; j++)
            {
                if (j == 0)
                {
                    StrTrantype = "FE";
                }
                else if (j == 1)
                {
                    StrTrantype = "FI";
                }
                else if (j == 2)
                {
                    StrTrantype = "AE";
                }
                else if (j == 3)
                {
                    StrTrantype = "AI";
                }



                if (StrTrantype == "FE")
                {
                    Trantype = "Ocean Exports";
                }
                else if (StrTrantype == "FI")
                {
                    Trantype = "Ocean Imports";
                }
                else if (StrTrantype == "AI")
                {
                    Trantype = "Air Imports";
                }
                else if (StrTrantype == "AE")
                {
                    Trantype = "Air Exports";
                }

                Tot_Retention = 0;
                Tot_Tues = 0;
                Tot_CBM = 0;

                if (StrTrantype == "FE" || StrTrantype == "FI")
                {
                    Str_Export = Str_Export + "<tr><td  align=center colspan=8 bgcolor=blue><B><font>" + Trantype + "</font></B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center colspan=5><B>" + Trantype + " - Consol</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td  align=center colspan=2><B>Controlled By Us</B></td><td  align=center colspan=2><B>Agent Controlled</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><B>Agent</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td><td  align=center ><B>Total M3</B></td><td  align=center ><B>Total Retention</B></td><td  align=center ><B>Tues</B></td></tr>";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "Consol", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {
                        Tot_1 = 0;
                        Tot_2 = 0;
                        Tot_3 = 0;
                        Tot_4 = 0;
                        Tot_5 = 0;
                        Tot_6 = 0;
                        Tot_7 = 0;
                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            double total_1 = double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            double total_2 = double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_1 = Tot_1 + double.Parse(obj_dttemp.Rows[i][1].ToString());
                            Tot_2 = Tot_2 + double.Parse(obj_dttemp.Rows[i][2].ToString());
                            Tot_3 = Tot_3 + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            Tot_4 = Tot_4 + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_5 = Tot_5 + total_1;
                            Tot_6 = Tot_6 + total_2;
                            Tot_7 = Tot_7 + double.Parse(obj_dttemp.Rows[i][5].ToString());

                            Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2>" + obj_dttemp.Rows[i][0].ToString() + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][1]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][2]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.000}", obj_dttemp.Rows[i][3]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][4]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", total_1) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", total_2) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][5]) + "</td></tr>";

                        }
                        if (obj_dttemp.Rows.Count > 0)
                        {
                            Tot_Retention = Tot_Retention + Tot_6;
                            Tot_Tues = Tot_Tues + Tot_7;
                            Tot_CBM = Tot_CBM + Tot_5;
                            Str_Export = Str_Export + "<tr><td align=right><B>Total</B></td><td  align=center ><B>" + string.Format("{0:0.000}", Tot_1) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_2) + "</B></td><td  align=center ><B>" + string.Format("{0:0.000}", Tot_3) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_4) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_5) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_6) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_7) + "</B></td></tr>";
                        }

                    }
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";


                    Str_Export = Str_Export + "<tr><td  align=center colspan=5><B>" + Trantype + " - LCL</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td  align=center colspan=2><B>Controlled By Us</B></td><td  align=center colspan=2><B>Agent Controlled</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><B>Agent</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td><td  align=center ><B>Total M3</B></td><td  align=center ><B>Total Retention</B></td></tr>";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "LCL", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {
                        Tot_1 = 0;
                        Tot_2 = 0;
                        Tot_3 = 0;
                        Tot_4 = 0;
                        Tot_5 = 0;
                        Tot_6 = 0;

                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            double total_1 = double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            double total_2 = double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_1 = Tot_1 + double.Parse(obj_dttemp.Rows[i][1].ToString());
                            Tot_2 = Tot_2 + double.Parse(obj_dttemp.Rows[i][2].ToString());
                            Tot_3 = Tot_3 + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            Tot_4 = Tot_4 + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_5 = Tot_5 + total_1;
                            Tot_6 = Tot_6 + total_2;


                            Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2>" + obj_dttemp.Rows[i][0].ToString() + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][1]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][2]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.000}", obj_dttemp.Rows[i][3]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][4]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", total_1) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", total_2) + "</td></tr>";

                        }
                        if (obj_dttemp.Rows.Count > 0)
                        {
                            Tot_Retention = Tot_Retention + Tot_6;
                            Tot_CBM = Tot_CBM + Tot_5;
                            Str_Export = Str_Export + "<tr><td align=right><B>Total</B></td><td  align=center ><B>" + string.Format("{0:0.000}", Tot_1) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_2) + "</B></td><td  align=center ><B>" + string.Format("{0:0.000}", Tot_3) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_4) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_5) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_6) + "</B></td></tr>";
                        }
                        Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                        Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                        Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";

                    }

                    Str_Export = Str_Export + "<tr><td  align=center colspan=5><B>" + Trantype + " - FCL</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td  align=center colspan=2><B>Controlled By Us</B></td><td  align=center colspan=2><B>Agent Controlled</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><B>Agent</B></td><td  align=center ><B>Tues</B></td><td  align=center ><B>Retention</B></td><td  align=center ><B>Tues</B></td><td  align=center ><B>Retention</B></td><td  align=center ><B>Total Tues</B></td><td  align=center ><B>Total Retention</B></td></tr>";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "FCL", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {
                        Tot_1 = 0;
                        Tot_2 = 0;
                        Tot_3 = 0;
                        Tot_4 = 0;
                        Tot_5 = 0;
                        Tot_6 = 0;

                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            double total_1 = double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            double total_2 = double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_1 = Tot_1 + double.Parse(obj_dttemp.Rows[i][1].ToString());
                            Tot_2 = Tot_2 + double.Parse(obj_dttemp.Rows[i][2].ToString());
                            Tot_3 = Tot_3 + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            Tot_4 = Tot_4 + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_5 = Tot_5 + total_1;
                            Tot_6 = Tot_6 + total_2;


                            Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2>" + obj_dttemp.Rows[i][0].ToString() + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][1]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][2]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.000}", obj_dttemp.Rows[i][3]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][4]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", total_1) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", total_2) + "</td></tr>";

                        }
                        if (obj_dttemp.Rows.Count > 0)
                        {
                            Tot_Retention = Tot_Retention + Tot_6;
                            Tot_Tues = Tot_Tues + Tot_5;
                            Str_Export = Str_Export + "<tr><td align=right><B>Total</B></td><td  align=center ><B>" + string.Format("{0:0.000}", Tot_1) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_2) + "</B></td><td  align=center ><B>" + string.Format("{0:0.000}", Tot_3) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_4) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_5) + "</B></td><td  align=center ><B>" + string.Format("{0:0.00}", Tot_6) + "</B></td></tr>";
                        }
                        Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                        Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                        Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";

                    }

                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><FONT FACE=tahoma size=2 color=darkblue><B>SUMMARY</B></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><FONT FACE=tahoma size=2 color=darkblue><B>Rentention ( Consol + LCL + FCL )</B></td><td  align=center ><FONT FACE=tahoma size=2 color=darkblue><B>" + Tot_Retention + "</B></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><FONT FACE=tahoma size=2 color=darkblue><B>Tues ( Consol + FCL )</B></td><td  align=center ><FONT FACE=tahoma size=2 color=darkblue><B>" + Tot_Tues + "</B></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><FONT FACE=tahoma size=2 color=darkblue><B>CBM ( Consol + LCL )</B></td><td  align=center ><FONT FACE=tahoma size=2 color=darkblue><B>" + Tot_CBM + "</B></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";

                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";

                    Str_Export = Str_Export + "<tr><td  align=center colspan=5><B>" + Trantype + " - Consol</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><B>Agent</B></td><td  align=center ><B>Tues</B></td><td  align=center ><B>Retention</B></td></tr>";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "Consol", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[1];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {

                            Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2>" + obj_dttemp.Rows[i][0].ToString() + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][1]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][2]) + "</td></tr>";

                        }

                    }
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";

                    Str_Export = Str_Export + "<tr><td  align=center colspan=5><B>" + Trantype + " - LCL</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><B>Agent</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td></tr>";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "LCL", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[1];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {

                            Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2>" + obj_dttemp.Rows[i][0].ToString() + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][1]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][2]) + "</td></tr>";

                        }

                    }
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";

                    Str_Export = Str_Export + "<tr><td  align=center colspan=5><B>" + Trantype + " - FCL</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><B>Agent</B></td><td  align=center ><B>Tues</B></td><td  align=center ><B>Retention</B></td></tr>";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "FCL", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[1];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {

                            Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2>" + obj_dttemp.Rows[i][0].ToString() + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][1]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][2]) + "</td></tr>";

                        }

                    }
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";

                }
                else if (StrTrantype == "AE" || StrTrantype == "AI")
                {
                    Str_Export = Str_Export + "<tr><td  align=center colspan=8 bgcolor=blue><B><font>" + Trantype + "</font></B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center colspan=5><B>" + Trantype + " - Consol</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td  align=center colspan=2><B>Controlled By Us</B></td><td  align=center colspan=2><B>Agent Controlled</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><B>Agent</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td></tr>";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, StrTrantype, int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {

                            Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2>" + obj_dttemp.Rows[i][0].ToString() + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][1]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][2]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][3]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][4]) + "</td></tr>";

                        }

                    }
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";

                    Str_Export = Str_Export + "<tr><td  align=center colspan=5><B>" + Trantype + " - Consol</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td  align=center colspan=2><B>Controlled By Us</B></td><td  align=center colspan=2><B>Agent Controlled</B></td></tr>";
                    Str_Export = Str_Export + "<tr><td  align=center ><B>Agent</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td><td  align=center ><B>M3</B></td><td  align=center ><B>Retention</B></td></tr>";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, StrTrantype, int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {

                            Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2>" + obj_dttemp.Rows[i][0].ToString() + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][1]) + "</td><td><FONT FACE=tahoma size=2>" + string.Format("{0:0.00}", obj_dttemp.Rows[i][2]) + "</td></tr>";

                        }

                    }
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                    Str_Export = Str_Export + "<tr><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td><td><FONT FACE=tahoma size=2></td></tr>";
                }


            }
            Str_Export = Str_Export + "</table>";
            //Response.Clear();
            //HttpContext.Current.Response.Clear();
            //HttpContext.Current.Response.AddHeader("content-disposition", string.Format("attachment; filename={0}", strFileName));
            //HttpContext.Current.Response.ContentType = "application/ms-excel";

            // HttpContext.Current.Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
            //HttpContext.Current.Response.AddHeader("Content-Length", Str_Export.Length.ToString());
            HttpContext.Current.Response.Buffer = true;
            HttpContext.Current.Response.Charset = "UTF-8";
            HttpContext.Current.Response.ContentType = "application/vnd.ms-excel";
            HttpContext.Current.Response.Write(Str_Export);
            HttpContext.Current.Response.End();
        }

        private void fn_Retention()
        {
            int int_branchid, int_divisionid, i, j;
            string StrTrantype;
            double Tot_1, Tot_2, Tot_3, Tot_4, Tot_5, Tot_6, Tot_7, Tot_Retention, Tot_Tues, Tot_CBM;
            int_branchid = int.Parse(Session["LoginBranchid"].ToString());
            int_divisionid = int.Parse(Session["LoginDivisionId"].ToString());
            StrTrantype = Session["StrTranType"].ToString();
            DataSet obj_ds = new DataSet();
            DataTable obj_dt = new DataTable();
            DataTable obj_dttemp = new DataTable();
            string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
            string str_todate = Utility.fn_ConvertDate(txt_to.Text);
            DateTime frm_date, to_date;
            frm_date = Convert.ToDateTime(str_fromdate);
            to_date = Convert.ToDateTime(str_todate);
           // DataAccess.CostingTemp da_obj_Costing = new DataAccess.CostingTemp();
            DataRow dr = obj_dt.NewRow();
            obj_dt.Columns.Add("column1");
            obj_dt.Columns.Add("column2");
            obj_dt.Columns.Add("column3");
            obj_dt.Columns.Add("column4");
            obj_dt.Columns.Add("column5");
            obj_dt.Columns.Add("column6");
            obj_dt.Columns.Add("column7");
            obj_dt.Columns.Add("column8");

            obj_dt.Rows.Add(dr);
            for (j = 0; j <= 3; j++)
            {
                if (j == 0)
                {
                    StrTrantype = "FE";
                }
                else if (j == 1)
                {
                    StrTrantype = "FI";
                }
                else if (j == 2)
                {
                    StrTrantype = "AE";
                }
                else if (j == 3)
                {
                    StrTrantype = "AI";
                }

                string Trantype = "";
                if (StrTrantype == "FE")
                {
                    Trantype = "Ocean Exports";
                }
                else if (StrTrantype == "FI")
                {
                    Trantype = "Ocean Imports";
                }
                else if (StrTrantype == "AI")
                {
                    Trantype = "Air Imports";
                }
                else if (StrTrantype == "AE")
                {
                    Trantype = "Air Exports";
                }

                if (StrTrantype == "FE" || StrTrantype == "FI")
                {

                    Tot_Retention = 0;
                    Tot_Tues = 0;
                    Tot_CBM = 0;
                    //Region -Consol

                    //obj_dt.Rows.Add(dr);

                    dr[0] = Trantype + "- Consol";
                    dr = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr);
                    dr[1] = "Controlled";
                    dr[2] = "by US";
                    dr[3] = "Agent";
                    dr[4] = "Controlled";

                    dr = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr);
                    dr[0] = "Agent";
                    dr[1] = "M3";
                    dr[2] = "Revenue";
                    dr[3] = "M3";
                    dr[4] = "Revenue";
                    dr[5] = "Total M3";
                    dr[6] = "Total Revenue";
                    dr[7] = "Teus";
                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "Consol", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {
                        Tot_1 = 0;
                        Tot_2 = 0;
                        Tot_3 = 0;
                        Tot_4 = 0;
                        Tot_5 = 0;
                        Tot_6 = 0;
                        Tot_7 = 0;
                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            dr = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr);
                            dr[0] = obj_dttemp.Rows[i][0].ToString();
                            dr[1] = obj_dttemp.Rows[i][1].ToString();
                            Tot_1 = Tot_1 + double.Parse(obj_dttemp.Rows[i][1].ToString());
                            dr[2] = obj_dttemp.Rows[i][2].ToString();
                            Tot_2 = Tot_2 + double.Parse(obj_dttemp.Rows[i][2].ToString());
                            dr[3] = obj_dttemp.Rows[i][3].ToString();
                            Tot_3 = Tot_3 + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            dr[4] = obj_dttemp.Rows[i][4].ToString();
                            Tot_4 = Tot_4 + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            dr[5] = double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            Tot_5 = Tot_5 + (double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString()));
                            dr[6] = double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_6 = Tot_6 + (double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString()));
                            dr[7] = obj_dttemp.Rows[i][5].ToString();
                            Tot_7 = Tot_7 + double.Parse(obj_dttemp.Rows[i][5].ToString());
                        }
                        if (obj_dttemp.Rows.Count > 0)
                        {
                            dr = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr);
                            dr[0] = "Total";
                            dr[1] = Tot_1;
                            dr[2] = Tot_2;
                            dr[3] = Tot_3;
                            dr[4] = Tot_4;
                            dr[5] = Tot_5;
                            dr[6] = Tot_6;
                            dr[7] = Tot_7;
                            Tot_Retention = Tot_Retention + Tot_6;
                            Tot_Tues = Tot_Tues + Tot_7;
                            Tot_CBM = Tot_CBM + Tot_5;
                        }
                    }
                    dr = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr);
                    //End Region -Consol

                    //Region- LCL
                    DataRow dr1 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr1);
                    dr1[0] = Trantype + "- LCL";
                    dr1 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr1);
                    dr1[1] = "Controlled";
                    dr1[2] = "by US";
                    dr1[3] = "Agent";
                    dr1[4] = "Controlled";

                    dr1 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr1);
                    dr1[0] = "Agent";
                    dr1[1] = "M3";
                    dr1[2] = "Revenue";
                    dr1[3] = "M3";
                    dr1[4] = "Revenue";
                    dr1[5] = "Total M3";
                    dr1[6] = "Total Revenue";

                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "LCL", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {
                        Tot_1 = 0;
                        Tot_2 = 0;
                        Tot_3 = 0;
                        Tot_4 = 0;
                        Tot_5 = 0;
                        Tot_6 = 0;
                        Tot_7 = 0;
                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            dr1 = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr1);
                            dr1[0] = obj_dttemp.Rows[i][0].ToString();
                            dr1[1] = obj_dttemp.Rows[i][1].ToString();
                            Tot_1 = Tot_1 + double.Parse(obj_dttemp.Rows[i][1].ToString());
                            dr1[2] = obj_dttemp.Rows[i][2].ToString();
                            Tot_2 = Tot_2 + double.Parse(obj_dttemp.Rows[i][2].ToString());
                            dr1[3] = obj_dttemp.Rows[i][3].ToString();
                            Tot_3 = Tot_3 + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            dr1[4] = obj_dttemp.Rows[i][4].ToString();
                            Tot_4 = Tot_4 + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            dr1[5] = double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            Tot_5 = Tot_5 + (double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString()));
                            dr1[6] = double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_6 = Tot_6 + (double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString()));

                        }
                        if (obj_dttemp.Rows.Count > 0)
                        {
                            dr1 = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr1);
                            dr1[0] = "Total";
                            dr1[1] = Tot_1;
                            dr1[2] = Tot_2;
                            dr1[3] = Tot_3;
                            dr1[4] = Tot_4;
                            dr1[5] = Tot_5;
                            dr1[6] = Tot_6;
                            Tot_Retention = Tot_Retention + Tot_6;
                            Tot_CBM = Tot_CBM + Tot_5;
                        }
                    }
                    dr1 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr1);
                    //End Region - LCL

                    //Region - FCL
                    DataRow dr2 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr2);
                    dr2[0] = Trantype + "- FCL";
                    dr2 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr2);
                    dr2[1] = "Controlled";
                    dr2[2] = "by US";
                    dr2[3] = "Agent";
                    dr2[4] = "Controlled";

                    dr2 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr2);
                    dr2[0] = "Agent";
                    dr2[1] = "M3";
                    dr2[2] = "Revenue";
                    dr2[3] = "M3";
                    dr2[4] = "Revenue";
                    dr2[5] = "Total M3";
                    dr2[6] = "Total Revenue";

                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "FCL", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {
                        Tot_1 = 0;
                        Tot_2 = 0;
                        Tot_3 = 0;
                        Tot_4 = 0;
                        Tot_5 = 0;
                        Tot_6 = 0;
                        Tot_7 = 0;
                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            dr2 = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr2);
                            dr2[0] = obj_dttemp.Rows[i][0].ToString();
                            dr2[1] = obj_dttemp.Rows[i][1].ToString();
                            Tot_1 = Tot_1 + double.Parse(obj_dttemp.Rows[i][1].ToString());
                            dr2[2] = obj_dttemp.Rows[i][2].ToString();
                            Tot_2 = Tot_2 + double.Parse(obj_dttemp.Rows[i][2].ToString());
                            dr2[3] = obj_dttemp.Rows[i][3].ToString();
                            Tot_3 = Tot_3 + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            dr2[4] = obj_dttemp.Rows[i][4].ToString();
                            Tot_4 = Tot_4 + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            dr2[5] = double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString());
                            Tot_5 = Tot_5 + (double.Parse(obj_dttemp.Rows[i][1].ToString()) + double.Parse(obj_dttemp.Rows[i][3].ToString()));
                            dr2[6] = double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString());
                            Tot_6 = Tot_6 + (double.Parse(obj_dttemp.Rows[i][2].ToString()) + double.Parse(obj_dttemp.Rows[i][4].ToString()));

                        }
                        if (obj_dttemp.Rows.Count > 0)
                        {
                            dr2 = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr2);
                            dr2[0] = "Total";
                            dr2[1] = Tot_1;
                            dr2[2] = Tot_2;
                            dr2[3] = Tot_3;
                            dr2[4] = Tot_4;
                            dr2[5] = Tot_5;
                            dr2[6] = Tot_6;

                            Tot_Retention = Tot_Retention + Tot_6;
                            Tot_Tues = Tot_Tues + Tot_5;
                        }
                    }
                    dr2 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr2);
                    //End Region - FCL

                    //Region -  Summary
                    DataRow dr3 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr3);
                    dr3[0] = "Summary";
                    dr3 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr3);
                    dr3[0] = "Revenue (Consol + LCL + FCL)";
                    dr3[1] = Tot_Retention;
                    dr3 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr3);
                    dr3[0] = "Teus (Consol + FCL)";
                    dr3[1] = Tot_Tues;
                    dr3 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr3);
                    dr3[0] = "CBM (Consol + LCL)";
                    dr3[1] = Tot_CBM;

                    dr3 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr3);
                    //End Region - Summary

                    //Region -Consol
                    DataRow dr4 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr4);
                    dr4[0] = Trantype + "- Consol";
                    dr4 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr4);
                    dr4[0] = "Agent";
                    dr4[1] = "Teus";
                    dr4[2] = "Revenue";



                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "Consol", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[1];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            dr4 = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr4);
                            dr4[0] = obj_dttemp.Rows[i][0].ToString();
                            dr4[1] = obj_dttemp.Rows[i][1].ToString();
                            dr4[2] = obj_dttemp.Rows[i][2].ToString();

                        }

                    }
                    dr4 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr4);
                    //End Region -Consol

                    //Region -LCL
                    DataRow dr5 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr5);
                    dr5[0] = Trantype + "- LCL";
                    dr5 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr5);
                    dr5[0] = "Agent";
                    dr5[1] = "M3";
                    dr5[2] = "Revenue";



                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "LCL", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[1];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            dr5 = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr5);
                            dr5[0] = obj_dttemp.Rows[i][0].ToString();
                            dr5[1] = obj_dttemp.Rows[i][1].ToString();
                            dr5[2] = obj_dttemp.Rows[i][2].ToString();

                        }

                    }
                    dr5 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr5);
                    //End Region -LCL


                    //Region -FCL
                    DataRow dr6 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr6);
                    dr6[0] = Trantype + "- FCL";
                    dr6 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr6);
                    dr6[0] = "Agent";
                    dr6[1] = "M3";
                    dr6[2] = "Revenue";




                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, "FCL", int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[1];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            dr6 = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr6);
                            dr6[0] = obj_dttemp.Rows[i][0].ToString();
                            dr6[1] = obj_dttemp.Rows[i][1].ToString();
                            dr6[2] = obj_dttemp.Rows[i][2].ToString();


                        }

                    }
                    dr6 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr6);
                    //End Region -FCL
                }
                else if (StrTrantype == "AE" || StrTrantype == "AI")
                {


                    //DataRow dr = obj_dt.NewRow();
                    //obj_dt.Rows.Add(dr);
                    dr[0] = Trantype + " - " + StrTrantype;
                    dr = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr);
                    dr[0] = "Agent";
                    dr[1] = "M3";
                    dr[2] = "Revenue";
                    dr[3] = "M3";
                    dr[4] = "Revenue";



                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, StrTrantype, int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            dr = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr);
                            dr[0] = obj_dttemp.Rows[i][0].ToString();
                            dr[1] = obj_dttemp.Rows[i][1].ToString();
                            dr[2] = obj_dttemp.Rows[i][2].ToString();
                            dr[3] = obj_dttemp.Rows[i][3].ToString();
                            dr[4] = obj_dttemp.Rows[i][4].ToString();

                        }

                    }
                    dr = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr);

                    DataRow dr1 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr1);
                    dr1[0] = Trantype + " - " + StrTrantype;
                    dr1 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr1);
                    dr1[0] = "Agent";
                    dr1[1] = "M3";
                    dr1[2] = "Revenue";




                    obj_ds = da_obj_Costing.SelAgentwiseVolumeCor(frm_date, to_date, StrTrantype, int_divisionid, StrTrantype);
                    if (obj_ds.Tables.Count > 0)
                    {

                        obj_dttemp = obj_ds.Tables[0];
                        for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                        {
                            dr1 = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr1);
                            dr1[0] = obj_dttemp.Rows[i][0].ToString();
                            dr1[1] = obj_dttemp.Rows[i][1].ToString();
                            dr1[2] = obj_dttemp.Rows[i][2].ToString();


                        }

                    }
                    dr1 = obj_dt.NewRow();
                    obj_dt.Rows.Add(dr1);
                }

            }
            Grd_Retention.Visible = true;
            Grd_Retention.DataSource = obj_dt;
            Grd_Retention.DataBind();
            Grd_Retention.Visible = true;
            signup.Visible = true;
        }

        protected void tdansales()
        {
            try
            {
                DataTable dt = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                DataRow dr = dtemptyfree.NewRow();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                DateTime date = Logobj.GetDate();

                int vouyear, frommonth, tomonth, intcustid, salesid;
                string str = "";
                int fm = 0;
                string strmonth;
                DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));
                string datestart = startdate.Month.ToString("MMMMMMMM");
                DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                string dateend = startend.Month.ToString("MMMMMMMM");
                frommonth = startdate.Month;
                tomonth = startend.Month;
                var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                int Rc = 1; int emp = 0;
                dt = costtempobj.SelSalesFromCostDtls(emp, bid, "AC", startdate, startend);
                dtemptyfree.Columns.Add("Salesperson");
                for (int i = 0; i <= monthdiff; i++)
                {

                    if (frommonth + i > 12)
                    {

                        strmonth = Utility.fn_GetMonthName(1 + fm, false);
                        strmonth = strmonth + "-" + startend.Year.ToString();
                        fm += 1;
                    }
                    else
                    {
                        strmonth = Utility.fn_GetMonthName(frommonth + i, false);
                        strmonth = strmonth + "-" + startdate.Year.ToString();
                    }
                    dtemptyfree.Columns.Add(strmonth);

                }
                dtemptyfree.Columns.Add("Total");


                if (dt.Rows.Count > 0)
                {

                    for (int dtcount = 0; dtcount < dt.Rows.Count; dtcount++)
                    {
                        dtemptyfree.Rows.Add();
                        double total = 0;
                        dr = dtemptyfree.NewRow();
                        int count = dtemptyfree.Rows.Count - 1;
                        salesid = Convert.ToInt32(dt.Rows[dtcount]["salid"].ToString());
                        dtemptyfree.Rows[count]["Salesperson"] = dt.Rows[dtcount]["salesperson"].ToString();
                        Rc = 1; total40 = 0;
                        fm = 0;
                        for (int k = 0; k <= monthdiff; k++)
                        {

                            if (frommonth + k > 12)
                            {
                                temp2 = Convert.ToDouble(costtempobj.GetRetentionforSales(salesid, bid, emp, "AC", 1 + fm, startend.Year));
                                dtemptyfree.Rows[count][Rc] = temp2;
                                fm += 1;
                                total40 = total40 + Convert.ToDouble(dtemptyfree.Rows[count][Rc]);
                            }
                            else
                            {
                                temp2 = Convert.ToDouble(costtempobj.GetRetentionforSales(salesid, bid, emp, "AC", frommonth + k, startdate.Year));
                                dtemptyfree.Rows[count][Rc] = temp2;
                                total40 = total40 + Convert.ToDouble(dtemptyfree.Rows[count][Rc]);
                            }
                            Rc = Rc + 1;

                        }



                        if (dtemptyfree.Rows.Count > 0)
                        {
                            dtemptyfree.Rows[count]["Total"] = total40;
                        }
                        //dtemptyfree.Rows.Add(dr);


                    }

                    if (dtemptyfree.Rows.Count > 0)
                    {
                        dtemptyfree.Rows.Add();
                        dr = dtemptyfree.NewRow();
                        int rco = 1; double amt = 0, totalamt = 0;
                        for (int k = 0; k <= monthdiff; k++)
                        {
                            amt = 0;
                            for (int j = 0; j <= dtemptyfree.Rows.Count - 1; j++)
                            {
                                if (dtemptyfree.Rows[j][rco].ToString() == "")
                                {
                                    dtemptyfree.Rows[j][rco] = "0.00";
                                }
                                amt = amt + Convert.ToDouble(dtemptyfree.Rows[j][rco].ToString());
                            }
                            dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = amt.ToString("#,0.00");
                            rco += 1;
                            totalamt += amt;
                            // dr["Total"] = totalamt.ToString("#,0.00");
                        }
                        dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = totalamt.ToString("#,0.00");
                        //dr["Total"] = totalamt.ToString("#,0.00");
                        //dtemptyfree.Rows.Add(dr);

                    }
                    grd_trendanalysis.DataSource = dtemptyfree;
                    ViewState["grd_trendanalysisSalesperson"] = dtemptyfree;
                    grd_trendanalysis.DataBind();
                    signup.Visible = true;
                    grd_trendanalysis.Visible = true;
                }

            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void tdanproduct()
        {
            try
            {
                DataTable dt = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                DataRow dr = dtemptyfree.NewRow();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                DateTime date = Logobj.GetDate();

                int vouyear, frommonth, tomonth, intcustid, salesid;
                int fm = 0;
                string strmonth;
                DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));
                string datestart = startdate.Month.ToString("MMMMMMMM");
                DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                string dateend = startend.Month.ToString("MMMMMMMM");
                frommonth = startdate.Month;
                tomonth = startend.Month;
                var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                int Rc = 1;
                int emp = 0;
                if (date.Month < 4)
                {
                    vouyear = date.Year - 1;

                }
                else
                {
                    vouyear = date.Year;
                }
                dtemptyfree.Columns.Add("Product");
                frommonth = startdate.Month;
                tomonth = startend.Month;
                //for (int i = 0; i <= (frommonth - tomonth) || (tomonth - frommonth); i++)
                //var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                for (int i = 0; i <= monthdiff; i++)
                {

                    if (frommonth + i > 12)
                    {

                        strmonth = Utility.fn_GetMonthName(1 + fm, false);
                        strmonth = strmonth + "-" + startend.Year.ToString();
                        fm += 1;
                    }
                    else
                    {
                        strmonth = Utility.fn_GetMonthName(frommonth + i, false);
                        strmonth = strmonth + "-" + startdate.Year.ToString();
                    }
                    dtemptyfree.Columns.Add(strmonth);

                }
                dtemptyfree.Columns.Add("Total");
                dtemptyfree.Rows.Add();

                fm = 0;

                string tran;
                for (int k = 0; k <= monthdiff; k++)
                {

                    if (frommonth + k > 12)
                    {
                        dt = costtempobj.SelProductFromCostDtls(emp, bid, "AC", 1 + fm, startend.Year);
                        fm += 1;
                    }
                    else
                    {
                        dt = costtempobj.SelProductFromCostDtls(emp, bid, "AC", frommonth + k, startdate.Year);
                    }

                    for (int j = 0; j <= dt.Rows.Count - 1; j++)
                    {
                        tran = dt.Rows[j]["trantype"].ToString();

                        if (tran == "FE")
                        {
                            tran = "Ocean Exports";

                        }
                        else if (tran == "FI")
                        {

                            tran = "Ocean Imports";

                        }
                        else if (tran == "AE")
                        {
                            tran = "Air Exports";
                        }

                        else if (tran == "AI")
                        {
                            tran = "Air Imports";
                        }

                        else if (tran == "CH")
                        {
                            tran = "C H A";
                        }

                        else
                            if (tran == "AD")
                            {
                                tran = "Admin";
                            }

                        if (dt.Rows.Count > 0)
                        {


                            //Rc = 1;
                            int cou = 0;
                            total40 = 0;
                            for (int i = 0; i <= dtemptyfree.Rows.Count - 1; i++)
                            {
                                dr = dtemptyfree.NewRow();
                                if (dtemptyfree.Rows[i][0].ToString() != "")
                                {
                                    if (dtemptyfree.Rows[i][0].ToString() == tran)
                                    {

                                        //dtemptyfree.Rows[i][0] = tran;
                                        dtemptyfree.Rows[i][Rc] = dt.Rows[j]["Retention"].ToString();
                                        total40 = total40 + Convert.ToDouble(dt.Rows[j]["Retention"].ToString());
                                        cou = 0;
                                    }
                                } cou = 1;
                            }
                            if (cou == 1)
                            {
                                cou = 0;
                                if (dtemptyfree.Rows.Count < 5)
                                {
                                    int count = dtemptyfree.Rows.Count - 1;
                                    dtemptyfree.Rows[count][0] = tran;
                                    dtemptyfree.Rows[count][Rc] = dt.Rows[j]["Retention"].ToString();
                                    total40 = total40 + Convert.ToDouble(dt.Rows[j]["Retention"].ToString());
                                    dtemptyfree.Rows.Add(dr);
                                }
                            }
                        }

                    } Rc = Rc + 1;

                }

                for (int i = 0; i < dtemptyfree.Rows.Count - 1; i++)
                {
                    Rc = 1;
                    total40 = 0;
                    for (int m = 0; m <= monthdiff; m++)
                    {

                        if (dtemptyfree.Rows[i][Rc].ToString() == "")
                        {
                            dtemptyfree.Rows[i][Rc] = "0.00";
                        }
                        if (dtemptyfree.Rows.Count - 1 > 0)
                        {
                            total40 = total40 + Convert.ToDouble(dtemptyfree.Rows[i][Rc]);

                            //dtemptyfree.Rows[i]["Total"] = total40.ToString("#,0.00");
                            //dtemptyfree.Rows[i]["Total"] = dtemptyfree.Rows[i]["Total"] + dtemptyfree.Rows[i][Rc];
                        } Rc += 1;
                    } dtemptyfree.Rows[i]["Total"] = total40.ToString("#,0.00");

                }

                if (dtemptyfree.Rows.Count > 0)
                {
                    dr = dtemptyfree.NewRow();
                    int rco = 1; double amt = 0, totalamt = 0;
                    for (int k = 0; k <= monthdiff; k++)
                    {
                        amt = 0;
                        for (int j = 0; j <= dtemptyfree.Rows.Count - 1; j++)
                        {
                            if (dtemptyfree.Rows[j][rco].ToString() == "")
                            {
                                dtemptyfree.Rows[j][rco] = "0.00";
                            }
                            amt = amt + Convert.ToDouble(dtemptyfree.Rows[j][rco].ToString());
                        }
                        dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = amt.ToString("#,0.00");
                        rco += 1;
                        totalamt += amt;
                        // dr["Total"] = totalamt.ToString("#,0.00");
                    }
                    dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = totalamt.ToString("#,0.00");
                    //dr["Total"] = totalamt.ToString("#,0.00");
                    //dtemptyfree.Rows.Add(dr);

                }

                //dtemptyfree.Rows.Add();

                grd_trendanalysis.DataSource = dtemptyfree;
                ViewState["grd_trendanalysisProduct"] = dtemptyfree;
                grd_trendanalysis.DataBind();
                signup.Visible = true;
                grd_trendanalysis.Visible = true;
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void tdanproductnew1()
        {
            try
            {
                DataTable dt = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                DataRow dr = dtemptyfree.NewRow();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                DateTime date = Logobj.GetDate();

                int vouyear, frommonth, tomonth, intcustid, salesid;
                int fm = 0;
                string strmonth;
                DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));
                string datestart = startdate.Month.ToString("MMMMMMMM");
                DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                string dateend = startend.Month.ToString("MMMMMMMM");
                frommonth = startdate.Month;
                tomonth = startend.Month;
                var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                int Rc = 3;
                int emp = 0;
                if (date.Month < 4)
                {
                    vouyear = date.Year - 1;

                }
                else
                {
                    vouyear = date.Year;
                }
                dtemptyfree.Columns.Add("Product");
                dtemptyfree.Columns.Add("Teus");
                dtemptyfree.Columns.Add("Volume");
                frommonth = startdate.Month;
                tomonth = startend.Month;
                //for (int i = 0; i <= (frommonth - tomonth) || (tomonth - frommonth); i++)
                //var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                for (int i = 0; i <= monthdiff; i++)
                {

                    if (frommonth + i > 12)
                    {

                        strmonth = Utility.fn_GetMonthName(1 + fm, false);
                        strmonth = strmonth + "-" + startend.Year.ToString();
                        fm += 1;
                    }
                    else
                    {
                        strmonth = Utility.fn_GetMonthName(frommonth + i, false);
                        strmonth = strmonth + "-" + startdate.Year.ToString();
                    }
                    dtemptyfree.Columns.Add(strmonth);

                }
                dtemptyfree.Columns.Add("Total");
                dtemptyfree.Rows.Add();

                fm = 0;

                string tran;
                for (int k = 0; k <= monthdiff; k++)
                {

                    if (frommonth + k > 12)
                    {
                        dt = costtempobj.SelProductFromCostDtls(emp, bid, "AC", 1 + fm, startend.Year);
                        fm += 1;
                    }
                    else
                    {
                        dt = costtempobj.SelProductFromCostDtls(emp, bid, "AC", frommonth + k, startdate.Year);
                    }

                    for (int j = 0; j <= dt.Rows.Count - 1; j++)
                    {
                        tran = dt.Rows[j]["trantype"].ToString();

                        if (tran == "FE")
                        {
                            tran = "Ocean Exports";

                        }
                        else if (tran == "FE - CHA Activity")
                        {
                            tran = "OE - CHA Activity";

                        }
                        else if (tran == "FE-Buyer Consol")
                        {
                            tran = "OE-Buyer Consol";

                        }
                        else if (tran == "FE-Co-Load")
                        {
                            tran = "OE-Co-Load";

                        }
                        else if (tran == "FE-Consol")
                        {
                            tran = "OE-Consol";

                        }
                        else if (tran == "FE-FCL")
                        {
                            tran = "OE-FCL";

                        }


                        else if (tran == "FI-MCC")
                        {
                            tran = "OI-MCC";

                        }


                        else if (tran == "FI")
                        {

                            tran = "Ocean Imports";

                        }
                        else if (tran == "FI - CHA Activity")
                        {

                            tran = "OI - CHA Activity";

                        }

                        else if (tran == "FI-Buyer Consol")
                        {

                            tran = "OI-Buyer Consol";

                        }
                        else if (tran == "FI-Co-Load")
                        {

                            tran = "OI-Co-Load";

                        }
                        else if (tran == "FI-Consol")
                        {

                            tran = "OI-Consol";

                        }
                        else if (tran == "FI-FCL")
                        {

                            tran = "OI-FCL";

                        }

                        else if (tran == "AE")
                        {
                            tran = "Air Exports";
                        }
                        else if (tran == "AE - CHA Activity")
                        {
                            tran = "AE - CHA Activity";
                        }


                        else if (tran == "AI")
                        {
                            tran = "Air Imports";
                        }

                        else if (tran == "AI - CHA Activity")
                        {
                            tran = "AI - CHA Activity";
                        }


                        else if (tran == "CH")
                        {
                            tran = "C H A";
                        }


                        //else
                        //    if (tran == "AD")
                        //    {
                        //        tran = "Admin";
                        //    }

                        if (dt.Rows.Count > 0)
                        {


                            //Rc = 1;
                            int cou = 0;
                            total40 = 0;
                            for (int i = 0; i <= dtemptyfree.Rows.Count - 1; i++)
                            {
                                dr = dtemptyfree.NewRow();
                                if (dtemptyfree.Rows[i][0].ToString() != "")
                                {
                                    if (dtemptyfree.Rows[i][0].ToString() == tran)
                                    {

                                        //dtemptyfree.Rows[i][0] = tran;
                                        dtemptyfree.Rows[i][Rc] = dt.Rows[j]["Retention"].ToString();
                                        total40 = total40 + Convert.ToDouble(dt.Rows[j]["Retention"].ToString());
                                        cou = 0;
                                    }
                                } cou = 1;
                            }
                            if (cou == 1)
                            {
                                cou = 0;
                                if (dtemptyfree.Rows.Count - 1 < dt.Rows.Count)
                                {
                                    int count = dtemptyfree.Rows.Count - 1;
                                    double volume = 0.0;
                                    // dtemptyfree.Rows[count][0] = tran;
                                    dtemptyfree.Rows[count][0] = tran;
                                    dtemptyfree.Rows[count][1] = dt.Rows[j]["Teus"].ToString();
                                    volume = Convert.ToDouble(dt.Rows[j]["Volume"].ToString());
                                    dtemptyfree.Rows[count][2] = volume.ToString("#,0.00");
                                    dtemptyfree.Rows[count][Rc] = dt.Rows[j]["Retention"].ToString();
                                    total40 = total40 + Convert.ToDouble(dt.Rows[j]["Retention"].ToString());
                                    dtemptyfree.Rows.Add(dr);
                                }
                            }
                        }

                    } Rc = Rc + 1;

                }

                for (int i = 0; i < dtemptyfree.Rows.Count - 1; i++)
                {
                    Rc = 3;
                    total40 = 0;
                    for (int m = 0; m <= monthdiff; m++)
                    {

                        if (dtemptyfree.Rows[i][Rc].ToString() == "")
                        {
                            dtemptyfree.Rows[i][Rc] = "0.00";
                        }
                        if (dtemptyfree.Rows.Count - 1 > 0)
                        {
                            total40 = total40 + Convert.ToDouble(dtemptyfree.Rows[i][Rc]);

                            //dtemptyfree.Rows[i]["Total"] = total40.ToString("#,0.00");
                            //dtemptyfree.Rows[i]["Total"] = dtemptyfree.Rows[i]["Total"] + dtemptyfree.Rows[i][Rc];
                        } Rc += 1;
                    } dtemptyfree.Rows[i]["Total"] = total40.ToString("#,0.00");

                }

                if (dtemptyfree.Rows.Count > 0)
                {
                    dr = dtemptyfree.NewRow();
                    int rco = 3; double amt = 0, totalamt = 0;
                    for (int k = 0; k <= monthdiff; k++)
                    {
                        amt = 0;
                        for (int j = 0; j <= dtemptyfree.Rows.Count - 1; j++)
                        {
                            if (dtemptyfree.Rows[j][rco].ToString() == "")
                            {
                                dtemptyfree.Rows[j][rco] = "0.00";
                            }
                            amt = amt + Convert.ToDouble(dtemptyfree.Rows[j][rco].ToString());
                        }
                        dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = amt.ToString("#,0.00");
                        rco += 1;
                        totalamt += amt;
                        // dr["Total"] = totalamt.ToString("#,0.00");
                    }
                    dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = totalamt.ToString("#,0.00");
                    //dr["Total"] = totalamt.ToString("#,0.00");
                    //dtemptyfree.Rows.Add(dr);

                }

                //dtemptyfree.Rows.Add();

                grd_trendanalysis.DataSource = dtemptyfree;
                ViewState["grd_trendanalysisProduct"] = dtemptyfree;
                grd_trendanalysis.DataBind();
                signup.Visible = true;
                grd_trendanalysis.Visible = true;
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }





        }



        /*    protected void tdancustomer()
            {
                try
                {
                    DataTable dt = new DataTable();
                    DataTable dtnew = new DataTable();
                    DataTable dtemptyfree = new DataTable();
                    DataRow dr = dtemptyfree.NewRow();
                    int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                    bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                    string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                    DateTime date = Logobj.GetDate();
                    //DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));

                    //  string datestart=startdate.Month.ToString("MMMMMMMM");
                    //  DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                    //  string dateend = startend.Month.ToString("MMMMMMMM");
                    int vouyear, frommonth, tomonth, intcustid, salesid;
                    string str = "";
                    int fm = 0;
                    string strmonth;
                    DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));
                    string datestart = startdate.Month.ToString("MMMMMMMM");
                    DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                    string dateend = startend.Month.ToString("MMMMMMMM");
                    frommonth = startdate.Month;
                    tomonth = startend.Month;
                    var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                    int empid = Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString());
                    if (date.Month < 4)
                    {
                        vouyear = date.Year - 1;

                    }
                    else
                    {
                        vouyear = date.Year;
                    }


                    int emp = 0;


                    for (int j = 0; j <= 4; j++)
                    {
                        if (j == 0)
                        {
                            str = "FE";
                            dt = costtempobj.SelFromCostDtls(emp, bid, "FE", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);
                        }
                        else if (j == 1)
                        {
                            str = "FI";
                            dt = costtempobj.SelFromCostDtls(emp, bid, "FI", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                        }
                        else if (j == 2)
                        {
                            str = "AE";
                            dt = costtempobj.SelFromCostDtls(emp, bid, "AE", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                        }
                        else if (j == 3)
                        {
                            str = "AI";
                            dt = costtempobj.SelFromCostDtls(emp, bid, "AI", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                        }
                        else if (j == 3)
                        {
                            str = "CH";
                            dt = costtempobj.SelFromCostDtls(emp, bid, "CH", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                        }


                        if (dt.Rows.Count > 0)
                        {


                            if (dtemptyfree.Columns.Count == 0)
                            {
                                dtemptyfree.Columns.Add("CustomerName");
                                dtemptyfree.Columns.Add("Sales Person");
                                dtemptyfree.Columns.Add("Product");
                                frommonth = startdate.Month;
                                tomonth = startend.Month;
                                //for (int i = 0; i <= (frommonth - tomonth) || (tomonth - frommonth); i++)
                                //var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                                for (int i = 0; i <= monthdiff; i++)
                                {

                                    if (frommonth + i > 12)
                                    {

                                        strmonth = Utility.fn_GetMonthName(1 + fm, false);
                                        fm += 1;
                                    }
                                    else
                                    {
                                        strmonth = Utility.fn_GetMonthName(frommonth + i, false);
                                    }
                                    dtemptyfree.Columns.Add(strmonth);

                                }
                                dtemptyfree.Columns.Add("Total");
                                dtemptyfree.Rows.Add();
                            }


                            int Rc, d = 0;


                            for (int dtcount = 0; dtcount < dt.Rows.Count; dtcount++)
                            {
                                double total = 0;
                                dr = dtemptyfree.NewRow();
                                int count = dtemptyfree.Rows.Count - 1;
                                intcustid = Convert.ToInt32(dt.Rows[dtcount]["custid"].ToString());
                                salesid = Convert.ToInt32(dt.Rows[dtcount]["salesid"].ToString());
                                dtemptyfree.Rows[count]["CustomerName"] = dt.Rows[dtcount]["customername"].ToString();
                                dtemptyfree.Rows[count]["Sales Person"] = dt.Rows[dtcount]["empname"].ToString();
                                dtemptyfree.Rows[count]["Product"] = dt.Rows[dtcount]["product"].ToString();
                                Rc = 3; total40 = 0;
                                for (int k = 0; k <= monthdiff; k++)
                                {

                                    if (frommonth + k > 12)
                                    {
                                        dtemptyfree.Rows[count][Rc] = (costtempobj.GetRetentionforTrend(intcustid, salesid, bid, empid, str, 1 + fm, startend.Year, dt.Rows[dtcount]["empname"].ToString()));
                                        fm += 1;
                                    }
                                    else
                                    {
                                        dtemptyfree.Rows[count][Rc] = (costtempobj.GetRetentionforTrend(intcustid, salesid, bid, empid, str, frommonth + k, startdate.Year, dt.Rows[dtcount]["empname"].ToString()));
                                        total40 = total40 + Convert.ToDouble(dtemptyfree.Rows[count][Rc]);
                                    }
                                    Rc = Rc + 1;

                                }



                                if (dtemptyfree.Rows.Count > 0)
                                {
                                    dtemptyfree.Rows[count]["Total"] = total40;
                                }
                                dtemptyfree.Rows.Add(dr);


                            }

                        } dt.Rows.Clear();

                    }

                    if (dtemptyfree.Rows.Count > 0)
                    {



                        dr = dtemptyfree.NewRow();
                        int rco = 3; double amt = 0, totalamt = 0;
                        for (int k = 0; k <= monthdiff; k++)
                        {
                            amt = 0;
                            for (int j = 0; j <= dtemptyfree.Rows.Count - 1; j++)
                            {
                                if (dtemptyfree.Rows[j][rco].ToString() == "")
                                {
                                    dtemptyfree.Rows[j][rco] = "0.00";
                                }
                                amt = amt + Convert.ToDouble(dtemptyfree.Rows[j][rco].ToString());
                            }
                            dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = amt.ToString("#,0.00");
                            rco += 1;
                            totalamt += amt;
                            // dr["Total"] = totalamt.ToString("#,0.00");
                        }
                        dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = totalamt.ToString("#,0.00");
                        //dr["Total"] = totalamt.ToString("#,0.00");
                        //dtemptyfree.Rows.Add(dr);

                    }
                    //for (int i = 0; i <= monthdiff; i++)
                    //{

                    //    if (frommonth + i > 12)
                    //    {

                    //        grd_trendanalysis.Columns[i].Visible = true;
                    //        fm += 1;
                    //    }
                    //    else
                    //    {
                    //        grd_trendanalysis.Columns[i].Visible = true;
                    //    }
                    //}
                    DataSet ds = new DataSet();
                    ds.Tables.Add(dtemptyfree);

                    grd_trendanalysis.DataSource = ds.Tables[0];
                    ViewState["grd_trendanalysisCustomer"] = ds.Tables[0];
                    grd_trendanalysis.DataBind();
                    signup.Visible = true;
                    grd_trendanalysis.Visible = true;
                }
                catch (Exception ex)
                {
                    string message = ex.Message.ToString();
                    ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
                }
            }

            */


        /*protected void tdancustomer()
        {
            try
            {
                DataTable dt = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                DataRow dr = dtemptyfree.NewRow();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                DateTime date = Logobj.GetDate();
                //DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));

                //  string datestart=startdate.Month.ToString("MMMMMMMM");
                //  DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                //  string dateend = startend.Month.ToString("MMMMMMMM");
                int vouyear, frommonth, tomonth, intcustid, salesid;
                string str = "";
                int fm = 0;
                string strmonth;
                DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));
                string datestart = startdate.Month.ToString("MMMMMMMM");
                DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                string dateend = startend.Month.ToString("MMMMMMMM");
                frommonth = startdate.Month;
                tomonth = startend.Month;
                var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                int empid = Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString());
                if (date.Month < 4)
                {
                    vouyear = date.Year - 1;

                }
                else
                {
                    vouyear = date.Year;
                }


                int emp = 0;


                for (int j = 0; j <= 4; j++)
                {
                    if (j == 0)
                    {
                        str = "FE";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "FE", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);
                    }
                    else if (j == 1)
                    {
                        str = "FI";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "FI", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                    }
                    else if (j == 2)
                    {
                        str = "AE";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "AE", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                    }
                    else if (j == 3)
                    {
                        str = "AI";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "AI", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                    }
                    else if (j == 3)
                    {
                        str = "CH";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "CH", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                    }


                    if (dt.Rows.Count > 0)
                    {


                        if (dtemptyfree.Columns.Count == 0)
                        {
                            dtemptyfree.Columns.Add("CustomerName");
                            dtemptyfree.Columns.Add("Sales Person");
                            dtemptyfree.Columns.Add("Product");
                            frommonth = startdate.Month;
                            tomonth = startend.Month;
                            //for (int i = 0; i <= (frommonth - tomonth) || (tomonth - frommonth); i++)
                            //var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                            for (int i = 0; i <= monthdiff; i++)
                            {

                                if (frommonth + i > 12)
                                {

                                    strmonth = Utility.fn_GetMonthName(1 + fm, false);
                                    fm += 1;
                                }
                                else
                                {
                                    strmonth = Utility.fn_GetMonthName(frommonth + i, false);
                                }
                                dtemptyfree.Columns.Add(strmonth);

                            }
                            dtemptyfree.Columns.Add("Total");
                            dtemptyfree.Rows.Add();
                        }


                        int Rc, d = 0;


                        for (int dtcount = 0; dtcount < dt.Rows.Count; dtcount++)
                        {
                            double total = 0;
                            dr = dtemptyfree.NewRow();
                            int count = dtemptyfree.Rows.Count - 1;
                            intcustid = Convert.ToInt32(dt.Rows[dtcount]["custid"].ToString());
                            salesid = Convert.ToInt32(dt.Rows[dtcount]["salesid"].ToString());
                            dtemptyfree.Rows[count]["CustomerName"] = dt.Rows[dtcount]["customername"].ToString();
                            dtemptyfree.Rows[count]["Sales Person"] = dt.Rows[dtcount]["empname"].ToString();
                            dtemptyfree.Rows[count]["Product"] = dt.Rows[dtcount]["product"].ToString();
                            Rc = 3; total40 = 0;
                            fm = 0;
                            for (int k = 0; k <= monthdiff; k++)
                            {

                                if (frommonth + k > 12)
                                {
                                    dtemptyfree.Rows[count][Rc] = (costtempobj.GetRetentionforTrend(intcustid, salesid, bid, empid, str, 1 + fm, startend.Year, dt.Rows[dtcount]["empname"].ToString()));
                                    fm += 1;
                                }
                                else
                                {
                                    dtemptyfree.Rows[count][Rc] = (costtempobj.GetRetentionforTrend(intcustid, salesid, bid, empid, str, frommonth + k, startdate.Year, dt.Rows[dtcount]["empname"].ToString()));
                                    total40 = total40 + Convert.ToDouble(dtemptyfree.Rows[count][Rc]);
                                }
                                Rc = Rc + 1;

                            }



                            if (dtemptyfree.Rows.Count > 0)
                            {
                                dtemptyfree.Rows[count]["Total"] = total40;
                            }
                            dtemptyfree.Rows.Add(dr);


                        }

                    } dt.Rows.Clear();

                }

                if (dtemptyfree.Rows.Count > 0)
                {



                    dr = dtemptyfree.NewRow();
                    int rco = 3; double amt = 0, totalamt = 0;
                    for (int k = 0; k <= monthdiff; k++)
                    {
                        amt = 0;
                        for (int j = 0; j <= dtemptyfree.Rows.Count - 1; j++)
                        {
                            if (dtemptyfree.Rows[j][rco].ToString() == "")
                            {
                                dtemptyfree.Rows[j][rco] = "0.00";
                            }
                            amt = amt + Convert.ToDouble(dtemptyfree.Rows[j][rco].ToString());
                        }
                        dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = amt.ToString("#,0.00");
                        rco += 1;
                        totalamt += amt;
                        // dr["Total"] = totalamt.ToString("#,0.00");
                    }
                    dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = totalamt.ToString("#,0.00");
                    //dr["Total"] = totalamt.ToString("#,0.00");
                    //dtemptyfree.Rows.Add(dr);

                }
                //for (int i = 0; i <= monthdiff; i++)
                //{

                //    if (frommonth + i > 12)
                //    {

                //        grd_trendanalysis.Columns[i].Visible = true;
                //        fm += 1;
                //    }
                //    else
                //    {
                //        grd_trendanalysis.Columns[i].Visible = true;
                //    }
                //}
                DataSet ds = new DataSet();
                ds.Tables.Add(dtemptyfree);

                grd_trendanalysis.DataSource = ds.Tables[0];
                ViewState["grd_trendanalysisCustomer"] = ds.Tables[0];
                grd_trendanalysis.DataBind();
                signup.Visible = true;
                grd_trendanalysis.Visible = true;
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }
        */


        protected void tdancustomer()
        {
            try
            {
                DataTable dt = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                DataRow dr = dtemptyfree.NewRow();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                DateTime date = Logobj.GetDate();
                //DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));

                //  string datestart=startdate.Month.ToString("MMMMMMMM");
                //  DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                //  string dateend = startend.Month.ToString("MMMMMMMM");
                int vouyear, frommonth, tomonth, intcustid, salesid;
                string str = "";
                int fm = 0;
                string strmonth;
                DateTime startdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));
                string datestart = startdate.Month.ToString("MMMMMMMM");
                DateTime startend = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text));
                string dateend = startend.Month.ToString("MMMMMMMM");
                frommonth = startdate.Month;
                tomonth = startend.Month;
                var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                int empid = Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString());
                if (date.Month < 4)
                {
                    vouyear = date.Year - 1;

                }
                else
                {
                    vouyear = date.Year;
                }


                int emp = 0;


                for (int j = 0; j <= 4; j++)
                {
                    if (j == 0)
                    {
                        str = "FE";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "FE", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);
                    }
                    else if (j == 1)
                    {
                        str = "FI";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "FI", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                    }
                    else if (j == 2)
                    {
                        str = "AE";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "AE", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                    }
                    else if (j == 3)
                    {
                        str = "AI";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "AI", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                    }
                    else if (j == 3)
                    {
                        str = "CH";
                        dt = costtempobj.SelFromCostDtls(emp, bid, "CH", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), emp);

                    }


                    if (dt.Rows.Count > 0)
                    {


                        if (dtemptyfree.Columns.Count == 0)
                        {
                            dtemptyfree.Columns.Add("CustomerName");
                            dtemptyfree.Columns.Add("Sales Person");
                            dtemptyfree.Columns.Add("Product");
                            frommonth = startdate.Month;
                            tomonth = startend.Month;
                            //for (int i = 0; i <= (frommonth - tomonth) || (tomonth - frommonth); i++)
                            //var monthdiff = (startend.Month + startend.Year * 12) - (startdate.Month + startdate.Year * 12);
                            for (int i = 0; i <= monthdiff; i++)
                            {

                                if (frommonth + i > 12)
                                {

                                    strmonth = Utility.fn_GetMonthName(1 + fm, false);
                                    strmonth = strmonth + "-" + startend.Year.ToString();
                                    fm += 1;
                                }
                                else
                                {
                                    strmonth = Utility.fn_GetMonthName(frommonth + i, false);
                                    strmonth = strmonth + "-" + startdate.Year.ToString();
                                }
                                dtemptyfree.Columns.Add(strmonth);

                            }
                            dtemptyfree.Columns.Add("Total");
                            dtemptyfree.Rows.Add();
                        }


                        int Rc, d = 0;


                        for (int dtcount = 0; dtcount < dt.Rows.Count; dtcount++)
                        {
                            double total = 0;
                            dr = dtemptyfree.NewRow();
                            int count = dtemptyfree.Rows.Count - 1;
                            intcustid = Convert.ToInt32(dt.Rows[dtcount]["custid"].ToString());
                            salesid = Convert.ToInt32(dt.Rows[dtcount]["salesid"].ToString());
                            dtemptyfree.Rows[count]["CustomerName"] = dt.Rows[dtcount]["customername"].ToString();
                            dtemptyfree.Rows[count]["Sales Person"] = dt.Rows[dtcount]["empname"].ToString();
                            dtemptyfree.Rows[count]["Product"] = dt.Rows[dtcount]["product"].ToString();
                            Rc = 3; total40 = 0;
                            fm = 0;
                            for (int k = 0; k <= monthdiff; k++)
                            {

                                if (frommonth + k > 12)
                                {
                                    dtemptyfree.Rows[count][Rc] = (costtempobj.GetRetentionforTrend(intcustid, salesid, bid, empid, str, 1 + fm, startend.Year, dt.Rows[dtcount]["empname"].ToString()));
                                    fm += 1;
                                    total40 = total40 + Convert.ToDouble(dtemptyfree.Rows[count][Rc]);
                                }
                                else
                                {
                                    dtemptyfree.Rows[count][Rc] = (costtempobj.GetRetentionforTrend(intcustid, salesid, bid, empid, str, frommonth + k, startdate.Year, dt.Rows[dtcount]["empname"].ToString()));
                                    total40 = total40 + Convert.ToDouble(dtemptyfree.Rows[count][Rc]);
                                }
                                Rc = Rc + 1;

                            }



                            if (dtemptyfree.Rows.Count > 0)
                            {
                                dtemptyfree.Rows[count]["Total"] = total40;
                            }
                            dtemptyfree.Rows.Add(dr);


                        }

                    } dt.Rows.Clear();

                }

                if (dtemptyfree.Rows.Count > 0)
                {



                    dr = dtemptyfree.NewRow();
                    int rco = 3; double amt = 0, totalamt = 0;
                    for (int k = 0; k <= monthdiff; k++)
                    {
                        amt = 0;
                        for (int j = 0; j <= dtemptyfree.Rows.Count - 1; j++)
                        {
                            if (dtemptyfree.Rows[j][rco].ToString() == "")
                            {
                                dtemptyfree.Rows[j][rco] = "0.00";
                            }
                            amt = amt + Convert.ToDouble(dtemptyfree.Rows[j][rco].ToString());
                        }
                        dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = amt.ToString("#,0.00");
                        rco += 1;
                        totalamt += amt;
                        // dr["Total"] = totalamt.ToString("#,0.00");
                    }
                    dtemptyfree.Rows[dtemptyfree.Rows.Count - 1][rco] = totalamt.ToString("#,0.00");
                    //dr["Total"] = totalamt.ToString("#,0.00");
                    //dtemptyfree.Rows.Add(dr);

                }
                //for (int i = 0; i <= monthdiff; i++)
                //{

                //    if (frommonth + i > 12)
                //    {

                //        grd_trendanalysis.Columns[i].Visible = true;
                //        fm += 1;
                //    }
                //    else
                //    {
                //        grd_trendanalysis.Columns[i].Visible = true;
                //    }
                //}
                DataSet ds = new DataSet();
                ds.Tables.Add(dtemptyfree);

                grd_trendanalysis.DataSource = ds.Tables[0];
                ViewState["grd_trendanalysisCustomer"] = ds.Tables[0];
                grd_trendanalysis.DataBind();
                signup.Visible = true;
                grd_trendanalysis.Visible = true;
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }





        protected void get_Years()
        {
            try
            {
                DataTable dt = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                int empid = Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString());
                DateTime year = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text));
                int yeardate = year.Year;
                if (bid == 0)
                {
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);

                    dt = misgrdobj.GetYear2DateMISNew(0, empid, did);
                }
                else
                {
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);

                    dt = misgrdobj.GetYear2DateMISNew(bid, empid, 0);
                }

                if (dt.Rows.Count > 0)
                {
                    //var sum_incomey2d = dt.Compute("sum(Incomey2d)", "");
                    //var sum_expensesy2d = dt.Compute("sum(Expensesy2d)", "");
                    //var sum_retentiony2d = dt.Compute("sum(Rtny2d)", "");
                    //var sum_Y2DPer = dt.Compute("sum(Y2DPer)", "");
                    //var sum_incomemonth = dt.Compute("sum(Incomemonth)", "");
                    //var sum_expensesmonth = dt.Compute("sum(Expensesmonth)", "");
                    //var sum_rtnmonth = dt.Compute("sum(Rtnmonth)", "");
                    //var sum_MonPer = dt.Compute("sum(MonPer)", "");
                    DataRow dr1 = dt.NewRow();
                    //dt.Rows.Add(dr1);
                    //double asas = Convert.ToDouble(

                    for (int k = 0; k <= dt.Rows.Count - 1; k++)
                    {
                        temp2 = temp2 + Convert.ToDouble(dt.Rows[k]["Incomey2d"].ToString());
                    }
                    dr1[0] = temp2.ToString("#,0.00");
                    temp2 = 0;
                    for (int k = 0; k <= dt.Rows.Count - 1; k++)
                    {
                        temp2 = temp2 + Convert.ToDouble(dt.Rows[k]["Expensesy2d"].ToString());
                    }
                    //temp2 = Convert.ToDouble(dt.Compute("sum(Expensesy2d)", ""));
                    dr1[1] = temp2.ToString("#,0.00");
                    temp2 = 0;
                    for (int k = 0; k <= dt.Rows.Count - 1; k++)
                    {
                        temp2 = temp2 + Convert.ToDouble(dt.Rows[k]["Rtny2d"].ToString());
                    }
                    //temp2 = Convert.ToDouble(dt.Compute("sum(Rtny2d)", ""));
                    dr1[2] = temp2.ToString("#,0.00");
                    //dr1[3] = sum_Y2DPer;
                    dr1[4] = "Total";
                    temp2 = 0;
                    for (int k = 0; k <= dt.Rows.Count - 1; k++)
                    {
                        temp2 = temp2 + Convert.ToDouble(dt.Rows[k]["Incomemonth"].ToString());
                    }

                    //temp2 = Convert.ToDouble(dt.Compute("sum(Incomemonth)", ""));
                    dr1[5] = temp2.ToString("#,0.00");
                    temp2 = 0;
                    for (int k = 0; k <= dt.Rows.Count - 1; k++)
                    {
                        temp2 = temp2 + Convert.ToDouble(dt.Rows[k]["Expensesmonth"].ToString());
                    }

                    //temp2 = Convert.ToDouble(dt.Compute("sum(Expensesmonth)", ""));
                    dr1[6] = temp2.ToString("#,0.00");
                    temp2 = 0;
                    for (int k = 0; k <= dt.Rows.Count - 1; k++)
                    {
                        temp2 = temp2 + Convert.ToDouble(dt.Rows[k]["Rtnmonth"].ToString());
                    }

                    //temp2 = Convert.ToDouble(dt.Compute("sum(MonPer)", ""));
                    dr1[7] = temp2.ToString("#,0.00");
                    //dr1[8] = sum_MonPer;
                    dt.Rows.Add(dr1);
                    grd_YearMIS.Visible = true;
                    grd_YearMIS.DataSource = dt;
                    grd_YearMIS.DataBind();
                    signup.Visible = true;
                    grd_YearMIS.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }


        protected void grd_shipperwise()
        {
            try
            {
                DataTable Dtshipdtls = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                cust = "SH";
                if (txt_agent.Text != "")
                {
                    int intcustid = Convert.ToInt32(hf_agent1.Value);
                    Dtshipdtls = miscorobj.GetShipperWisewithname(bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, cust, intcustid, did);
                }
                else
                {
                    Dtshipdtls = miscorobj.GetShipperWisewithoutname(bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, cust, did);
                }

                if (ddl_graph1.SelectedItem.Text == "Graph")
                {
                    //DataTable dt = new DataTable();
                    DataTable dt_new = new DataTable();
                    //dt = (DataTable)Session["By Agent"];
                    DataView dv = Dtshipdtls.DefaultView;
                    dv.Sort = "retention desc";
                    DataTable sortedDT = dv.ToTable();
                    dt_new = SelectTopDataRow(sortedDT, 11);
                    div_op_char.Visible = true;
                    chartoperProfit.Visible = true;
                    string[] x = new string[dt_new.Rows.Count];
                    decimal[] y = new decimal[dt_new.Rows.Count];
                    for (int count = 0; count < dt_new.Rows.Count; count++)
                    {
                        x[count] = dt_new.Rows[count]["shipper"].ToString();
                        y[count] = Convert.ToDecimal(dt_new.Rows[count]["retention"].ToString());
                    }

                    chartoperProfit.ChartAreas[0].AxisX.Title = "Shipper";
                    chartoperProfit.ChartAreas[0].AxisY.Title = "Amount";

                    chartoperProfit.Series[0].Points.DataBindXY(x, y);
                    chartoperProfit.Series[0].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                    chartoperProfit.Series[0].LegendText = "Profit";
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.LabelStyle.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorTickMark.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisY.MajorGrid.Enabled = false;
                    grd_Shipper.Visible = false;
                    return;
                }

                if (bid == 0)
                {
                    /*  double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;

                      dtemptyfree.Columns.Add("branch");
                      dtemptyfree.Columns.Add("shipper");
                      dtemptyfree.Columns.Add("volume");
                      dtemptyfree.Columns.Add("cont20");
                      dtemptyfree.Columns.Add("cont40");
                      dtemptyfree.Columns.Add("income");
                      dtemptyfree.Columns.Add("expense");
                      dtemptyfree.Columns.Add("retention");
                      dtemptyfree.Columns.Add("branchid");
                      dtemptyfree.Columns.Add("shipperid");
                      DataRow dr = dtemptyfree.NewRow();
                      double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                      //dtemptyfree.Rows.Add();
                      for (int i = 0; i <= Dtshipdtls.Rows.Count - 1; i++)
                      {

                          dr = dtemptyfree.NewRow();
                          dtemptyfree.Rows.Add();
                          int count = dtemptyfree.Rows.Count - 1;
                          dtemptyfree.Rows[count]["branch"] = Dtshipdtls.Rows[i]["branch"].ToString();
                          dtemptyfree.Rows[count]["shipper"] = Dtshipdtls.Rows[i]["shipper"].ToString();
                          temp2 = Convert.ToDouble(Dtshipdtls.Rows[i]["volume"].ToString());
                          dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                          //dtemptyfree.Rows[count]["volume"] = Dtshipdtls.Rows[i]["volume"].ToString();
                          totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                          dtemptyfree.Rows[count]["cont20"] = Dtshipdtls.Rows[i]["cont20"].ToString();
                          total20 = total20 + Convert.ToDouble(Dtshipdtls.Rows[i]["cont20"].ToString());
                          dtemptyfree.Rows[count]["cont40"] = Dtshipdtls.Rows[i]["cont40"].ToString();
                          total40 = total40 + Convert.ToDouble(Dtshipdtls.Rows[i]["cont40"].ToString());
                          //dtemptyfree.Rows[count]["income"] = Dtshipdtls.Rows[i]["income"].ToString();
                          //totalincome = totalincome + Convert.ToDouble(Dtshipdtls.Rows[i]["income"].ToString());
                          //dtemptyfree.Rows[count]["expense"] = Dtshipdtls.Rows[i]["expense"].ToString();
                          //totalexpense = totalexpense + Convert.ToDouble(Dtshipdtls.Rows[i]["expense"].ToString());
                          //dtemptyfree.Rows[count]["retention"] = Dtshipdtls.Rows[i]["retention"].ToString();
                          //totalretention = totalretention + Convert.ToDouble(Dtshipdtls.Rows[i]["retention"].ToString());

                          temp2 = Convert.ToDouble(Dtshipdtls.Rows[i]["income"].ToString());
                          dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                          totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                          temp2 = Convert.ToDouble(Dtshipdtls.Rows[i]["expense"].ToString());
                          dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                          totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                          temp2 = Convert.ToDouble(Dtshipdtls.Rows[i]["retention"].ToString());
                          dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                          totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                          dtemptyfree.Rows[count]["branchid"] = Dtshipdtls.Rows[i]["branchid"].ToString();
                          dtemptyfree.Rows[count]["shipperid"] = Dtshipdtls.Rows[i]["shipperid"].ToString();
                          //dtemptyfree.Rows.Add(dr);
                      }


                      dr = dtemptyfree.NewRow();
                      dr["shipper"] = "Total";
                      dr["volume"] = totalvou.ToString("#,0.00");
                      dr["cont20"] = total20;
                      dr["cont40"] = total40;
                      dr["income"] = totalincome.ToString("#,0.00");
                      dr["expense"] = totalexpense.ToString("#,0.00");
                      dr["retention"] = totalretention.ToString("#,0.00");

                      dtemptyfree.Rows.Add(dr);
                      grd_Shipper.Columns[0].Visible = true;
                      signup.Visible = true;
                      grd_Shipper.Visible = true;
                      grd_Shipper.DataSource = dtemptyfree;
                      grd_Shipper.DataBind();
                      signup.Visible = true;
                      grd_Shipper.Visible = true;
                  }
                  else
                  {
                      double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;

                      dtemptyfree.Columns.Add("branch");
                      dtemptyfree.Columns.Add("shipper");
                      dtemptyfree.Columns.Add("volume");
                      dtemptyfree.Columns.Add("cont20");
                      dtemptyfree.Columns.Add("cont40");
                      dtemptyfree.Columns.Add("income");
                      dtemptyfree.Columns.Add("expense");
                      dtemptyfree.Columns.Add("retention");
                      dtemptyfree.Columns.Add("branchid");
                      dtemptyfree.Columns.Add("shipperid");
                      DataRow dr = dtemptyfree.NewRow();
                      double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                      //dtemptyfree.Rows.Add();
                      for (int i = 0; i <= Dtshipdtls.Rows.Count - 1; i++)
                      {

                          dr = dtemptyfree.NewRow();
                          dtemptyfree.Rows.Add();
                          int count = dtemptyfree.Rows.Count - 1;
                          dtemptyfree.Rows[count]["branch"] = Dtshipdtls.Rows[i]["branch"].ToString();
                          dtemptyfree.Rows[count]["shipper"] = Dtshipdtls.Rows[i]["shipper"].ToString();
                          temp2 = Convert.ToDouble(Dtshipdtls.Rows[i]["volume"].ToString());
                          dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                          //dtemptyfree.Rows[count]["volume"] = Dtshipdtls.Rows[i]["volume"].ToString();
                          totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                          dtemptyfree.Rows[count]["cont20"] = Dtshipdtls.Rows[i]["cont20"].ToString();
                          total20 = total20 + Convert.ToDouble(Dtshipdtls.Rows[i]["cont20"].ToString());
                          dtemptyfree.Rows[count]["cont40"] = Dtshipdtls.Rows[i]["cont40"].ToString();
                          total40 = total40 + Convert.ToDouble(Dtshipdtls.Rows[i]["cont40"].ToString());
                          //dtemptyfree.Rows[count]["income"] = Dtshipdtls.Rows[i]["income"].ToString();
                          //totalincome = totalincome + Convert.ToDouble(Dtshipdtls.Rows[i]["income"].ToString());
                          //dtemptyfree.Rows[count]["expense"] = Dtshipdtls.Rows[i]["expense"].ToString();
                          //totalexpense = totalexpense + Convert.ToDouble(Dtshipdtls.Rows[i]["expense"].ToString());
                          //dtemptyfree.Rows[count]["retention"] = Dtshipdtls.Rows[i]["retention"].ToString();
                          //totalretention = totalretention + Convert.ToDouble(Dtshipdtls.Rows[i]["retention"].ToString());
                          temp2 = Convert.ToDouble(Dtshipdtls.Rows[i]["income"].ToString());
                          dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                          totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                          temp2 = Convert.ToDouble(Dtshipdtls.Rows[i]["expense"].ToString());
                          dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                          totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                          temp2 = Convert.ToDouble(Dtshipdtls.Rows[i]["retention"].ToString());
                          dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                          totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                          dtemptyfree.Rows[count]["branchid"] = Dtshipdtls.Rows[i]["branchid"].ToString();
                          dtemptyfree.Rows[count]["shipperid"] = Dtshipdtls.Rows[i]["shipperid"].ToString();
                          //dtemptyfree.Rows.Add(dr);
                      }


                      dr = dtemptyfree.NewRow();
                      dr["shipper"] = "Total";
                      dr["volume"] = totalvou.ToString("#,0.00");
                      dr["cont20"] = total20;
                      dr["cont40"] = total40;
                      dr["income"] = totalincome.ToString("#,0.00");
                      dr["expense"] = totalexpense.ToString("#,0.00");
                      dr["retention"] = totalretention.ToString("#,0.00");

                      dtemptyfree.Rows.Add(dr);
                      */

                    grd_Shipper.DataSource = Dtshipdtls;
                    grd_Shipper.DataBind();
                    grd_Shipper.Columns[0].Visible = false;
                    signup.Visible = true;
                    grd_Shipper.Visible = true;
                }

            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Top50shiporconsignee()
        {
            try
            {
                DataTable dt_ShipDetails = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                DataSet ds = new DataSet();
                int empid;
                if (bid != 0)
                {
                    empid = Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString());
                    ds = costtempobj.SelTop50ShipperConsignee4Branch(empid, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));

                    dt_ShipDetails = ds.Tables[0];
                    dtnew = ds.Tables[1];
                    DataRow dr = dtemptyfree.NewRow();
                    if (dt_ShipDetails.Rows.Count > 1)
                    {

                        dtemptyfree.Columns.Add("Shipper");
                        dtemptyfree.Columns.Add("Revenue4Shipper");
                        dtemptyfree.Columns.Add("Consignee");
                        dtemptyfree.Columns.Add("Revenue4Consignee");

                        for (int j = 0; j <= dt_ShipDetails.Rows.Count - 1; j++)
                        {

                            dr = dtemptyfree.NewRow();
                            dtemptyfree.Rows.Add();
                            int count = dtemptyfree.Rows.Count - 1;
                            //dtemptyfree.Rows.Add();

                            dtemptyfree.Rows[count]["Shipper"] = dt_ShipDetails.Rows[j]["customername"];
                            temp2 = Convert.ToDouble(dt_ShipDetails.Rows[j]["retention"].ToString());
                            dtemptyfree.Rows[count]["Revenue4Shipper"] = temp2.ToString("#,0.00");
                            if (dtnew.Rows.Count > j)
                            {
                                dtemptyfree.Rows[count]["Consignee"] = dtnew.Rows[j]["customername"];
                                temp2 = Convert.ToDouble(dtnew.Rows[j]["retention"].ToString());
                                dtemptyfree.Rows[count]["Revenue4Consignee"] = temp2.ToString("#,0.00");
                                //dtemptyfree.Rows.Add(dr);
                            }
                            else
                            {
                                dtemptyfree.Rows[count]["Consignee"] = "";
                                dtemptyfree.Rows[count]["Revenue4Consignee"] = "";
                                //dtemptyfree.Rows.Add(dr);
                            }
                        }
                        Grd_shiperconsignee.DataSource = dtemptyfree;
                        Grd_shiperconsignee.DataBind();
                        signup.Visible = true;
                        Grd_shiperconsignee.Visible = true;
                    }
                }
                else
                {
                    empid = Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString());

                    ds = costtempobj.SelTop50ShipperConsignee(empid, did, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                    //ds = costtempobj.SelTop50ShipperConsignee4Branch(empid, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));

                    dt_ShipDetails = ds.Tables[0];
                    dtnew = ds.Tables[1];
                    DataRow dr = dtemptyfree.NewRow();
                    if (dt_ShipDetails.Rows.Count > 1)
                    {

                        dtemptyfree.Columns.Add("Shipper");
                        dtemptyfree.Columns.Add("Revenue4Shipper");
                        dtemptyfree.Columns.Add("Consignee");
                        dtemptyfree.Columns.Add("Revenue4Consignee");
                        //dtemptyfree.Rows.Add();
                        for (int j = 0; j <= dt_ShipDetails.Rows.Count - 1; j++)
                        {
                            if (j == 0)
                            {
                                dr = dtemptyfree.NewRow();
                                dr["Shipper"] = dt_ShipDetails.Rows[0]["divsname"].ToString();
                                dr["Revenue4Shipper"] = "";
                                dr["Consignee"] = "";
                                dr["Revenue4Consignee"] = "";
                                dtemptyfree.Rows.Add(dr);

                                //dtemptyfree.Rows.Add();
                            }
                            int count = dtemptyfree.Rows.Count - 1;
                            //dtemptyfree.Rows.Add();
                            dr = dtemptyfree.NewRow();
                            dtemptyfree.Rows[count]["Shipper"] = dt_ShipDetails.Rows[j]["customername"];
                            dtemptyfree.Rows[count]["Revenue4Shipper"] = dt_ShipDetails.Rows[j]["Column1"];
                            if (dtnew.Rows.Count > j)
                            {
                                dtemptyfree.Rows[count]["Consignee"] = dtnew.Rows[j]["customername"];
                                dtemptyfree.Rows[count]["Revenue4Consignee"] = dtnew.Rows[j]["Column1"];
                                dtemptyfree.Rows.Add(dr);
                            }
                            else
                            {
                                dtemptyfree.Rows[count]["Consignee"] = "";
                                dtemptyfree.Rows[count]["Revenue4Consignee"] = "";
                                dtemptyfree.Rows.Add(dr);
                            }
                        }
                        Grd_shiperconsignee.DataSource = dtemptyfree;
                        Grd_shiperconsignee.DataBind();
                        signup.Visible = true;
                        Grd_shiperconsignee.Visible = true;
                    }


                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void GrdNewShipmentDetails()
        {
            try
            {
                DataTable dt_ShipDetails = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                dt_ShipDetails = miscorobj.Getshipmentnew4cor(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);

                if (dt_ShipDetails.Rows.Count > 0)
                {
                    if (bid == 0)
                    {

                        double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                        dtemptyfree.Columns.Add("RowNumber");
                        dtemptyfree.Columns.Add("Branch");
                        dtemptyfree.Columns.Add("TrantypeFull");
                        dtemptyfree.Columns.Add("jobno");
                        dtemptyfree.Columns.Add("nomination");
                        dtemptyfree.Columns.Add("TypeJob");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        dtemptyfree.Columns.Add("branchid");


                        DataView dv_co = new DataView(dt_ShipDetails);
                        dtnew = dv_co.ToTable(true, "trantype");
                        dv_co = new DataView(dtnew);
                        dv_co.Sort = "trantype";
                        dtnew = dv_co.ToTable();
                        DataRow dr = dtemptyfree.NewRow();
                        for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                        {
                            double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                            DataTable dtLi = new DataTable();
                            DataView data1 = dt_ShipDetails.DefaultView;
                            data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                            dtLi = data1.ToTable();
                            // count1=dtLi.Rows.Count;
                            if (dtLi.Rows.Count > 0)
                            {

                                dr = dtemptyfree.NewRow();
                                dr["RowNumber"] = dtLi.Rows[0]["TrantypeFull"].ToString();
                                dr["Branch"] = "";
                                dr["TrantypeFull"] = "";
                                dr["jobno"] = "";
                                dr["nomination"] = "";
                                dr["TypeJob"] = "";
                                dr["volume"] = "";
                                dr["cont20"] = "";
                                dr["cont40"] = "";
                                dr["income"] = "";
                                dr["expense"] = "";
                                dr["retention"] = "";

                                dtemptyfree.Rows.Add(dr);

                                //dtemptyfree.Rows.Add();

                                for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                                {

                                    dr = dtemptyfree.NewRow();
                                    dtemptyfree.Rows.Add();
                                    int count = dtemptyfree.Rows.Count - 1;
                                    dtemptyfree.Rows[count]["RowNumber"] = dtLi.Rows[i]["RowNumber"].ToString();
                                    dtemptyfree.Rows[count]["Branch"] = dtLi.Rows[i]["Branch"].ToString();
                                    dtemptyfree.Rows[count]["TrantypeFull"] = dtLi.Rows[i]["TrantypeFull"].ToString();
                                    dtemptyfree.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                    dtemptyfree.Rows[count]["nomination"] = dtLi.Rows[i]["nomination"].ToString();
                                    dtemptyfree.Rows[count]["TypeJob"] = dtLi.Rows[i]["TypeJob"].ToString();
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                                    dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                                    totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                                    dtemptyfree.Rows[count]["cont20"] = dtLi.Rows[i]["cont20"].ToString();
                                    total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                    dtemptyfree.Rows[count]["cont40"] = dtLi.Rows[i]["cont40"].ToString();
                                    total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                    dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                                    totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                    dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                    totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                    dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                                    totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                    dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                    //dtemptyfree.Rows.Add(dr);
                                }


                                dr = dtemptyfree.NewRow();
                                dr["TypeJob"] = dtnew.Rows[j]["trantype"] + "-" + "Total";
                                dr["volume"] = totalvou;
                                dr["cont20"] = total20;
                                dr["cont40"] = total40;
                                dr["income"] = totalincome.ToString("#,0.00");
                                dr["expense"] = totalexpense.ToString("#,0.00");
                                dr["retention"] = totalretention.ToString("#,0.00");
                            }
                            dtemptyfree.Rows.Add(dr);
                            totalgrand40 += total40;
                            totalgrand20 += total20;
                            totalgrandvou += totalvou;
                            totalincomegrand += totalincome;
                            totalexpensegrand += totalexpense;
                            totalretentiongrand += totalretention;

                        }
                        dr = dtemptyfree.NewRow();
                        if (dt_ShipDetails.Rows.Count > 0)
                        {
                            dr["TypeJob"] = "Grand Total";
                            dr["volume"] = totalgrandvou.ToString("#,0.00");
                            dr["cont20"] = totalgrand20;
                            dr["cont40"] = totalgrand40;
                            dr["income"] = totalincomegrand.ToString("#,0.00");
                            dr["expense"] = totalexpensegrand.ToString("#,0.00");
                            dr["retention"] = totalretentiongrand.ToString("#,0.00");

                            dtemptyfree.Rows.Add(dr);
                            grd_Shipment.Columns[0].Visible = true;
                            grd_Shipment.Columns[1].Visible = true;
                            grd_Shipment.Visible = true;
                            grd_Shipment.DataSource = dtemptyfree;
                            grd_Shipment.DataBind();

                            signup.Visible = true;

                        }
                    }
                    else
                    {

                        double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                        dtemptyfree.Columns.Add("RowNumber");
                        dtemptyfree.Columns.Add("Branch");
                        dtemptyfree.Columns.Add("TrantypeFull");
                        dtemptyfree.Columns.Add("jobno");
                        dtemptyfree.Columns.Add("nomination");
                        dtemptyfree.Columns.Add("TypeJob");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        dtemptyfree.Columns.Add("branchid");


                        DataView dv_co = new DataView(dt_ShipDetails);
                        dtnew = dv_co.ToTable(true, "trantype");
                        dv_co = new DataView(dtnew);
                        dv_co.Sort = "trantype";
                        dtnew = dv_co.ToTable();
                        DataRow dr = dtemptyfree.NewRow();
                        for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                        {
                            double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                            DataTable dtLi = new DataTable();
                            DataView data1 = dt_ShipDetails.DefaultView;
                            data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                            dtLi = data1.ToTable();
                            // count1=dtLi.Rows.Count;
                            if (dtLi.Rows.Count > 0)
                            {

                                dr = dtemptyfree.NewRow();
                                //dr["RowNumber"] = dtLi.Rows[0]["TrantypeFull"].ToString();
                                dr["Branch"] = "";
                                dr["TrantypeFull"] = dtLi.Rows[0]["TrantypeFull"].ToString();
                                dr["jobno"] = "";
                                dr["nomination"] = "";
                                dr["TypeJob"] = "";
                                dr["volume"] = "";
                                dr["cont20"] = "";
                                dr["cont40"] = "";
                                dr["income"] = "";
                                dr["expense"] = "";
                                dr["retention"] = "";

                                dtemptyfree.Rows.Add(dr);

                                //dtemptyfree.Rows.Add();

                                for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                                {

                                    dr = dtemptyfree.NewRow();
                                    dtemptyfree.Rows.Add();
                                    int count = dtemptyfree.Rows.Count - 1;
                                    dtemptyfree.Rows[count]["RowNumber"] = dtLi.Rows[i]["RowNumber"].ToString();
                                    dtemptyfree.Rows[count]["Branch"] = dtLi.Rows[i]["Branch"].ToString();
                                    dtemptyfree.Rows[count]["TrantypeFull"] = dtLi.Rows[i]["trantype"].ToString();
                                    dtemptyfree.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                    dtemptyfree.Rows[count]["nomination"] = dtLi.Rows[i]["nomination"].ToString();
                                    dtemptyfree.Rows[count]["TypeJob"] = dtLi.Rows[i]["TypeJob"].ToString();
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                                    dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                                    totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());

                                    dtemptyfree.Rows[count]["cont20"] = dtLi.Rows[i]["cont20"].ToString();
                                    total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                    dtemptyfree.Rows[count]["cont40"] = dtLi.Rows[i]["cont40"].ToString();
                                    total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                    dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                                    totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                    dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                    totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                    dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                                    totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                    dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                    //dtemptyfree.Rows.Add(dr);
                                }


                                dr = dtemptyfree.NewRow();
                                dr["TypeJob"] = dtnew.Rows[j]["trantype"] + "-" + "Total";
                                dr["volume"] = totalvou;
                                dr["cont20"] = total20;
                                dr["cont40"] = total40;
                                dr["income"] = totalincome.ToString("#,0.00");
                                dr["expense"] = totalexpense.ToString("#,0.00");
                                dr["retention"] = totalretention.ToString("#,0.00");
                            }
                            dtemptyfree.Rows.Add(dr);
                            totalgrand40 += total40;
                            totalgrand20 += total20;
                            totalgrandvou += totalvou;
                            totalincomegrand += totalincome;
                            totalexpensegrand += totalexpense;
                            totalretentiongrand += totalretention;

                        }
                        dr = dtemptyfree.NewRow();
                        if (dt_ShipDetails.Rows.Count > 0)
                        {
                            dr["TypeJob"] = "Grand Total";
                            dr["volume"] = totalgrandvou.ToString("#,0.00");
                            dr["cont20"] = totalgrand20;
                            dr["cont40"] = totalgrand40;
                            dr["income"] = totalincomegrand.ToString("#,0.00");
                            dr["expense"] = totalexpensegrand.ToString("#,0.00");
                            dr["retention"] = totalretentiongrand.ToString("#,0.00");
                            dtemptyfree.Rows.Add(dr);
                            grd_Shipment.DataSource = dtemptyfree;
                            grd_Shipment.DataBind();
                            grd_Shipment.Columns[0].Visible = false;
                            grd_Shipment.Columns[1].Visible = false;
                            signup.Visible = true;
                            grd_Shipment.Visible = true;
                        }
                    }
                }
                else
                {
                    grd_Shipment.DataSource = Utility.Fn_GetEmptyDataTable();
                    grd_Shipment.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void grd_Sectorwise()
        {
            try
            {
                DataTable dt_Sector = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());

                dt_Sector = miscorobj.getSectorwiseForCorp(did, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));

                if (dt_Sector.Rows.Count > 0)
                {

                    dtemptyfree.Columns.Add("sectorname");
                    dtemptyfree.Columns.Add("PoL");
                    dtemptyfree.Columns.Add("volume");
                    dtemptyfree.Columns.Add("cont20");
                    dtemptyfree.Columns.Add("cont40");

                    dtemptyfree.Columns.Add("retention");

                    DataView dv_co = new DataView(dt_Sector);
                    dtnew = dv_co.ToTable(true, "sectorid");
                    dv_co = new DataView(dtnew);
                    dv_co.Sort = "sectorid";
                    dtnew = dv_co.ToTable();
                    DataRow dr = dtemptyfree.NewRow();
                    for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        DataTable dtLi = new DataTable();
                        DataView data1 = dt_Sector.DefaultView;
                        data1.RowFilter = "sectorid = '" + dtnew.Rows[j]["sectorid"] + "' ";
                        dtLi = data1.ToTable();
                        // count1=dtLi.Rows.Count;
                        if (dtLi.Rows.Count > 0)
                        {
                            if (dr.RowState == 0)
                            {
                                dtemptyfree.Rows.Add();
                            }
                            dr = dtemptyfree.NewRow();
                            dr["sectorname"] = dtLi.Rows[0]["sectorname"].ToString();
                            dr["PoL"] = "";
                            dr["volume"] = "";
                            dr["cont20"] = "";
                            dr["cont40"] = "";

                            dr["retention"] = "";

                            dtemptyfree.Rows.Add(dr);



                            for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                            {

                                dr = dtemptyfree.NewRow();
                                dtemptyfree.Rows.Add();
                                int count = dtemptyfree.Rows.Count - 1;

                                dtemptyfree.Rows[count]["sectorname"] = "";
                                dtemptyfree.Rows[count]["PoL"] = dtLi.Rows[i]["PoL"].ToString();
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                                dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                                totalvou = totalvou + Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                                dtemptyfree.Rows[count]["cont20"] = dtLi.Rows[i]["cont20"].ToString();
                                total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                dtemptyfree.Rows[count]["cont40"] = dtLi.Rows[i]["cont40"].ToString();
                                total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                                totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());

                                //dtemptyfree.Rows.Add(dr);
                            }


                            dr = dtemptyfree.NewRow();
                            dr["PoL"] = "Total";
                            dr["volume"] = totalvou.ToString("#,0.00"); ;
                            dr["cont20"] = total20;
                            dr["cont40"] = total40;

                            dr["retention"] = totalretention.ToString("#,0.00");
                            dtemptyfree.Rows.Add(dr);
                        }

                        totalgrandvou += totalvou;
                        totalgrand20 += total20;
                        totalgrand40 += total40;

                        totalretentiongrand += totalretention;

                    }
                    dr = dtemptyfree.NewRow();
                    if (dt_Sector.Rows.Count > 0)
                    {
                        dr["PoL"] = "Grand Total";
                        dr["volume"] = totalgrandvou.ToString("#,0.00");
                        dr["cont20"] = totalgrand20;
                        dr["cont40"] = totalgrand40;

                        dr["retention"] = totalretentiongrand.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);
                        Grd_sectorwise.DataSource = dtemptyfree;
                        Grd_sectorwise.DataBind();
                        signup.Visible = true;
                        Grd_sectorwise.Visible = true;
                    }
                }
                else
                {
                    Grd_sectorwise.DataSource = Utility.Fn_GetEmptyDataTable();
                    Grd_sectorwise.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void grd_sales()
        {
            try
            {
                DataTable dt_Sales = new DataTable();
                DataTable dtnew = new DataTable();
                DataTable dtemptyfree = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                if (txt_agent.Text != "")
                {
                    int empid = Convert.ToInt32(hf_agent1.Value);
                    dt_Sales = miscorobj.GetSaleswisewithname(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, did);
                }
                else
                {
                    dt_Sales = miscorobj.GetSaleswisewithoutname(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }
                if (dt_Sales.Rows.Count > 0)
                {
                    DataRow dr = dtemptyfree.NewRow();
                    if (bid == 0)
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        dtemptyfree.Columns.Add("branch");
                        dtemptyfree.Columns.Add("person");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        dtemptyfree.Columns.Add("salesid");
                        dtemptyfree.Columns.Add("branchid");

                        //dtemptyfree.Rows.Add();

                        for (int i = 0; i <= dt_Sales.Rows.Count - 1; i++)
                        {

                            dr = dtemptyfree.NewRow();
                            dtemptyfree.Rows.Add();
                            int count = dtemptyfree.Rows.Count - 1;
                            dtemptyfree.Rows[count]["branch"] = dt_Sales.Rows[i]["branch"].ToString();
                            dtemptyfree.Rows[count]["person"] = dt_Sales.Rows[i]["person"].ToString();
                            temp2 = Convert.ToDouble(dt_Sales.Rows[i]["volume"].ToString());

                            dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                            totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                            dtemptyfree.Rows[count]["cont20"] = dt_Sales.Rows[i]["cont20"].ToString();
                            total20 = total20 + Convert.ToDouble(dt_Sales.Rows[i]["cont20"].ToString());
                            dtemptyfree.Rows[count]["cont40"] = dt_Sales.Rows[i]["cont40"].ToString();
                            total40 = total40 + Convert.ToDouble(dt_Sales.Rows[i]["cont40"].ToString());
                            temp2 = Convert.ToDouble(dt_Sales.Rows[i]["income"].ToString());
                            dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                            totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                            temp2 = Convert.ToDouble(dt_Sales.Rows[i]["expense"].ToString());
                            dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");
                            totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                            temp2 = Convert.ToDouble(dt_Sales.Rows[i]["retention"].ToString());
                            dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");
                            totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                            dtemptyfree.Rows[count]["salesid"] = dt_Sales.Rows[i]["salesid"].ToString();
                            dtemptyfree.Rows[count]["branchid"] = dt_Sales.Rows[i]["branchid"].ToString();
                            //dtemptyfree.Rows.Add(dr);
                        }


                        dr = dtemptyfree.NewRow();
                        dr["person"] = "Total";
                        dr["volume"] = totalvou.ToString("#,0.00");
                        dr["cont20"] = total20;
                        dr["cont40"] = total40;
                        dr["income"] = totalincome.ToString("#,0.00");
                        dr["expense"] = totalexpense.ToString("#,0.00");
                        dr["retention"] = totalretention.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);
                        grd_salesperson.Columns[0].Visible = true;
                        grd_salesperson.Visible = true;
                        grd_salesperson.DataSource = dtemptyfree;
                        grd_salesperson.DataBind();

                        signup.Visible = true;

                    }
                    else
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        dtemptyfree.Columns.Add("branch");
                        dtemptyfree.Columns.Add("person");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        dtemptyfree.Columns.Add("salesid");
                        dtemptyfree.Columns.Add("branchid");


                        for (int i = 0; i <= dt_Sales.Rows.Count - 1; i++)
                        {

                            dr = dtemptyfree.NewRow();
                            dtemptyfree.Rows.Add();
                            int count = dtemptyfree.Rows.Count - 1;
                            dtemptyfree.Rows[count]["branch"] = dt_Sales.Rows[i]["branch"].ToString();
                            dtemptyfree.Rows[count]["person"] = dt_Sales.Rows[i]["person"].ToString();
                            temp2 = Convert.ToDouble(dt_Sales.Rows[i]["volume"].ToString());

                            dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                            totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                            dtemptyfree.Rows[count]["cont20"] = dt_Sales.Rows[i]["cont20"].ToString();
                            total20 = total20 + Convert.ToDouble(dt_Sales.Rows[i]["cont20"].ToString());
                            dtemptyfree.Rows[count]["cont40"] = dt_Sales.Rows[i]["cont40"].ToString();
                            total40 = total40 + Convert.ToDouble(dt_Sales.Rows[i]["cont40"].ToString());
                            temp2 = Convert.ToDouble(dt_Sales.Rows[i]["income"].ToString());
                            dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                            totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                            temp2 = Convert.ToDouble(dt_Sales.Rows[i]["expense"].ToString());
                            dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");
                            totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                            temp2 = Convert.ToDouble(dt_Sales.Rows[i]["retention"].ToString());
                            dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");
                            totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                            dtemptyfree.Rows[count]["salesid"] = dt_Sales.Rows[i]["salesid"].ToString();
                            dtemptyfree.Rows[count]["branchid"] = dt_Sales.Rows[i]["branchid"].ToString();
                            //dtemptyfree.Rows.Add(dr);
                        }


                        dr = dtemptyfree.NewRow();
                        dr["person"] = "Total";
                        dr["volume"] = totalvou.ToString("#,0.00");
                        dr["cont20"] = total20;
                        dr["cont40"] = total40;
                        dr["income"] = totalincome.ToString("#,0.00");
                        dr["expense"] = totalexpense.ToString("#,0.00");
                        dr["retention"] = totalretention.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);
                        grd_salesperson.DataSource = dtemptyfree;
                        grd_salesperson.DataBind();
                        grd_salesperson.Columns[0].Visible = false;
                        signup.Visible = true;
                        grd_salesperson.Visible = true;
                    }
                }
                else
                {
                    grd_salesperson.DataSource = Utility.Fn_GetEmptyDataTable();
                    grd_salesperson.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void grdQuotation()
        {
            try
            {
                DataTable dt_Quotation = new DataTable();
                DataTable dtnew = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                if (txt_agent.Text != "")
                {
                    int intcustid = Convert.ToInt32(hf_agent1.Value);
                    dt_Quotation = miscorobj.GetQuotCustomernew(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), "F", intcustid, did);
                }
                else
                {
                    dt_Quotation = miscorobj.GetQuotCustomer(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), "F", did);
                }
                if (dt_Quotation.Rows.Count > 0)
                {
                    if (bid == 0)
                    {

                        double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                        DataTable dtemptyfree = new DataTable();
                        dtemptyfree.Columns.Add("Branch");
                        dtemptyfree.Columns.Add("trantype");
                        dtemptyfree.Columns.Add("jobno");
                        dtemptyfree.Columns.Add("nomination");
                        dtemptyfree.Columns.Add("quotcustomer");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        //dtemptyfree.Columns.Add("polid");
                        dtemptyfree.Columns.Add("branchid");

                        DataView dv_co = new DataView(dt_Quotation);
                        dtnew = dv_co.ToTable(true, "trantype");
                        dv_co = new DataView(dtnew);
                        dv_co.Sort = "trantype";
                        dtnew = dv_co.ToTable();
                        DataRow dr = dtemptyfree.NewRow();
                        for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                        {
                            double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                            DataTable dtLi = new DataTable();
                            DataView data1 = dt_Quotation.DefaultView;
                            data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                            dtLi = data1.ToTable();
                            // count1=dtLi.Rows.Count;
                            if (dtLi.Rows.Count > 0)
                            {

                                dr = dtemptyfree.NewRow();
                                dr["Branch"] = dtLi.Rows[0]["TranTypeFull"].ToString();
                                dr["trantype"] = "";
                                dr["jobno"] = "";
                                dr["nomination"] = "";
                                dr["quotcustomer"] = "";
                                dr["volume"] = "";
                                dr["cont20"] = "";
                                dr["cont40"] = "";
                                dr["income"] = "";
                                dr["expense"] = "";
                                dr["retention"] = "";

                                dtemptyfree.Rows.Add(dr);

                                //dtemptyfree.Rows.Add();

                                for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                                {

                                    dr = dtemptyfree.NewRow();
                                    dtemptyfree.Rows.Add();
                                    int count = dtemptyfree.Rows.Count - 1;
                                    dtemptyfree.Rows[count]["Branch"] = dtLi.Rows[i]["Branch"].ToString();
                                    dtemptyfree.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                                    dtemptyfree.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                    dtemptyfree.Rows[count]["nomination"] = dtLi.Rows[i]["nomination"].ToString();
                                    dtemptyfree.Rows[count]["quotcustomer"] = dtLi.Rows[i]["quotcustomer"].ToString();
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());

                                    dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                                    totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                                    dtemptyfree.Rows[count]["cont20"] = dtLi.Rows[i]["cont20"].ToString();
                                    total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                    dtemptyfree.Rows[count]["cont40"] = dtLi.Rows[i]["cont40"].ToString();
                                    total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                    dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");

                                    totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                    dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                    totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                    dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                                    totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                    dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                    //dtemptyfree.Rows.Add(dr);
                                }


                                dr = dtemptyfree.NewRow();
                                dr["quotcustomer"] = dtnew.Rows[j]["trantype"] + "-" + "Total";
                                dr["volume"] = totalvou.ToString("#,0.00");
                                dr["cont20"] = total20;
                                dr["cont40"] = total40;
                                dr["income"] = totalincome.ToString("#,0.00");
                                dr["expense"] = totalexpense.ToString("#,0.00");
                                dr["retention"] = totalretention.ToString("#,0.00");
                            }
                            dtemptyfree.Rows.Add(dr);
                            totalgrand40 += total40;
                            totalgrand20 += total20;
                            totalgrandvou += totalvou;
                            totalincomegrand += totalincome;
                            totalexpensegrand += totalexpense;
                            totalretentiongrand += totalretention;

                        }
                        dr = dtemptyfree.NewRow();
                        if (dt_Quotation.Rows.Count > 0)
                        {
                            dr["quotcustomer"] = "Grand Total";
                            dr["volume"] = totalgrandvou.ToString("#,0.00");
                            dr["cont20"] = totalgrand20;
                            dr["cont40"] = totalgrand40;
                            dr["income"] = totalincomegrand.ToString("#,0.00");
                            dr["expense"] = totalexpensegrand.ToString("#,0.00");
                            dr["retention"] = totalretentiongrand.ToString("#,0.00");
                            dtemptyfree.Rows.Add(dr);
                            Grd_quotation.Columns[0].Visible = true;
                            Grd_quotation.Visible = true;
                            Grd_quotation.DataSource = dtemptyfree;
                            Grd_quotation.DataBind();

                            signup.Visible = true;
                        }
                    }
                    else
                    {

                        double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                        DataTable dtemptyfree = new DataTable();
                        dtemptyfree.Columns.Add("Branch");
                        dtemptyfree.Columns.Add("trantype");
                        dtemptyfree.Columns.Add("jobno");
                        dtemptyfree.Columns.Add("nomination");
                        dtemptyfree.Columns.Add("quotcustomer");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        //dtemptyfree.Columns.Add("polid");
                        dtemptyfree.Columns.Add("branchid");
                        DataView dv_co = new DataView(dt_Quotation);
                        dtnew = dv_co.ToTable(true, "trantype");
                        dv_co = new DataView(dtnew);
                        dv_co.Sort = "trantype";
                        dtnew = dv_co.ToTable();
                        DataRow dr = dtemptyfree.NewRow();
                        for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                        {
                            double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                            DataTable dtLi = new DataTable();
                            DataView data1 = dt_Quotation.DefaultView;
                            data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                            dtLi = data1.ToTable();
                            // count1=dtLi.Rows.Count;
                            if (dtLi.Rows.Count > 0)
                            {

                                dr = dtemptyfree.NewRow();
                                dr["Branch"] = "";
                                dr["trantype"] = dtLi.Rows[0]["TranTypeFull"].ToString();
                                dr["jobno"] = "";
                                dr["nomination"] = "";
                                dr["quotcustomer"] = "";
                                dr["volume"] = "";
                                dr["cont20"] = "";
                                dr["cont40"] = "";
                                dr["income"] = "";
                                dr["expense"] = "";
                                dr["retention"] = "";

                                dtemptyfree.Rows.Add(dr);



                                for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                                {

                                    dr = dtemptyfree.NewRow();
                                    dtemptyfree.Rows.Add();
                                    int count = dtemptyfree.Rows.Count - 1;
                                    dtemptyfree.Rows[count]["Branch"] = dtLi.Rows[i]["Branch"].ToString();
                                    dtemptyfree.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                                    dtemptyfree.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                    dtemptyfree.Rows[count]["nomination"] = dtLi.Rows[i]["nomination"].ToString();
                                    dtemptyfree.Rows[count]["quotcustomer"] = dtLi.Rows[i]["quotcustomer"].ToString();
                                    dtemptyfree.Rows[count]["volume"] = dtLi.Rows[i]["volume"].ToString();
                                    totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                                    dtemptyfree.Rows[count]["cont20"] = dtLi.Rows[i]["cont20"].ToString();
                                    total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                    dtemptyfree.Rows[count]["cont40"] = dtLi.Rows[i]["cont40"].ToString();
                                    total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                    dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");

                                    totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                    dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                    totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                    dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                                    totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                    dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                    //dtemptyfree.Rows.Add(dr);
                                }


                                dr = dtemptyfree.NewRow();
                                dr["quotcustomer"] = dtnew.Rows[j]["trantype"] + "-" + "Total";
                                dr["volume"] = totalvou;
                                dr["cont20"] = total20;
                                dr["cont40"] = total40;
                                dr["income"] = totalincome.ToString("#,0.00");
                                dr["expense"] = totalexpense.ToString("#,0.00");
                                dr["retention"] = totalretention.ToString("#,0.00");
                            }
                            dtemptyfree.Rows.Add(dr);
                            totalgrand40 += total40;
                            totalgrand20 += total20;
                            totalgrandvou += totalvou;
                            totalincomegrand += totalincome;
                            totalexpensegrand += totalexpense;
                            totalretentiongrand += totalretention;

                        }
                        dr = dtemptyfree.NewRow();
                        if (dt_Quotation.Rows.Count > 0)
                        {
                            dr["quotcustomer"] = "Grand Total";
                            dr["volume"] = totalgrandvou.ToString("#,0.00");
                            dr["cont20"] = totalgrand20;
                            dr["cont40"] = totalgrand40;
                            dr["income"] = totalincomegrand.ToString("#,0.00");
                            dr["expense"] = totalexpensegrand.ToString("#,0.00");
                            dr["retention"] = totalretentiongrand.ToString("#,0.00");
                            dtemptyfree.Rows.Add(dr);

                            Grd_quotation.DataSource = dtemptyfree;
                            Grd_quotation.DataBind();
                            Grd_quotation.Columns[0].Visible = false;
                            Grd_quotation.Visible = true;
                            signup.Visible = true;
                        }
                    }
                }
                else
                {
                    Grd_quotation.DataSource = Utility.Fn_GetEmptyDataTable();
                    Grd_quotation.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void grdpolfromshipment()
        {
            try
            {
                DataTable dt_pol = new DataTable();
                DataTable dtnew = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                if (txt_agent.Text != "")
                {
                    int intpol = Convert.ToInt32(hf_agent1.Value);
                    dt_pol = miscorobj.GetPOlwiseFilter4cor(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), intpol, did);
                }
                else
                {
                    dt_pol = miscorobj.GetPOlwise4cor(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }

                if (ddl_graph1.SelectedItem.Text == "Graph")
                {
                    //DataTable dt = new DataTable();
                    DataTable dt_new = new DataTable();
                    //dt = (DataTable)Session["By Agent"];
                    DataView dv = dt_pol.DefaultView;
                    dv.Sort = "retention desc";
                    DataTable sortedDT = dv.ToTable();
                    dt_new = SelectTopDataRow(sortedDT, 11);
                    div_op_char.Visible = true;
                    chartoperProfit.Visible = true;
                    string[] x = new string[dt_new.Rows.Count];
                    decimal[] y = new decimal[dt_new.Rows.Count];
                    for (int count = 0; count < dt_new.Rows.Count; count++)
                    {
                        x[count] = dt_new.Rows[count]["pol"].ToString();
                        y[count] = Convert.ToDecimal(dt_new.Rows[count]["retention"].ToString());
                    }

                    chartoperProfit.ChartAreas[0].AxisX.Title = "POL";
                    chartoperProfit.ChartAreas[0].AxisY.Title = "Amount";

                    chartoperProfit.Series[0].Points.DataBindXY(x, y);
                    chartoperProfit.Series[0].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                    chartoperProfit.Series[0].LegendText = "Profit";
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.LabelStyle.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorTickMark.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisY.MajorGrid.Enabled = false;
                    grd_POL.Visible = false;
                    return;
                }

                DataTable dtemptyfree = new DataTable();
                DataRow dr = dtemptyfree.NewRow();
                if (dt_pol.Rows.Count > 0)
                {
                    if (bid == 0)
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                        dtemptyfree.Columns.Add("Branch");
                        dtemptyfree.Columns.Add("pol");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        dtemptyfree.Columns.Add("polid");
                        dtemptyfree.Columns.Add("branchid");





                        for (int i = 0; i <= dt_pol.Rows.Count - 1; i++)
                        {

                            dr = dtemptyfree.NewRow();
                            dtemptyfree.Rows.Add();
                            int count = dtemptyfree.Rows.Count - 1;
                            dtemptyfree.Rows[count]["Branch"] = dt_pol.Rows[i]["Branch"].ToString();
                            dtemptyfree.Rows[count]["pol"] = dt_pol.Rows[i]["pol"].ToString();
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["volume"].ToString());
                            dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                            totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                            dtemptyfree.Rows[count]["cont20"] = dt_pol.Rows[i]["cont20"].ToString();
                            total20 = total20 + Convert.ToDouble(dt_pol.Rows[i]["cont20"].ToString());
                            dtemptyfree.Rows[count]["cont40"] = dt_pol.Rows[i]["cont40"].ToString();
                            total40 = total40 + Convert.ToDouble(dt_pol.Rows[i]["cont40"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["income"].ToString());
                            dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                            totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["expense"].ToString());
                            dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");
                            totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["retention"].ToString());
                            dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");
                            totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                            dtemptyfree.Rows[count]["polid"] = dt_pol.Rows[i]["polid"].ToString();
                            dtemptyfree.Rows[count]["branchid"] = dt_pol.Rows[i]["branchid"].ToString();
                            //dtemptyfree.Rows.Add(dr);
                        }


                        dr = dtemptyfree.NewRow();
                        dr["pol"] = "Total";
                        dr["volume"] = totalvou.ToString("#,0.00");
                        dr["cont20"] = total20;
                        dr["cont40"] = total40;
                        dr["income"] = totalincome.ToString("#,0.00");
                        dr["expense"] = totalexpense.ToString("#,0.00");
                        dr["retention"] = totalretention.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);
                        grd_POL.Visible = true;
                        grd_POL.Columns[0].Visible = true;
                        grd_POL.DataSource = dtemptyfree;

                        grd_POL.DataBind();

                        signup.Visible = true;
                        //grd_POL.Columns[0].Visible = true;
                        //grd_POL.Visible = true;
                        //grd_POL.Columns[0].Visible = true;
                    }
                    else
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                        dtemptyfree.Columns.Add("Branch");
                        dtemptyfree.Columns.Add("pol");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        dtemptyfree.Columns.Add("polid");
                        dtemptyfree.Columns.Add("branchid");
                        //DataRow dr1 = dtemptyfree.NewRow();




                        for (int i = 0; i <= dt_pol.Rows.Count - 1; i++)
                        {

                            dr = dtemptyfree.NewRow();
                            dtemptyfree.Rows.Add();
                            int count = dtemptyfree.Rows.Count - 1;
                            dtemptyfree.Rows[count]["Branch"] = dt_pol.Rows[i]["Branch"].ToString();
                            dtemptyfree.Rows[count]["pol"] = dt_pol.Rows[i]["pol"].ToString();
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["volume"].ToString());
                            dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                            totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                            dtemptyfree.Rows[count]["cont20"] = dt_pol.Rows[i]["cont20"].ToString();
                            total20 = total20 + Convert.ToDouble(dt_pol.Rows[i]["cont20"].ToString());
                            dtemptyfree.Rows[count]["cont40"] = dt_pol.Rows[i]["cont40"].ToString();
                            total40 = total40 + Convert.ToDouble(dt_pol.Rows[i]["cont40"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["income"].ToString());
                            dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                            totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["expense"].ToString());
                            dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");
                            totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["retention"].ToString());
                            dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");
                            totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                            dtemptyfree.Rows[count]["polid"] = dt_pol.Rows[i]["polid"].ToString();
                            dtemptyfree.Rows[count]["branchid"] = dt_pol.Rows[i]["branchid"].ToString();
                            //dtemptyfree.Rows.Add(dr);
                        }


                        dr = dtemptyfree.NewRow();
                        dr["pol"] = "Total";
                        dr["volume"] = totalvou.ToString("#,0.00");
                        dr["cont20"] = total20;
                        dr["cont40"] = total40;
                        dr["income"] = totalincome.ToString("#,0.00");
                        dr["expense"] = totalexpense.ToString("#,0.00");
                        dr["retention"] = totalretention.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);
                        grd_POL.DataSource = dtemptyfree;
                        grd_POL.DataBind();
                        grd_POL.Columns[0].Visible = false;
                        signup.Visible = true;
                        grd_POL.Visible = true;
                    }

                }
                else
                {
                    grd_POL.DataSource = Utility.Fn_GetEmptyDataTable();
                    grd_POL.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void grdpodfromshipment()
        {
            try
            {
                DataTable dt_pol = new DataTable();
                DataTable dtnew = new DataTable();

                int did = 0;
                string transtype = "";
                if (Session["LoginDivisionid"] != null)
                {
                    did = Convert.ToInt32(Session["LoginDivisionid"].ToString());
                }
                if (Session["StrTranType"] != null)
                {
                    transtype = Session["StrTranType"].ToString();
                }

                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                if (txt_agent.Text != "")
                {
                    int intpol = Convert.ToInt32(hf_agent1.Value);
                    dt_pol = miscorobj.GetPODwiseFilter4cor(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), intpol, did);
                }
                else
                {
                    dt_pol = miscorobj.GetPODwise4cor(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }
                DataTable dtemptyfree = new DataTable();
                DataRow dr = dtemptyfree.NewRow();
                if (dt_pol.Rows.Count > 0)
                {
                    if (bid == 0)
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                        dtemptyfree.Columns.Add("Branch");
                        dtemptyfree.Columns.Add("pod");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        dtemptyfree.Columns.Add("podid");
                        dtemptyfree.Columns.Add("branchid");





                        for (int i = 0; i <= dt_pol.Rows.Count - 1; i++)
                        {

                            dr = dtemptyfree.NewRow();
                            dtemptyfree.Rows.Add();
                            int count = dtemptyfree.Rows.Count - 1;
                            dtemptyfree.Rows[count]["Branch"] = dt_pol.Rows[i]["Branch"].ToString();
                            dtemptyfree.Rows[count]["pod"] = dt_pol.Rows[i]["pod"].ToString();
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["volume"].ToString());
                            dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");

                            totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                            //dtemptyfree.Rows[count]["volume"] = dt_pol.Rows[i]["volume"].ToString();
                            //totalvou = totalvou + Convert.ToDouble(dt_pol.Rows[i]["volume"].ToString());
                            dtemptyfree.Rows[count]["cont20"] = dt_pol.Rows[i]["cont20"].ToString();
                            total20 = total20 + Convert.ToDouble(dt_pol.Rows[i]["cont20"].ToString());
                            dtemptyfree.Rows[count]["cont40"] = dt_pol.Rows[i]["cont40"].ToString();
                            total40 = total40 + Convert.ToDouble(dt_pol.Rows[i]["cont40"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["income"].ToString());
                            dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                            totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["expense"].ToString());
                            dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");
                            totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["retention"].ToString());
                            dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");
                            totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                            dtemptyfree.Rows[count]["podid"] = dt_pol.Rows[i]["podid"].ToString();
                            dtemptyfree.Rows[count]["branchid"] = dt_pol.Rows[i]["branchid"].ToString();
                            //dtemptyfree.Rows.Add(dr);
                        }


                        dr = dtemptyfree.NewRow();
                        dr["pod"] = "Total";
                        dr["volume"] = totalvou.ToString("#,0.00");
                        dr["cont20"] = total20;
                        dr["cont40"] = total40;
                        dr["income"] = totalincome.ToString("#,0.00");
                        dr["expense"] = totalexpense.ToString("#,0.00");
                        dr["retention"] = totalretention.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);
                        grd_POD.Visible = true;
                        grd_POD.Columns[0].Visible = true;
                        grd_POD.DataSource = dtemptyfree;
                        grd_POD.DataBind();
                        signup.Visible = true;

                    }
                    else
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                        dtemptyfree.Columns.Add("Branch");
                        dtemptyfree.Columns.Add("pod");
                        dtemptyfree.Columns.Add("volume");
                        dtemptyfree.Columns.Add("cont20");
                        dtemptyfree.Columns.Add("cont40");
                        dtemptyfree.Columns.Add("income");
                        dtemptyfree.Columns.Add("expense");
                        dtemptyfree.Columns.Add("retention");
                        dtemptyfree.Columns.Add("podid");
                        dtemptyfree.Columns.Add("branchid");
                        //DataRow dr1 = dtemptyfree.NewRow();




                        for (int i = 0; i <= dt_pol.Rows.Count - 1; i++)
                        {

                            dr = dtemptyfree.NewRow();
                            dtemptyfree.Rows.Add();
                            int count = dtemptyfree.Rows.Count - 1;
                            dtemptyfree.Rows[count]["Branch"] = dt_pol.Rows[i]["Branch"].ToString();
                            dtemptyfree.Rows[count]["pod"] = dt_pol.Rows[i]["pod"].ToString();
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["volume"].ToString());
                            dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");

                            totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                            dtemptyfree.Rows[count]["cont20"] = dt_pol.Rows[i]["cont20"].ToString();
                            total20 = total20 + Convert.ToDouble(dt_pol.Rows[i]["cont20"].ToString());
                            dtemptyfree.Rows[count]["cont40"] = dt_pol.Rows[i]["cont40"].ToString();
                            total40 = total40 + Convert.ToDouble(dt_pol.Rows[i]["cont40"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["income"].ToString());
                            dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                            totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["expense"].ToString());
                            dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");
                            totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                            temp2 = Convert.ToDouble(dt_pol.Rows[i]["retention"].ToString());
                            dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");
                            totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                            dtemptyfree.Rows[count]["podid"] = dt_pol.Rows[i]["podid"].ToString();
                            dtemptyfree.Rows[count]["branchid"] = dt_pol.Rows[i]["branchid"].ToString();
                            //dtemptyfree.Rows.Add(dr);
                        }


                        dr = dtemptyfree.NewRow();
                        dr["pod"] = "Total";
                        dr["volume"] = totalvou.ToString("#,0.00");
                        dr["cont20"] = total20;
                        dr["cont40"] = total40;
                        dr["income"] = totalincome.ToString("#,0.00");
                        dr["expense"] = totalexpense.ToString("#,0.00");
                        dr["retention"] = totalretention.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);
                        grd_POD.DataSource = dtemptyfree;
                        grd_POD.DataBind();
                        grd_POD.Columns[0].Visible = false;
                        signup.Visible = true;
                        grd_POD.Visible = true;
                    }

                }
                else
                {
                    grd_POD.DataSource = Utility.Fn_GetEmptyDataTable();
                    grd_POD.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }

        }

        protected void grdOperatingProfitACGrd()
        {
            try
            {
                DataTable dt_OprProfit = new DataTable();
                DataTable dtnew = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                dt_OprProfit = miscorobj.GetOperatingProfitcorp(bid, did, transtype, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));

                if (dt_OprProfit.Rows.Count > 0)
                {
                    dt_OprProfit.Columns.Add(new DataColumn("Total"));
                    double dbl_Total = 0, dbl_Full_Total = 0;
                    for (int k = 0; k < dt_OprProfit.Rows.Count; k++)
                    {
                        dbl_Total = 0;
                        for (int R = 2; R < dt_OprProfit.Columns.Count; R++)
                        {
                            if (dt_OprProfit.Rows[k][R].ToString().Length > 0)
                                dbl_Total = dbl_Total + Convert.ToDouble(dt_OprProfit.Rows[k][R].ToString());
                        }
                        dt_OprProfit.Rows[k]["Total"] = dbl_Total;
                        dbl_Full_Total = dbl_Full_Total + dbl_Total;
                    }


                    DataRow dr_temp = dt_OprProfit.NewRow();
                    dr_temp[0] = "Total";


                    for (int R = 2; R < dt_OprProfit.Columns.Count - 1; R++)
                    {
                        dr_temp[R] = dt_OprProfit.Compute("sum(" + dt_OprProfit.Columns[R].Caption.ToString() + ")", "");
                    }

                    dr_temp["Total"] = dbl_Full_Total;
                    dt_OprProfit.Rows.Add(dr_temp);



                    grd_operProfit.DataSource = dt_OprProfit;
                    grd_operProfit.DataBind();
                    signup.Visible = true;
                    grd_operProfit.Visible = true;

                    //-------------------------------CHART--------------------------------------------     

                    if (ddl_graph1.SelectedItem.Text == "Data")
                    {
                        grd_operProfit.Visible = true;
                        piechart.Visible = false;
                        chartoperProfit1.Visible = false;
                        grd_operProfit.DataSource = dt_OprProfit;
                        grd_operProfit.DataBind();
                        chartoperProfit1.Visible = false;
                        ddl_graph2.Visible = false;
                    }
                    if (ddl_graph1.SelectedItem.Text == "Graph")
                    {
                        signup.Visible = false;
                        grd_operProfit.Visible = false;
                        ddl_graph2.Visible = true;
                        if (ddl_graph2.SelectedItem.Text == "Bar")
                        {
                            grd_operProfit.Visible = false;
                            piechart.Visible = false;
                            chartoperProfit1.Visible = true;

                            chartoperProfit1.Series.Clear();
                            chartoperProfit1.Legends.Clear();
                            DataTable obj_dtChat = new DataTable();
                            dt_OprProfit.Columns.RemoveAt(1);
                            dt_OprProfit.Columns.RemoveAt(dt_OprProfit.Columns.Count - 1);
                            dt_OprProfit.Rows.RemoveAt(dt_OprProfit.Rows.Count - 1);

                            //LINQ                        

                            var test0 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-AHD"
                                         select x).ToList();

                            var test1 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-BLR"
                                         select x).ToList();

                            var test2 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CBE"
                                         select x).ToList();

                            var test3 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CHE"
                                         select x).ToList();

                            var test4 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CO"
                                         select x).ToList();

                            var test5 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-COC"
                                         select x).ToList();

                            var test6 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-DEL"
                                         select x).ToList();

                            var test7 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-HYD"
                                         select x).ToList();

                            var test8 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-KOL"
                                         select x).ToList();

                            var test9 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-LUD"
                                         select x).ToList();

                            var test10 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-MUM"
                                          select x).ToList();

                            var test11 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TPR"
                                          select x).ToList();

                            var test12 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TUT"
                                          select x).ToList();

                            var test13 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TVM"
                                          select x).ToList();

                            var test14 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-VIS"
                                          select x).ToList();

                            if (test0.Count == 1)
                            {
                                test0[0][0] = "AHD";
                            }
                            if (test1.Count == 1)
                            {
                                test1[0][0] = "BLR";
                            }
                            if (test2.Count == 1)
                            {
                                test2[0][0] = "CBE";
                            }
                            if (test3.Count == 1)
                            {
                                test3[0][0] = "CHE";
                            }
                            if (test4.Count == 1)
                            {
                                test4[0][0] = "CO";
                            }
                            if (test5.Count == 1)
                            {
                                test5[0][0] = "COC";
                            }
                            if (test6.Count == 1)
                            {
                                test6[0][0] = "DEL";
                            }
                            if (test7.Count == 1)
                            {
                                test7[0][0] = "HYD";
                            }
                            if (test8.Count == 1)
                            {
                                test8[0][0] = "KOL";
                            }
                            if (test9.Count == 1)
                            {
                                test9[0][0] = "LUD";
                            }
                            if (test10.Count == 1)
                            {
                                test10[0][0] = "MUM";
                            }
                            if (test11.Count == 1)
                            {
                                test11[0][0] = "TPR";
                            }
                            if (test12.Count == 1)
                            {
                                test12[0][0] = "TUT";
                            }
                            if (test13.Count == 1)
                            {
                                test13[0][0] = "TVM";
                            }
                            if (test14.Count == 1)
                            {
                                test14[0][0] = "VIS";
                            }

                            dt_OprProfit.AcceptChanges();

                            obj_dtChat = dt_OprProfit;
                            var IEtable = (obj_dtChat as System.ComponentModel.IListSource).GetList();
                            chartoperProfit1.DataBindTable(IEtable, "Branch");
                            chartoperProfit1.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            chartoperProfit1.ChartAreas[0].AxisX.MajorGrid.Enabled = false;
                            chartoperProfit1.ChartAreas[0].AxisY.MajorGrid.Enabled = true;
                            chartoperProfit1.ChartAreas[0].AxisX.LabelStyle.Interval = 1;
                            chartoperProfit1.ChartAreas[0].AxisX.IsLabelAutoFit = true;
                            chartoperProfit1.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.LabelsAngleStep30;
                            chartoperProfit1.ChartAreas[0].AxisX.LabelStyle.Enabled = true;

                            chartoperProfit1.Series[0].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                            chartoperProfit1.Series[1].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                            chartoperProfit1.Series[2].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                            chartoperProfit1.Series[3].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                            chartoperProfit1.Series[4].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                            chartoperProfit1.Series[5].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                            chartoperProfit1.Series[6].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;

                        }
                        if (ddl_graph2.SelectedItem.Text == "Line")
                        {
                            grd_operProfit.Visible = false;
                            piechart.Visible = false;
                            chartoperProfit1.Visible = true;

                            chartoperProfit1.Series.Clear();
                            chartoperProfit1.Legends.Clear();
                            DataTable obj_dtChat = new DataTable();
                            dt_OprProfit.Columns.RemoveAt(1);
                            dt_OprProfit.Columns.RemoveAt(dt_OprProfit.Columns.Count - 1);
                            dt_OprProfit.Rows.RemoveAt(dt_OprProfit.Rows.Count - 1);

                            //LINQ                        

                            var test0 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-AHD"
                                         select x).ToList();

                            var test1 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-BLR"
                                         select x).ToList();

                            var test2 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CBE"
                                         select x).ToList();

                            var test3 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CHE"
                                         select x).ToList();

                            var test4 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CO"
                                         select x).ToList();

                            var test5 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-COC"
                                         select x).ToList();

                            var test6 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-DEL"
                                         select x).ToList();

                            var test7 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-HYD"
                                         select x).ToList();

                            var test8 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-KOL"
                                         select x).ToList();

                            var test9 = (from x in dt_OprProfit.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-LUD"
                                         select x).ToList();

                            var test10 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-MUM"
                                          select x).ToList();

                            var test11 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TPR"
                                          select x).ToList();

                            var test12 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TUT"
                                          select x).ToList();

                            var test13 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TVM"
                                          select x).ToList();

                            var test14 = (from x in dt_OprProfit.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-VIS"
                                          select x).ToList();

                            if (test0.Count == 1)
                            {
                                test0[0][0] = "AHD";
                            }
                            if (test1.Count == 1)
                            {
                                test1[0][0] = "BLR";
                            }
                            if (test2.Count == 1)
                            {
                                test2[0][0] = "CBE";
                            }
                            if (test3.Count == 1)
                            {
                                test3[0][0] = "CHE";
                            }
                            if (test4.Count == 1)
                            {
                                test4[0][0] = "CO";
                            }
                            if (test5.Count == 1)
                            {
                                test5[0][0] = "COC";
                            }
                            if (test6.Count == 1)
                            {
                                test6[0][0] = "DEL";
                            }
                            if (test7.Count == 1)
                            {
                                test7[0][0] = "HYD";
                            }
                            if (test8.Count == 1)
                            {
                                test8[0][0] = "KOL";
                            }
                            if (test9.Count == 1)
                            {
                                test9[0][0] = "LUD";
                            }
                            if (test10.Count == 1)
                            {
                                test10[0][0] = "MUM";
                            }
                            if (test11.Count == 1)
                            {
                                test11[0][0] = "TPR";
                            }
                            if (test12.Count == 1)
                            {
                                test12[0][0] = "TUT";
                            }
                            if (test13.Count == 1)
                            {
                                test13[0][0] = "TVM";
                            }
                            if (test14.Count == 1)
                            {
                                test14[0][0] = "VIS";
                            }

                            dt_OprProfit.AcceptChanges();

                            obj_dtChat = dt_OprProfit;
                            var IEtable = (obj_dtChat as System.ComponentModel.IListSource).GetList();
                            chartoperProfit1.DataBindTable(IEtable, "Branch");
                            chartoperProfit1.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            chartoperProfit1.ChartAreas[0].AxisX.MajorGrid.Enabled = false;
                            chartoperProfit1.ChartAreas[0].AxisY.MajorGrid.Enabled = true;
                            chartoperProfit1.ChartAreas[0].AxisX.LabelStyle.Interval = 1;
                            chartoperProfit1.ChartAreas[0].AxisX.IsLabelAutoFit = true;
                            chartoperProfit1.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.LabelsAngleStep30;
                            chartoperProfit1.ChartAreas[0].AxisX.LabelStyle.Enabled = true;

                            chartoperProfit1.Series[0].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                            chartoperProfit1.Series[1].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                            chartoperProfit1.Series[2].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                            chartoperProfit1.Series[3].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                            chartoperProfit1.Series[4].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                            chartoperProfit1.Series[5].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                            chartoperProfit1.Series[6].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                        }

                        if (ddl_graph2.SelectedItem.Text == "Pie")
                        {
                            DataTable freehandchart = new DataTable();
                            DataRow freeobj = freehandchart.NewRow();
                            freehandchart.Columns.Add("Branch");
                            freehandchart.Columns.Add("Total");

                            for (int i = 0; i < dt_OprProfit.Rows.Count - 1; i++)
                            {
                                freeobj = freehandchart.NewRow();
                                freeobj["Branch"] = dt_OprProfit.Rows[i]["Branch"].ToString();
                                freeobj["Total"] = Convert.ToDouble(dt_OprProfit.Rows[i]["Total"]);
                                freehandchart.Rows.Add(freeobj);
                            }

                            //LINQ                        

                            var test0 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-AHD"
                                         select x).ToList();

                            var test1 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-BLR"
                                         select x).ToList();

                            var test2 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CBE"
                                         select x).ToList();

                            var test3 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CHE"
                                         select x).ToList();

                            var test4 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-CO"
                                         select x).ToList();

                            var test5 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-COC"
                                         select x).ToList();

                            var test6 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-DEL"
                                         select x).ToList();

                            var test7 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-HYD"
                                         select x).ToList();

                            var test8 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-KOL"
                                         select x).ToList();

                            var test9 = (from x in freehandchart.AsEnumerable()
                                         where x.Field<string>("Branch") == "SL-LUD"
                                         select x).ToList();

                            var test10 = (from x in freehandchart.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-MUM"
                                          select x).ToList();

                            var test11 = (from x in freehandchart.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TPR"
                                          select x).ToList();

                            var test12 = (from x in freehandchart.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TUT"
                                          select x).ToList();

                            var test13 = (from x in freehandchart.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-TVM"
                                          select x).ToList();

                            var test14 = (from x in freehandchart.AsEnumerable()
                                          where x.Field<string>("Branch") == "SL-VIS"
                                          select x).ToList();

                            if (test0.Count == 1)
                            {
                                test0[0][0] = "AHD";
                            }
                            if (test1.Count == 1)
                            {
                                test1[0][0] = "BLR";
                            }
                            if (test2.Count == 1)
                            {
                                test2[0][0] = "CBE";
                            }
                            if (test3.Count == 1)
                            {
                                test3[0][0] = "CHE";
                            }
                            if (test4.Count == 1)
                            {
                                test4[0][0] = "CO";
                            }
                            if (test5.Count == 1)
                            {
                                test5[0][0] = "COC";
                            }
                            if (test6.Count == 1)
                            {
                                test6[0][0] = "DEL";
                            }
                            if (test7.Count == 1)
                            {
                                test7[0][0] = "HYD";
                            }
                            if (test8.Count == 1)
                            {
                                test8[0][0] = "KOL";
                            }
                            if (test9.Count == 1)
                            {
                                test9[0][0] = "LUD";
                            }
                            if (test10.Count == 1)
                            {
                                test10[0][0] = "MUM";
                            }
                            if (test11.Count == 1)
                            {
                                test11[0][0] = "TPR";
                            }
                            if (test12.Count == 1)
                            {
                                test12[0][0] = "TUT";
                            }
                            if (test13.Count == 1)
                            {
                                test13[0][0] = "TVM";
                            }
                            if (test14.Count == 1)
                            {
                                test14[0][0] = "VIS";
                            }

                            freehandchart.AcceptChanges();

                            grd_operProfit.Visible = false;
                            piechart.Visible = true;
                            chartoperProfit1.Visible = false;
                            piechart.Legends.Clear();


                            string[] k = new string[freehandchart.Rows.Count];
                            double[] y = new double[freehandchart.Rows.Count];
                            for (int i = 0; i < freehandchart.Rows.Count; i++)
                            {
                                k[i] = freehandchart.Rows[i][0].ToString();
                                y[i] = Convert.ToDouble(freehandchart.Rows[i][1]);
                            }
                            piechart.Series[0].Points.DataBindXY(k, y);
                            piechart.Series[0].ChartType = SeriesChartType.Pie;
                            piechart.Series[0].Label = "#VALX (#PERCENT)";
                            piechart.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            piechart.Series[0]["PieLabelStyle"] = "Disabled";

                        }
                    }
                }
                else
                {
                    grd_operProfit.DataSource = Utility.Fn_GetEmptyDataTable();
                    grd_operProfit.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void grd_FreehandVsNomination()
        {
            try
            {
                DataTable dt_freenomi = new DataTable();
                DataTable dtnew = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                double total1 = 0, total2 = 0, total3 = 0, total4 = 0, totalgrand1 = 0, totalgrand2 = 0, totalgrand3 = 0, totalgrand4 = 0;
                dt_freenomi = miscorobj.GetRetentionperunitforCorporate(bid, did, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype);

                if (dt_freenomi.Rows.Count > 0)
                {
                    DataTable dtemptyfree = new DataTable();
                    dtemptyfree.Columns.Add("product");
                    dtemptyfree.Columns.Add("unit");
                    dtemptyfree.Columns.Add("Fvolume");
                    dtemptyfree.Columns.Add("Fretn");
                    dtemptyfree.Columns.Add("FRtnPUnit");
                    dtemptyfree.Columns.Add("Nvolume");
                    dtemptyfree.Columns.Add("Nretn");
                    dtemptyfree.Columns.Add("NRtnPUnit");
                    DataRow dr = dtemptyfree.NewRow();

                    for (int i = 0; i <= dt_freenomi.Rows.Count - 1; i++)
                    {
                        total1 = 0; total2 = 0; total3 = 0; total4 = 0;
                        dr = dtemptyfree.NewRow();
                        dtemptyfree.Rows.Add();
                        dtemptyfree.Rows[i]["product"] = dt_freenomi.Rows[i]["product"].ToString();
                        dtemptyfree.Rows[i]["unit"] = dt_freenomi.Rows[i]["unit"].ToString();

                        if (dt_freenomi.Rows[i]["Fvolume"] != System.DBNull.Value)
                        {

                            temp2 = Convert.ToDouble(dt_freenomi.Rows[i]["Fvolume"].ToString());

                            dtemptyfree.Rows[i]["Fvolume"] = temp2.ToString("#,0.00");
                            total1 = total1 + Convert.ToDouble(dtemptyfree.Rows[i]["Fvolume"]);
                        }
                        else
                        {
                            dtemptyfree.Rows[i]["Fvolume"] = 0;

                        }

                        dtemptyfree.Rows[i]["Fretn"] = dt_freenomi.Rows[i]["Fretn"].ToString();
                        if (dt_freenomi.Rows[i]["Fretn"] != System.DBNull.Value)
                        {
                            temp2 = Convert.ToDouble(dt_freenomi.Rows[i]["Fretn"].ToString());
                            dtemptyfree.Rows[i]["Fretn"] = temp2.ToString("#,0.00");
                            total2 = total2 + Convert.ToDouble(dtemptyfree.Rows[i]["Fretn"]);
                        }
                        else
                        {
                            dtemptyfree.Rows[i]["Fretn"] = 0;
                        }
                        temp2 = Convert.ToDouble(dt_freenomi.Rows[i]["FRtnPUnit"].ToString());
                        dtemptyfree.Rows[i]["FRtnPUnit"] = temp2.ToString("#,0.00");

                        if (dt_freenomi.Rows[i]["Nvolume"] != System.DBNull.Value)
                        {
                            temp2 = Convert.ToDouble(dt_freenomi.Rows[i]["Nvolume"].ToString());
                            dtemptyfree.Rows[i]["Nvolume"] = temp2.ToString("#,0.00");
                            total3 = total3 + Convert.ToDouble(dtemptyfree.Rows[i]["Nvolume"]);
                        }
                        else
                        {
                            dtemptyfree.Rows[i]["Nvolume"] = 0;

                        }

                        if (dt_freenomi.Rows[i]["Nretn"] != System.DBNull.Value)
                        {
                            temp2 = Convert.ToDouble(dt_freenomi.Rows[i]["Nretn"].ToString());
                            dtemptyfree.Rows[i]["Nretn"] = temp2.ToString("#,0.00");
                            total4 = total4 + Convert.ToDouble(dtemptyfree.Rows[i]["Nretn"]);
                        }
                        else
                        {
                            dtemptyfree.Rows[i]["Nretn"] = 0;

                        }

                        temp2 = Convert.ToDouble(dt_freenomi.Rows[i]["NRtnPUnit"].ToString());
                        dtemptyfree.Rows[i]["NRtnPUnit"] = temp2.ToString("#,0.00");

                        //dtemptyfree.Rows.Add(dr);
                        totalgrand1 += total1;
                        totalgrand2 += total2;
                        totalgrand3 += total3;
                        totalgrand4 += total4;
                    }

                    dr = dtemptyfree.NewRow();
                    dr["unit"] = "Total";
                    dr["Fvolume"] = totalgrand1.ToString("#,0.00");
                    dr["Fretn"] = totalgrand2.ToString("#,0.00");
                    dr["Nvolume"] = totalgrand3.ToString("#,0.00");
                    dr["Nretn"] = totalgrand4.ToString("#,0.00");

                    dtemptyfree.Rows.Add(dr);

                    Grd_freeVsnomi.DataSource = dtemptyfree;
                    Grd_freeVsnomi.DataBind();
                    signup.Visible = true;
                    Grd_freeVsnomi.Visible = true;


                    //-------------------------------------------------Freehand & Nominiee CHART---------------------------------------------------//


                    if (ddl_graph1.SelectedItem.Text == "Data")
                    {
                        Grd_freeVsnomi.Visible = true;
                        piechart.Visible = false;
                        PODCHARTVIEW.Visible = false;
                        chartoperProfit.Visible = false;
                        Grd_freeVsnomi.DataSource = dtemptyfree;
                        Grd_freeVsnomi.DataBind();
                        chartoperProfit.Visible = false;
                        ddl_graph2.Visible = false;
                    }

                    if (ddl_graph1.SelectedItem.Text == "Graph")
                    {
                        Grd_freeVsnomi.Visible = false;
                        ddl_graph2.Visible = true;
                        if (ddl_graph2.SelectedItem.Text == "Bar")
                        {
                            DataTable freehandchart = new DataTable();
                            DataRow freeobj = freehandchart.NewRow();
                            freehandchart.Columns.Add("product");
                            freehandchart.Columns.Add("Fretn");
                            freehandchart.Columns.Add("Nretn");

                            for (int i = 0; i < dtemptyfree.Rows.Count - 1; i++)
                            {
                                freeobj = freehandchart.NewRow();
                                freeobj["product"] = dtemptyfree.Rows[i]["product"].ToString();
                                double s1 = Convert.ToDouble(dtemptyfree.Rows[i]["Fretn"]);
                                freeobj["Fretn"] = s1 / 1000;
                                double s2 = Convert.ToDouble(dtemptyfree.Rows[i]["Nretn"]);
                                freeobj["Nretn"] = s2 / 1000;
                                freehandchart.Rows.Add(freeobj);
                            }

                            Grd_freeVsnomi.Visible = false;
                            DivAllCahrtnew.Visible = false;
                            PODCHARTVIEW.Visible = true;

                            string[] x = new string[freehandchart.Rows.Count];
                            double[] y = new double[freehandchart.Rows.Count];
                            double[] z = new double[freehandchart.Rows.Count];
                            for (int i = 0; i < freehandchart.Rows.Count; i++)
                            {
                                x[i] = freehandchart.Rows[i][0].ToString();
                                y[i] = Convert.ToDouble(freehandchart.Rows[i][1]);
                                z[i] = Convert.ToDouble(freehandchart.Rows[i][2]);
                            }
                            //PODCHARTVIEW.Series[0].YValuesPerPoint = 2;
                            PODCHARTVIEW.Series[0].Points.DataBindXY(x, y);
                            PODCHARTVIEW.Series[1].Points.DataBindXY(x, z);
                            PODCHARTVIEW.Series[0].ChartType = SeriesChartType.Column;
                            PODCHARTVIEW.Series[1].ChartType = SeriesChartType.Column;
                            //PODCHARTVIEW.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            //PODCHARTVIEW.ChartAreas["ChartArea1"].Area3DStyle.Enable3D = true;
                            //PODCHARTVIEW.ChartAreas["ChartArea1"].AxisX.LabelStyle.Interval = 1;
                            //PODCHARTVIEW.ChartAreas["ChartArea1"].AxisX.MajorGrid.Interval = 1;
                            //PODCHARTVIEW.ChartAreas["ChartArea1"].AxisX.MajorTickMark.Interval = 1;
                            PODCHARTVIEW.ChartAreas[0].AxisX.IsLabelAutoFit = true;
                            PODCHARTVIEW.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.LabelsAngleStep30;
                            PODCHARTVIEW.ChartAreas[0].AxisX.LabelStyle.Enabled = true;
                        }

                        else if (ddl_graph2.SelectedItem.Text == "Line")
                        {
                            DataTable freehandchart = new DataTable();
                            DataRow freeobj = freehandchart.NewRow();
                            freehandchart.Columns.Add("product");
                            freehandchart.Columns.Add("Fretn");
                            freehandchart.Columns.Add("Nretn");

                            for (int i = 0; i < dtemptyfree.Rows.Count - 1; i++)
                            {
                                freeobj = freehandchart.NewRow();
                                freeobj["product"] = dtemptyfree.Rows[i]["product"].ToString();
                                double s1 = Convert.ToDouble(dtemptyfree.Rows[i]["Fretn"]);
                                freeobj["Fretn"] = s1 / 1000;
                                double s2 = Convert.ToDouble(dtemptyfree.Rows[i]["Nretn"]);
                                freeobj["Nretn"] = s2 / 1000;
                                freehandchart.Rows.Add(freeobj);
                            }

                            Grd_freeVsnomi.Visible = false;
                            DivAllCahrtnew.Visible = false;
                            PODCHARTVIEW.Visible = true;

                            string[] x = new string[freehandchart.Rows.Count];
                            double[] y = new double[freehandchart.Rows.Count];
                            double[] z = new double[freehandchart.Rows.Count];
                            for (int i = 0; i < freehandchart.Rows.Count; i++)
                            {
                                x[i] = freehandchart.Rows[i][0].ToString();
                                y[i] = Convert.ToDouble(freehandchart.Rows[i][1]);
                                z[i] = Convert.ToDouble(freehandchart.Rows[i][2]);
                            }
                            //PODCHARTVIEW.Series[0].YValuesPerPoint = 2;
                            PODCHARTVIEW.Series[0].Points.DataBindXY(x, y);
                            PODCHARTVIEW.Series[1].Points.DataBindXY(x, z);
                            PODCHARTVIEW.Series[0].ChartType = SeriesChartType.Line;
                            PODCHARTVIEW.Series[1].ChartType = SeriesChartType.Line;
                            //PODCHARTVIEW.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            //PODCHARTVIEW.ChartAreas["ChartArea1"].Area3DStyle.Enable3D = true;
                            //PODCHARTVIEW.ChartAreas["ChartArea1"].AxisX.LabelStyle.Interval = 1;
                            //PODCHARTVIEW.ChartAreas["ChartArea1"].AxisX.MajorGrid.Interval = 1;
                            //PODCHARTVIEW.ChartAreas["ChartArea1"].AxisX.MajorTickMark.Interval = 1;
                            PODCHARTVIEW.ChartAreas[0].AxisX.IsLabelAutoFit = true;
                            PODCHARTVIEW.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.LabelsAngleStep30;
                            PODCHARTVIEW.ChartAreas[0].AxisX.LabelStyle.Enabled = true;
                        }
                        else if (ddl_graph2.SelectedItem.Text == "Pie")
                        {
                            PODCHARTVIEW.Visible = false;
                            chartoperProfit.Visible = false;
                            chartoperProfit1.Visible = false;
                            DivAllCahrtnew.Visible = true;

                            Chart1.Legends.Clear();

                            Chart2.Legends.Clear();

                            Chart3.Legends.Clear();

                            Chart4.Legends.Clear();

                            Chart5.Legends.Clear();

                            Chart6.Legends.Clear();

                            Chart7.Legends.Clear();

                            Chart8.Legends.Clear();

                            DataTable dt = new DataTable();
                            DataTable dt_new = new DataTable();
                            dt_new.Columns.Add("product");
                            dt_new.Columns.Add("tonnage");


                            dr = dt_new.NewRow();
                            dr["product"] = "FRetention";
                            dr["tonnage"] = dt_freenomi.Rows[0]["Fretn"].ToString();
                            dt_new.Rows.Add(dr);
                            dr = dt_new.NewRow();
                            dr["product"] = "NRetention";
                            dr["tonnage"] = dt_freenomi.Rows[0]["Nretn"].ToString();
                            dt_new.Rows.Add(dr);

                            string[] x = new string[dt_new.Rows.Count];
                            double[] y = new double[dt_new.Rows.Count];
                            for (int i = 0; i < dt_new.Rows.Count; i++)
                            {
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                if (dt_new.Rows[i]["tonnage"] != System.DBNull.Value)
                                {
                                    y[i] = Convert.ToDouble(dt_new.Rows[i]["tonnage"]);
                                }
                                else
                                {
                                    y[i] = 0;
                                }
                            }
                            Chart1.Series[0].Points.DataBindXY(x, y);
                            Chart1.Series[0].ChartType = SeriesChartType.Pie;
                            Chart1.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            Chart1.Series[0]["PieLabelStyle"] = "Disabled";
                            this.Chart1.Series[0].LegendText = "#VALX (#PERCENT)";
                            Chart1.Visible = true;

                            //---------------------------------------------------------------------
                            dt_new = new DataTable();
                            dt_new.Columns.Add("product");
                            dt_new.Columns.Add("tonnage");

                            dr = dt_new.NewRow();
                            dr["product"] = "FRetention";
                            dr["tonnage"] = dt_freenomi.Rows[1]["Fretn"].ToString();
                            dt_new.Rows.Add(dr);
                            dr = dt_new.NewRow();
                            dr["product"] = "NRetention";
                            dr["tonnage"] = dt_freenomi.Rows[1]["Nretn"].ToString();
                            dt_new.Rows.Add(dr);

                            for (int i = 0; i < dt_new.Rows.Count; i++)
                            {
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                if (dt_new.Rows[i]["tonnage"] != System.DBNull.Value)
                                {
                                    y[i] = Convert.ToDouble(dt_new.Rows[i]["tonnage"]);
                                }
                                else
                                {
                                    y[i] = 0;
                                }
                            }
                            Chart2.Series[0].Points.DataBindXY(x, y);
                            Chart2.Series[0].ChartType = SeriesChartType.Pie;
                            Chart2.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            Chart2.Series[0]["PieLabelStyle"] = "Disabled";
                            this.Chart2.Series[0].LegendText = "#VALX (#PERCENT)";
                            Chart2.Visible = true;

                            //---------------------------------------------------------------------
                            dt_new = new DataTable();
                            dt_new.Columns.Add("product");
                            dt_new.Columns.Add("tonnage");

                            dr = dt_new.NewRow();
                            dr["product"] = "FRetention";
                            dr["tonnage"] = dt_freenomi.Rows[2]["Fretn"].ToString();
                            dt_new.Rows.Add(dr);
                            dr = dt_new.NewRow();
                            dr["product"] = "NRetention";
                            dr["tonnage"] = dt_freenomi.Rows[2]["Nretn"].ToString();
                            dt_new.Rows.Add(dr);

                            for (int i = 0; i < dt_new.Rows.Count; i++)
                            {
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                if (dt_new.Rows[i]["tonnage"] != System.DBNull.Value)
                                {
                                    y[i] = Convert.ToDouble(dt_new.Rows[i]["tonnage"]);
                                }
                                else
                                {
                                    y[i] = 0;
                                }
                            }
                            Chart3.Series[0].Points.DataBindXY(x, y);
                            Chart3.Series[0].ChartType = SeriesChartType.Pie;
                            Chart3.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            Chart3.Series[0]["PieLabelStyle"] = "Disabled";
                            this.Chart3.Series[0].LegendText = "#VALX (#PERCENT)";
                            Chart3.Visible = true;

                            //---------------------------------------------------------------------
                            dt_new = new DataTable();
                            dt_new.Columns.Add("product");
                            dt_new.Columns.Add("tonnage");

                            dr = dt_new.NewRow();
                            dr["product"] = "FRetention";
                            dr["tonnage"] = dt_freenomi.Rows[3]["Fretn"].ToString();
                            dt_new.Rows.Add(dr);
                            dr = dt_new.NewRow();
                            dr["product"] = "NRetention";
                            dr["tonnage"] = dt_freenomi.Rows[3]["Nretn"].ToString();
                            dt_new.Rows.Add(dr);

                            for (int i = 0; i < dt_new.Rows.Count; i++)
                            {
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                if (dt_new.Rows[i]["tonnage"] != System.DBNull.Value)
                                {
                                    y[i] = Convert.ToDouble(dt_new.Rows[i]["tonnage"]);
                                }
                                else
                                {
                                    y[i] = 0;
                                }
                            }
                            Chart4.Series[0].Points.DataBindXY(x, y);
                            Chart4.Series[0].ChartType = SeriesChartType.Pie;
                            Chart4.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            Chart4.Series[0]["PieLabelStyle"] = "Disabled";
                            this.Chart4.Series[0].LegendText = "#VALX (#PERCENT)";
                            Chart4.Visible = true;

                            //---------------------------------------------------------------------
                            dt_new = new DataTable();
                            dt_new.Columns.Add("product");
                            dt_new.Columns.Add("tonnage");
                            dr = dt_new.NewRow();
                            dr["product"] = "FRetention";
                            dr["tonnage"] = dt_freenomi.Rows[4]["Fretn"].ToString();
                            dt_new.Rows.Add(dr);
                            dr = dt_new.NewRow();
                            dr["product"] = "NRetention";
                            dr["tonnage"] = dt_freenomi.Rows[4]["Nretn"].ToString();
                            dt_new.Rows.Add(dr);
                            for (int i = 0; i < dt_new.Rows.Count; i++)
                            {
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                if (dt_new.Rows[i]["tonnage"] != System.DBNull.Value)
                                {
                                    y[i] = Convert.ToDouble(dt_new.Rows[i]["tonnage"]);
                                }
                                else
                                {
                                    y[i] = 0;
                                }
                            }
                            Chart5.Series[0].Points.DataBindXY(x, y);
                            Chart5.Series[0].ChartType = SeriesChartType.Pie;
                            Chart5.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            Chart5.Series[0]["PieLabelStyle"] = "Disabled";
                            this.Chart5.Series[0].LegendText = "#VALX (#PERCENT)";
                            Chart5.Visible = true;

                            //---------------------------------------------------------------------
                            dt_new = new DataTable();
                            dt_new.Columns.Add("product");
                            dt_new.Columns.Add("tonnage");

                            dr = dt_new.NewRow();
                            dr["product"] = "FRetention";
                            dr["tonnage"] = dt_freenomi.Rows[5]["Fretn"].ToString();
                            dt_new.Rows.Add(dr);
                            dr = dt_new.NewRow();
                            dr["product"] = "NRetention";
                            dr["tonnage"] = dt_freenomi.Rows[5]["Nretn"].ToString();
                            dt_new.Rows.Add(dr);

                            for (int i = 0; i < dt_new.Rows.Count; i++)
                            {
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                if (dt_new.Rows[i]["tonnage"] != System.DBNull.Value && dt_new.Rows[i]["tonnage"] != "")
                                {
                                    y[i] = Convert.ToDouble(dt_new.Rows[i]["tonnage"]);
                                }
                                else
                                {
                                    y[i] = 0;
                                }
                            }
                            Chart6.Series[0].Points.DataBindXY(x, y);
                            Chart6.Series[0].ChartType = SeriesChartType.Pie;
                            Chart6.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            Chart6.Series[0]["PieLabelStyle"] = "Disabled";
                            this.Chart6.Series[0].LegendText = "#VALX (#PERCENT)";
                            Chart6.Visible = true;

                            //---------------------------------------------------------------------
                            dt_new = new DataTable();
                            dt_new.Columns.Add("product");
                            dt_new.Columns.Add("tonnage");

                            dr = dt_new.NewRow();
                            dr["product"] = "FRetention";
                            dr["tonnage"] = dt_freenomi.Rows[6]["Fretn"].ToString();
                            dt_new.Rows.Add(dr);
                            dr = dt_new.NewRow();
                            dr["product"] = "NRetention";
                            dr["tonnage"] = dt_freenomi.Rows[6]["Nretn"].ToString();
                            dt_new.Rows.Add(dr);

                            for (int i = 0; i < dt_new.Rows.Count; i++)
                            {
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                if (dt_new.Rows[i]["tonnage"] != System.DBNull.Value)
                                {
                                    y[i] = Convert.ToDouble(dt_new.Rows[i]["tonnage"]);
                                }
                                else
                                {
                                    y[i] = 0;
                                }
                            }
                            Chart7.Series[0].Points.DataBindXY(x, y);
                            Chart7.Series[0].ChartType = SeriesChartType.Pie;
                            Chart7.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            Chart7.Series[0]["PieLabelStyle"] = "Disabled";
                            this.Chart7.Series[0].LegendText = "#VALX (#PERCENT)";
                            Chart7.Visible = true;

                            //---------------------------------------------------------------------
                            dt_new = new DataTable();
                            dt_new.Columns.Add("product");
                            dt_new.Columns.Add("tonnage");

                            dr = dt_new.NewRow();
                            dr["product"] = "FRetention";
                            dr["tonnage"] = dt_freenomi.Rows[7]["Fretn"].ToString();
                            dt_new.Rows.Add(dr);
                            dr = dt_new.NewRow();
                            dr["product"] = "NRetention";
                            dr["tonnage"] = dt_freenomi.Rows[7]["Nretn"].ToString();
                            dt_new.Rows.Add(dr);

                            for (int i = 0; i < dt_new.Rows.Count; i++)
                            {
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                x[i] = dt_new.Rows[i]["product"].ToString();
                                if (dt_new.Rows[i]["tonnage"] != System.DBNull.Value)
                                {
                                    y[i] = Convert.ToDouble(dt_new.Rows[i]["tonnage"]);
                                }
                                else
                                {
                                    y[i] = 0;
                                }
                            }
                            Chart8.Series[0].Points.DataBindXY(x, y);
                            Chart8.Series[0].ChartType = SeriesChartType.Pie;
                            Chart8.Legends.Add(new Legend("Default") { Docking = Docking.Right });
                            Chart8.Series[0]["PieLabelStyle"] = "Disabled";
                            this.Chart8.Series[0].LegendText = "#VALX (#PERCENT)";
                            Chart8.Visible = true;

                            Grd_freeVsnomi.Visible = false;
                            return;
                        }
                    }
                }
                else
                {
                    Grd_freeVsnomi.DataSource = Utility.Fn_GetEmptyDataTable();
                    Grd_freeVsnomi.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void grd_lossjob()
        {
            try
            {
                DataTable dt_jobloss = new DataTable();
                DataTable dtnew = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                dt_jobloss = miscorobj.Getjobwisecosting4Cor(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                if (dt_jobloss.Rows.Count > 0)
                {

                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtemptyfree = new DataTable();
                    dtemptyfree.Columns.Add("branch");
                    dtemptyfree.Columns.Add("TranTypeFull");
                    dtemptyfree.Columns.Add("jobno");
                    dtemptyfree.Columns.Add("jobopenon");
                    dtemptyfree.Columns.Add("jobcloseddate");
                    dtemptyfree.Columns.Add("income");
                    dtemptyfree.Columns.Add("expense");
                    dtemptyfree.Columns.Add("retention");
                    dtemptyfree.Columns.Add("branchid");

                    DataView dv_co = new DataView(dt_jobloss);
                    dtnew = dv_co.ToTable(true, "trantype");
                    dv_co = new DataView(dtnew);
                    dv_co.Sort = "trantype";
                    dtnew = dv_co.ToTable();
                    DataRow dr = dtemptyfree.NewRow();
                    for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        DataTable dtLi = new DataTable();
                        DataView data1 = dt_jobloss.DefaultView;
                        data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                        dtLi = data1.ToTable();
                        // count1=dtLi.Rows.Count;
                        if (dtLi.Rows.Count > 0)
                        {
                            dr = dtemptyfree.NewRow();
                            dr["branch"] = dtLi.Rows[0]["TranTypeFull"].ToString();
                            dr["TranTypeFull"] = "";
                            dr["jobno"] = "";
                            dr["jobopenon"] = "";
                            dr["jobcloseddate"] = "";
                            dr["income"] = "";
                            dr["expense"] = "";
                            dr["retention"] = "";

                            dtemptyfree.Rows.Add(dr);

                            double temp1 = 0;

                            for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                            {
                                temp1 = Convert.ToDouble(dtLi.Rows[i]["retention"]);
                                if (temp1 < 0)
                                {
                                    dr = dtemptyfree.NewRow();
                                    dtemptyfree.Rows.Add();
                                    int count = dtemptyfree.Rows.Count - 1;
                                    dtemptyfree.Rows[count]["branch"] = "";
                                    dtemptyfree.Rows[count]["TranTypeFull"] = dtLi.Rows[i]["trantype"].ToString();
                                    dtemptyfree.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                    dtemptyfree.Rows[count]["jobopenon"] = dtLi.Rows[i]["jobopenon"].ToString();
                                    dtemptyfree.Rows[count]["jobcloseddate"] = dtLi.Rows[i]["jobcloseddate"].ToString();

                                    //dtemptyfree.Rows[count]["income"] = dtLi.Rows[i]["income"].ToString();
                                    //totalincome = totalincome + Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                    //dtemptyfree.Rows[count]["expense"] = dtLi.Rows[i]["expense"].ToString();
                                    //totalexpense = totalexpense + Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                    //dtemptyfree.Rows[count]["retention"] = dtLi.Rows[i]["retention"].ToString();
                                    //totalretention = totalretention + Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());

                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                    dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                                    totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                    dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                    totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                    dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");
                                    totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                    dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                    //dtemptyfree.Rows.Add(dr);
                                }
                            }


                            dr = dtemptyfree.NewRow();
                            //dtemptyfree.Rows.Add();
                            dr["jobcloseddate"] = dtnew.Rows[j]["trantype"] + "-" + "Total";
                            dr["income"] = totalincome.ToString("#,0.00");
                            dr["expense"] = totalexpense.ToString("#,0.00");
                            dr["retention"] = totalretention.ToString("#,0.00");
                        }
                        dtemptyfree.Rows.Add(dr);
                        totalincomegrand += totalincome;
                        totalexpensegrand += totalexpense;
                        totalretentiongrand += totalretention;

                    }
                    dr = dtemptyfree.NewRow();
                    if (dt_jobloss.Rows.Count > 0)
                    {
                        dr["jobcloseddate"] = "Grand Total";
                        dr["income"] = totalincomegrand.ToString("#,0.00");
                        dr["expense"] = totalexpensegrand.ToString("#,0.00");
                        dr["retention"] = totalretentiongrand.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);

                        grd_jobloss.DataSource = dtemptyfree;
                        grd_jobloss.DataBind();
                        signup.Visible = true;
                        grd_jobloss.Visible = true;
                    }

                }
                else
                {
                    grd_jobloss.DataSource = Utility.Fn_GetEmptyDataTable();
                    grd_jobloss.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void LoadGrd_LogDetails()
        {
            try
            {
                DataTable dt_log = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                int empid;

                if (txt_agent.Text != "")
                {
                    empid = Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString());
                    Logobj.InsLogsAll(empid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                    dt_log = miscorobj.GetLogdetailswithName(empid, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }
                else
                {
                    Logobj.InsLogsAll(0, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                    dt_log = miscorobj.GetLogdetailswithoutName(bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }

                if (dt_log.Rows.Count > 0)
                {
                    DataTable dtLi = new DataTable();
                    DataTable dtemptyfree = new DataTable();
                    dtemptyfree.Columns.Add("Name");
                    dtemptyfree.Columns.Add("eventdate");
                    dtemptyfree.Columns.Add("Details");
                    dtemptyfree.Columns.Add("Menu");
                    dtemptyfree.Columns.Add("Form");
                    dtemptyfree.Columns.Add("branch");
                    DataRow dr = dtemptyfree.NewRow();

                    DataView dataemp = dt_log.DefaultView;
                    DataTable dtnew = dataemp.ToTable(true, "employeeid");
                    dataemp = new DataView(dtnew);
                    dataemp.Sort = "employeeid";
                    dtnew = dataemp.ToTable();
                    for (int i = 0; i <= dtnew.Rows.Count - 1; i++)
                    {

                        DataView data1 = dt_log.DefaultView;
                        data1.RowFilter = "employeeid = '" + dtnew.Rows[i]["employeeid"] + "' ";
                        dtLi = data1.ToTable();
                        //dtemptyfree.Rows.Add();
                        if (dtLi.Rows.Count > 0)
                        {
                            dr = dtemptyfree.NewRow();
                            dr["Name"] = dtLi.Rows[0]["Name"].ToString();
                            dr["eventdate"] = "";
                            dr["Details"] = "";
                            dr["Menu"] = "";
                            dr["Form"] = "";
                            dr["branch"] = "";

                            dtemptyfree.Rows.Add(dr);

                            //dtemptyfree.Rows.Add();
                            for (int j = 0; j <= dtLi.Rows.Count - 1; j++)
                            {
                                dr = dtemptyfree.NewRow();
                                dtemptyfree.Rows.Add();
                                int cou = dtemptyfree.Rows.Count - 1;
                                dtemptyfree.Rows[cou]["Name"] = "";
                                dtemptyfree.Rows[cou]["eventdate"] = dtLi.Rows[j]["eventdate"].ToString();
                                dtemptyfree.Rows[cou]["Details"] = dtLi.Rows[j]["Details"].ToString();
                                dtemptyfree.Rows[cou]["Menu"] = dtLi.Rows[j]["Menu"].ToString();
                                dtemptyfree.Rows[cou]["Form"] = dtLi.Rows[j]["Form"].ToString();
                                dtemptyfree.Rows[cou]["branch"] = dtLi.Rows[j]["branch"].ToString();
                                //dtemptyfree.Rows.Add(dr);
                            }
                        }
                        //Grd_LogDetails.DataSource = dtLi;
                        //Grd_LogDetails.DataBind();

                    }
                    Grd_LogDetails.DataSource = dtemptyfree;
                    Grd_LogDetails.DataBind();
                    signup.Visible = true;
                    Grd_LogDetails.Visible = true;

                    if (txt_agent.Text != "")
                    {
                        empid = Convert.ToInt32(HttpContext.Current.Session["LoginEmpId"].ToString());
                        Logobj.DelLogsAll(empid);
                    }
                    else
                    {
                        Logobj.DelLogsAll(0);
                    }
                }
                else
                {
                    Grd_LogDetails.DataSource = Utility.Fn_GetEmptyDataTable();
                    Grd_LogDetails.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void grdfreehandwiseship(String str_cust)
        {
            try
            {
                DataTable dt_freenomini = new DataTable();
                DataTable dtnew = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                dt_freenomini = miscorobj.GetNominationwiseCorp(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), str_cust, did);

                if (dt_freenomini.Rows.Count > 0)
                {
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;

                    DataTable dtemptyfree = new DataTable();
                    dtemptyfree.Columns.Add("Branch");
                    dtemptyfree.Columns.Add("trantype");
                    dtemptyfree.Columns.Add("jobno");
                    dtemptyfree.Columns.Add("nomination");
                    dtemptyfree.Columns.Add("volume");
                    dtemptyfree.Columns.Add("cont20");
                    dtemptyfree.Columns.Add("cont40");
                    dtemptyfree.Columns.Add("income");
                    dtemptyfree.Columns.Add("expense");
                    dtemptyfree.Columns.Add("retention");
                    dtemptyfree.Columns.Add("branchid");
                    //dtemptyfree.Columns.Add("jobtype");
                    DataRow dr = dtemptyfree.NewRow();
                    if (bid == 0)
                    {
                        //double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;


                        DataView dv_co = new DataView(dt_freenomini);
                        dtnew = dv_co.ToTable(true, "trantype");
                        dv_co = new DataView(dtnew);
                        dv_co.Sort = "trantype";
                        dtnew = dv_co.ToTable();

                        for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                        {
                            double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                            DataTable dtLi = new DataTable();
                            DataView data1 = dt_freenomini.DefaultView;
                            data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                            dtLi = data1.ToTable();
                            // count1=dtLi.Rows.Count;
                            if (dtLi.Rows.Count > 0)
                            {

                                dr = dtemptyfree.NewRow();
                                dr["Branch"] = dtLi.Rows[0]["TranTypeFull"].ToString();
                                dr["trantype"] = "";
                                dr["jobno"] = "";
                                dr["nomination"] = "";
                                dr["volume"] = "";
                                dr["cont20"] = "";
                                dr["cont40"] = "";
                                dr["income"] = "";
                                dr["expense"] = "";
                                dr["retention"] = "";
                                dtemptyfree.Rows.Add(dr);



                                for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                                {
                                    dtemptyfree.Rows.Add();
                                    dr = dtemptyfree.NewRow();
                                    int count = dtemptyfree.Rows.Count - 1;
                                    dtemptyfree.Rows[count]["Branch"] = dtLi.Rows[i]["Branch"].ToString();
                                    dtemptyfree.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                                    dtemptyfree.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                    dtemptyfree.Rows[count]["nomination"] = dtLi.Rows[i]["nomination"].ToString();
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                                    dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                                    totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                                    dtemptyfree.Rows[count]["cont20"] = dtLi.Rows[i]["cont20"].ToString();
                                    total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                    dtemptyfree.Rows[count]["cont40"] = dtLi.Rows[i]["cont40"].ToString();
                                    total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                    dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                                    totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                    dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                    totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                    dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                                    totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                    dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                    //dtemptyfree.Rows[count]["jobtype"] = dtLi.Rows[i]["jobtype"].ToString();
                                    //dtemptyfree.Rows.Add(dr);
                                }


                                dr = dtemptyfree.NewRow();
                                dr["nomination"] = dtLi.Rows[0]["trantype"].ToString() + "-" + "Total";
                                dr["volume"] = totalvou.ToString("#,0.00");
                                dr["cont20"] = total20;
                                dr["cont40"] = total40;
                                dr["income"] = totalincome.ToString("#,0.00");
                                dr["expense"] = totalexpense.ToString("#,0.00");
                                dr["retention"] = totalretention.ToString("#,0.00");
                                dtemptyfree.Rows.Add(dr);
                                totalgrand40 += total40;
                                totalgrand20 += total20;
                                totalgrandvou += totalvou;
                                totalincomegrand += totalincome;
                                totalexpensegrand += totalexpense;
                                totalretentiongrand += totalretention;
                            }
                            dr = dtemptyfree.NewRow();
                            dr["nomination"] = "Grand Total";
                            dr["volume"] = totalgrandvou.ToString("#,0.00");
                            dr["cont20"] = totalgrand20;
                            dr["cont40"] = totalgrand40;
                            dr["income"] = totalincomegrand.ToString("#,0.00");
                            dr["expense"] = totalexpensegrand.ToString("#,0.00");
                            dr["retention"] = totalretentiongrand.ToString("#,0.00");



                        }
                        dtemptyfree.Rows.Add(dr);
                        Grd_nomination.Visible = true;
                        Grd_nomination.Columns[0].Visible = true;
                        Grd_nomination.DataSource = dtemptyfree;
                        Grd_nomination.DataBind();
                        signup.Visible = true;

                    }
                    else
                    {

                        DataView dv_co = new DataView(dt_freenomini);
                        dtnew = dv_co.ToTable(true, "trantype");
                        dv_co = new DataView(dtnew);
                        dv_co.Sort = "trantype";
                        dtnew = dv_co.ToTable();

                        for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                        {
                            double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                            DataTable dtLi = new DataTable();
                            DataView data1 = dt_freenomini.DefaultView;
                            data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                            dtLi = data1.ToTable();
                            // count1=dtLi.Rows.Count;
                            if (dtLi.Rows.Count > 0)
                            {

                                dr = dtemptyfree.NewRow();
                                dr["Branch"] = "";
                                dr["trantype"] = dtLi.Rows[0]["TranTypeFull"].ToString();
                                dr["jobno"] = "";
                                dr["nomination"] = "";
                                dr["volume"] = "";
                                dr["cont20"] = "";
                                dr["cont40"] = "";
                                dr["income"] = "";
                                dr["expense"] = "";
                                dr["retention"] = "";
                                dtemptyfree.Rows.Add(dr);



                                for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                                {

                                    dr = dtemptyfree.NewRow();
                                    dtemptyfree.Rows.Add();
                                    int count = dtemptyfree.Rows.Count - 1;
                                    dtemptyfree.Rows[count]["Branch"] = dtLi.Rows[i]["Branch"].ToString();
                                    dtemptyfree.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                                    dtemptyfree.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                    dtemptyfree.Rows[count]["nomination"] = dtLi.Rows[i]["nomination"].ToString();
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                                    dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                                    totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                                    dtemptyfree.Rows[count]["cont20"] = dtLi.Rows[i]["cont20"].ToString();
                                    total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                    dtemptyfree.Rows[count]["cont40"] = dtLi.Rows[i]["cont40"].ToString();
                                    total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                    dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                                    totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                    dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                    totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                    temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                    dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                                    totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                    dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                    //dtemptyfree.Rows[count]["jobtype"] = dtLi.Rows[i]["jobtype"].ToString();
                                    //dtemptyfree.Rows.Add(dr);
                                }


                                dr = dtemptyfree.NewRow();
                                dr["nomination"] = dtLi.Rows[0]["trantype"].ToString() + "-" + "Total";
                                dr["volume"] = totalvou.ToString("#,0.00");
                                dr["cont20"] = total20.ToString("#,0.00");
                                dr["cont40"] = total40.ToString("#,0.00");
                                dr["income"] = totalincome.ToString("#,0.00");
                                dr["expense"] = totalexpense.ToString("#,0.00");
                                dr["retention"] = totalretention.ToString("#,0.00");
                                dtemptyfree.Rows.Add(dr);
                                totalgrand40 += total40;
                                totalgrand20 += total20;
                                totalgrandvou += totalvou;
                                totalincomegrand += totalincome;
                                totalexpensegrand += totalexpense;
                                totalretentiongrand += totalretention;
                            }
                            dr = dtemptyfree.NewRow();
                            dr["nomination"] = "Grand Total";
                            dr["volume"] = totalgrandvou.ToString("#,0.00");
                            dr["cont20"] = totalgrand20;
                            dr["cont40"] = totalgrand40;
                            dr["income"] = totalincomegrand.ToString("#,0.00");
                            dr["expense"] = totalexpensegrand.ToString("#,0.00");
                            dr["retention"] = totalretentiongrand.ToString("#,0.00");



                        }
                        dtemptyfree.Rows.Add(dr);
                        Grd_nomination.DataSource = dtemptyfree;
                        Grd_nomination.DataBind();
                        Grd_nomination.Columns[0].Visible = false;
                        signup.Visible = true;
                        Grd_nomination.Visible = true;
                    }
                }
                else
                {
                    Grd_nomination.DataSource = Utility.Fn_GetEmptyDataTable();
                    Grd_nomination.DataBind();
                }

            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }


        }

        protected void grd_Agent_RowDataBound(object sender, GridViewRowEventArgs e)
        {

            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[0].Text == "Total")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_Agent");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;

                }
                else if (e.Row.Cells[0].Text != "Total")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_Agent, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }

        }

        protected void grd_Agent_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                Load_Agent();
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }

        }

        protected void ddl_Report_SelectedIndexChanged(object sender, EventArgs e)
        {
            div_CutOffBreakUp.Visible = false;
            div_BillingReport.Visible = false;
            div_Statistics.Visible = false;
            div_inbound.Visible = false;
            div2_Bookchart.Visible = false;
            div_BLVoucherwise.Visible = false;
            div_ExemptionList.Visible = false;
            div_retention.Visible = false;
            div_JobDetails.Visible = false;
            div_Tradelane.Visible = false;
            Label3.Text = ddl_Report.SelectedItem.Text;

            if (ddl_Report.Text == "By Margin")
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;


                div_mis.Visible = false;
                div_inbound.Visible = false;
                divby.Visible = false;
                ddl_product.Visible = false;
                ddl_by.Visible = false;
                divstatistics.Visible = false;

                RententionLb.Attributes["class"] = "RententionLbl";
                btn_get.Visible = false;btn_get_id.Visible = false;
                ddl_branch.Visible = false;ddl_branch_id.Visible = false;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                txt_agent.Visible = false;txt_agent_id.Visible = false;

                lbl_ret.Visible = true;
                txt_retention.Visible = true;
                btnview.Visible = true;btnview_id.Visible = true;


                //txt_retention.Attributes.Add("OnKeypress", "return IntegerCheck(event);");
                //txt_retention.Attributes.Add("OnBlur", "return IsDouble('txt_retention');");

                if (Session["StrTranType"] != null)
                {
                    if (Session["StrTranType"].ToString() == "CO")
                    {
                        Session["RightsTranType"] = "MI";
                    }
                    dtuser = obj_UP.GetFormwiseuserRights(632, Convert.ToInt32(Session["LoginEmpId"]), Convert.ToInt32(Session["LoginBranchid"]), Session["RightsTranType"].ToString());
                    if (dtuser.Rows.Count > 0)
                    {
                        if (Session["StrTranType"] != null)
                        {
                            Str_Trantype = Session["StrTranType"].ToString();
                        }

                        int_bid = Convert.ToInt32(Session["LoginBranchid"].ToString());
                        int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                        int int_month = DateTime.Now.Month;
                        int int_year = DateTime.Now.Year;
                        if (int_month < 4)
                        {
                            int_Vouyear = int_year - 1;
                        }
                        else
                        {
                            int_Vouyear = int_year;
                        }

                        //string Str_CurrrentDate = DateTime.Now.ToString("dd/MM/yyyy");
                        //txt_from.Text = Str_CurrrentDate;
                        //txt_to.Text = Str_CurrrentDate;
                        grdcustomer.DataSource = new DataTable();
                        grdcustomer.DataBind();
                        Str_Dbname = "FA" + int_bid.ToString();
                    }
                    else
                    {
                        string message = "No Rights";
                        ScriptManager.RegisterStartupScript(this.Page, typeof(System.Web.UI.WebControls.GridView), "OEOpsAndDocs", "alertify.alert('" + message + "');", true);

                    }

                }
            }
            else if (ddl_Report.Text == "Statistics" ||ddl_Report.Text == "Volume Count")
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;

                ddl_product.Items.Clear();

                div_mis.Visible = false;
                div_inbound.Visible = false;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                Label5.Text = "Volume Count";


                intBranchID = Convert.ToInt32(Session["LoginBranchid"].ToString());
                //ddl_branch.Text = Session["LoginBranchName"].ToString();
                //if (Session["StrTranType"] != null)
                //{
                //    strTran = Session["StrTranType"].ToString();
                //}
                if (Session["StrTranType"].ToString() == "CO")
                {
                    ddl_product.Items.Clear();
                    ddl_product.Items.Add("");
                    ddl_product.Items.Add("Ocean Exports");
                    ddl_product.Items.Add("Ocean Imports");
                    ddl_product.Items.Add("Air Exports");
                    ddl_product.Items.Add("Air Imports");
                    ddl_product.Items.Add("Custom House Agent");
                }
                /* if (strTran == "FE")
                 {
                     ddl_product.Text = "Ocean Exports";
                     trantype = strTran;
                 }
                 else if (strTran == "FI")
                 {
                     ddl_product.Text = "Ocean Imports";
                     trantype = strTran;
                 }
                 else if (strTran == "AE")
                 {
                     ddl_product.Text = "Air Exports";
                     trantype = strTran;
                 }
                 else if (strTran == "AI")
                 {
                     ddl_product.Text = "Air Imports";
                     trantype = strTran;
                 }
                 else if (strTran == "CH")
                 {
                     ddl_product.Text = "Custom House Agent";
                     trantype = strTran;
                 }
                  */
                /*    
                   if (ddl_product.Text != "" || ddl_product.Text != "0")
                   {
                       if (ddl_product.Text == "Ocean Exports")
                       {
                           Session["StrTranType"] = "FE";

                       }
                       else if (ddl_product.Text == "Ocean Imports")
                       {
                           Session["StrTranType"] = "FI";

                       }
                       else if (ddl_product.Text == "Air Exports")
                       {
                           Session["StrTranType"] = "AE";

                       }
                       else if (ddl_product.Text == "Air Imports")
                       {
                           Session["StrTranType"] = "AI";

                       }
                       else if (ddl_product.Text == "ALL")
                       {
                           Session["StrTranType"] = "AC";

                       }

                   }

               


                   if (Session["trantype_process"] != null)
                   {
                       Session["StrTranType"] = null;
                       dt_MenuRights = Session["trantype_process"] as DataTable;
                       ddl_product.Items.Add("");
                       ddl_product.Items.Add("ALL");
                       for (int i = 0; i < dt_MenuRights.Rows.Count; i++)
                       {
                           if (dt_MenuRights.Rows[i]["trantype"].ToString() == "FE")
                           {
                               ddl_product.Items.Add("Ocean Exports");
                           }
                           else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "FI")
                           {
                               ddl_product.Items.Add("Ocean Imports");
                           }
                           else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "AE")
                           {
                               ddl_product.Items.Add("Air Exports");
                           }
                           else if (dt_MenuRights.Rows[i]["trantype"].ToString() == "AI")
                           {
                               ddl_product.Items.Add("Air Imports");
                           }

                       }

                   }

                   else
                       if (Session["StrTranType"] != null)
                       {
                           ddl_product.Items.Add("");
                           if (Session["StrTranType"].ToString() == "FE")
                           {
                               ddl_product.Items.Add("Ocean Exports");
                               //ddl_product.SelectedIndex = 1;
                               ddl_product.SelectedValue = "Ocean Exports";
                           }
                           else if (Session["StrTranType"].ToString() == "FI")
                           {
                               ddl_product.Items.Add("Ocean Imports");
                               ddl_product.SelectedValue = "Ocean Imports";
                               //ddl_product.SelectedIndex = 1;
                           }
                           else if (Session["StrTranType"].ToString() == "AE")
                           {
                               ddl_product.Items.Add("Air Exports");
                               ddl_product.SelectedValue = "Air Exports";
                               //ddl_product.SelectedIndex = 1;
                           }
                           else if (Session["StrTranType"].ToString() == "AI")
                           {
                               ddl_product.Items.Add("Air Imports");
                               ddl_product.SelectedValue = "Air Imports";
                           }

                           else if (Session["StrTranType"].ToString() == "AC")
                           {
                               ddl_product.Items.Add("ALL");
                               ddl_product.SelectedValue = "ALL";
                               ddl_product_SelectedIndexChanged(sender, e);
                           }
                           else if (Session["StrTranType"].ToString() == "CH")
                           {
                               ddl_product.Items.Add("Custom House Agent");
                               ddl_product.SelectedValue = "Custom House Agent";
                               ddl_product_SelectedIndexChanged(sender, e);
                           }
                           ddl_product.Enabled = false;
                           //ddl_product.SelectedIndex = 1;
                       }
                   */

                str_CtrlLists = "txt_from~txt_to";
                btnget.Attributes.Add("OnClick", "return IsDate('" + str_CtrlLists + "')");
                //  Str_Trantype = Session["StrTranType"].ToString();

                string Str_CurrrentDate = DateTime.Now.ToString("dd/MM/yyyy");
                txt_from.Text = Str_CurrrentDate;
                txt_to.Text = Str_CurrrentDate;
                GrdJob.DataSource = new DataTable();
                GrdJob.DataBind();
                grdbudget.DataSource = new DataTable();
                grdbudget.DataBind();

                if (Session["StrTranType"] != null)
                {
                    if (Session["StrTranType"].ToString() == "AC")
                    {
                        ddl_branch.Enabled = false;
                        ddl_product.Enabled = true;
                        ddl_branch.SelectedIndex = ddl_branch.Items.IndexOf(ddl_branch.Items.FindByText(Session["LoginBranchName"].ToString()));
                    }
                    else if (Session["StrTranType"].ToString() == "CO")
                    {
                        ddl_branch.Enabled = true;
                        ddl_product.Enabled = true;
                    }
                    else
                    {
                        ddl_branch.SelectedIndex = ddl_branch.Items.IndexOf(ddl_branch.Items.FindByText(Session["LoginBranchName"].ToString()));
                        ddl_product.SelectedIndex = ddl_product.Items.IndexOf(ddl_product.Items.FindByValue(Session["StrTranType"].ToString()));
                        ddl_product_SelectedIndexChanged(sender, e);
                        ddl_branch.Enabled = false;
                        ddl_product.Enabled = false;
                    }
                }
                divby.Visible = true;
                ddl_product.Visible = true;
                ddl_by.Visible = true;
                divstatistics.Visible = true;

                ddl_branch.Visible = true;ddl_branch_id.Visible = true;

                div_retention.Visible = false;
                RententionLb.Attributes["class"] = "RententionLblnew";
                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;

                btn_get.Visible = false;btn_get_id.Visible = false;
                Loadbranch();
                // ddl_Report.Visible = false;ddl_Report_id.Visible = false;
                txt_agent.Visible = false;txt_agent_id.Visible = false;
                div_Statistics.Visible = true;



            }
            else if (ddl_Report.Text == "Inbound")
            {
                lbl_from.Visible = false;
                txt_from.Visible = false;
                Label1.Visible = false;
                txt_to.Visible = false;

                ddl_branch.Visible = false;ddl_branch_id.Visible = false;
                div_mis.Visible = false;
                divby.Visible = false;
                ddl_product.Visible = false;
                ddl_by.Visible = false;
                divstatistics.Visible = false;

                RententionLb.Attributes["class"] = "RententionLbl";
                btn_get.Visible = false;btn_get_id.Visible = false;

                // ddl_Report.Visible = false;ddl_Report_id.Visible = false;
                txt_agent.Visible = false;txt_agent_id.Visible = false;

                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;
                div_inbound.Visible = true;

                int i;
                for (i = 2008; i <= DateTime.Now.Year + 2; i++)
                {
                    ddlyear.Items.Add(i.ToString());
                    ddltoyear.Items.Add(i.ToString());
                }
                ddlyear.Text = DateTime.Now.Year.ToString();
                ddltoyear.Text = DateTime.Now.Year.ToString();
                for (i = 1; i <= 12; i++)
                {
                    DateTime date = new DateTime(2000, i, 1);
                    ddlmonth.Items.Add(new System.Web.UI.WebControls.ListItem(date.ToString("MMMM"), i.ToString()));
                    ddltomonth.Items.Add(new System.Web.UI.WebControls.ListItem(date.ToString("MMMM"), i.ToString()));
                }

                ddlmonth.Text = DateTime.Today.Month.ToString();
                ddltomonth.Text = DateTime.Today.Month.ToString();

                  btncancel.Text = "Cancel";



                btncancel.ToolTip = "Cancel";
                btncancel1.Attributes["class"] = "btn ico-cancel";

            }
            else if (ddl_Report.Text == "By Company/Branch/Product")
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;

                div_mis.Visible = false;
                div_BLVoucherwise.Visible = true;
                btn_get.Visible = true;btn_get_id.Visible = true;
                ddl_branch.Visible = false;ddl_branch_id.Visible = false;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                div_inbound.Visible = false;
                divby.Visible = false;
                ddl_product.Visible = false;
                ddl_by.Visible = false;
                divstatistics.Visible = false;

                RententionLb.Attributes["class"] = "RententionLblnew";

                txt_agent.Visible = false;txt_agent_id.Visible = false;

                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;

                grdvoucher.DataSource = null;
                grdvoucher.DataBind();

                Grdjob_BL.DataSource = null;
                Grdjob_BL.DataBind();
                Grd_BL.DataSource = null;
                Grd_BL.DataBind();

            }
            else if (ddl_Report.Text == "Shipment Count")
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;

                div_mis.Visible = false;

                div_JobDetails.Visible = true;
                btn_get.Visible = true;btn_get_id.Visible = true;
                ddl_branch.Visible = false;ddl_branch_id.Visible = false;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                div_inbound.Visible = false;
                divby.Visible = false;
                ddl_product.Visible = false;
                ddl_by.Visible = false;
                divstatistics.Visible = false;

                RententionLb.Attributes["class"] = "RententionLblnew";

                txt_agent.Visible = false;txt_agent_id.Visible = false;

                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;

                Grdjobdetails.DataSource = new DataTable();
                Grdjobdetails.DataBind();
            }

            else if (ddl_Report.Text == "By Exemption")
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;


                div_mis.Visible = false;
                div_ExemptionList.Visible = true;
                btn_get.Visible = true;btn_get_id.Visible = true;
                ddl_branch.Visible = true;ddl_branch_id.Visible = true;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                div_inbound.Visible = false;
                divby.Visible = false;
                ddl_product.Visible = false;
                ddl_by.Visible = false;
                divstatistics.Visible = false;
                RententionLb.Attributes["class"] = "RententionLblnew";
                txt_agent.Visible = false;txt_agent_id.Visible = false;
                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;
                emptygrd();
            }

            else if (ddl_Report.Text == "Income Statement")
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;


                div_mis.Visible = false;
                div_BillingReport.Visible = true;
               // btn_get.Visible = true;btn_get_id.Visible = true;
                ddl_branch.Visible = true;ddl_branch_id.Visible = true;
                ddl_product.Visible = true;
                divby.Visible = true;
                ddl_by.Visible = true;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                div_inbound.Visible = false;
                divstatistics.Visible = false;
                RententionLb.Attributes["class"] = "RententionLblnew";
                txt_agent.Visible = false;txt_agent_id.Visible = false;
                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;
                if (Session["StrTranType"] != null)
                {
                    strTran = Session["StrTranType"].ToString();
                }

                //strTran = "AC";
                intDivID = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                // FillBranch();
                FillModule();
                grdJobDtls.DataSource = Utility.Fn_GetEmptyDataTable();
                grdJobDtls.DataBind();
                txt_from.Text = Utility.fn_ConvertDate(LogObj.GetDate().ToShortDateString());
                txt_to.Text = Utility.fn_ConvertDate(LogObj.GetDate().ToShortDateString());

                if (strTran == "AC")
                {
                    intBranchID = Convert.ToInt32(Session["LoginBranchid"].ToString());
                    ddl_branch.Enabled = false;
                    ddl_branch.Text = Session["LoginBranchName"].ToString();
                    ddl_product.Enabled = true;
                }
                else if (strTran == "CO")
                {
                    intBranchID = 0;
                    ddl_branch.Enabled = true;
                    ddl_product.Enabled = true;
                }
                else
                {
                    ddl_product.Items.Clear();

                    intBranchID = Convert.ToInt32(Session["LoginBranchid"].ToString());
                    ddl_branch.Text = Session["LoginBranchName"].ToString();
                    if (strTran == "FE")
                    {
                        ddl_product.Text = "Ocean Exports";
                        trantype = strTran;
                    }
                    else if (strTran == "FI")
                    {
                        ddl_product.Text = "Ocean Imports";
                        trantype = strTran;
                    }
                    else if (strTran == "AE")
                    {
                        ddl_product.Text = "Air Exports";
                        trantype = strTran;
                    }
                    else if (strTran == "AI")
                    {
                        ddl_product.Text = "Air Imports";
                        trantype = strTran;
                    }
                    else if (strTran == "CH")
                    {
                        ddl_product.Text = "Custom House Agent";
                        trantype = strTran;
                    }
                    ddl_branch.Enabled = false;
                    ddl_product.Enabled = false;
                }

            }

            else if (ddl_Report.Text == "CutOff BreakUp")
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;


                div_mis.Visible = false;
                div_CutOffBreakUp.Visible = true;
                //txt_to.Visible = false;
                btn_get.Visible = true;btn_get_id.Visible = true;
                ddl_branch.Visible = false;ddl_branch_id.Visible = false;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                ddl_product.Visible = false;
                divby.Visible = false;
                ddl_by.Visible = false;
                div_inbound.Visible = false;
                divstatistics.Visible = false;
                RententionLb.Attributes["class"] = "RententionLblnew";
                txt_agent.Visible = false;txt_agent_id.Visible = false;
                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;
                //Panel13.Visible = true;
                inboundgrd.Attributes["class"] = "GridcutNewMt2";
                GridView3.Visible = true;
                GridView3.DataSource = new DataTable();
                GridView3.DataBind();

            }
            else if (ddl_Report.Text == "Tradelane")
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;

                div_mis.Visible = false;
                div_CutOffBreakUp.Visible = false;
                //txt_to.Visible = false;
                div_Tradelane.Visible = true;
                btn_get.Visible = false;btn_get_id.Visible = false;
                btn_get_trade.Visible = true;
                btn_cancel_trade.Visible = true;
                ddl_branch.Visible = false;ddl_branch_id.Visible = false;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                ddl_product.Visible = false;
                divby.Visible = false;
                ddl_by.Visible = false;
                div_inbound.Visible = false;
                divstatistics.Visible = false;
                RententionLb.Attributes["class"] = "RententionLblnew";
                txt_agent.Visible = false;txt_agent_id.Visible = false;
                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;

                Grd_product.DataSource = null;
                Grd_product.DataBind();
                Grd_Country.DataSource = null;
                Grd_Country.DataBind();
                   btncancel.Text = "Cancel";


                btncancel.ToolTip = "Cancel";
                btncancel1.Attributes["class"] = "btn ico-cancel";

                //  ddl_division.Text = Session["LoginDivisionName"].ToString();

            }

            else
            {
                lbl_from.Visible = true;
                txt_from.Visible = true;
                Label1.Visible = true;
                txt_to.Visible = true;

                div_mis.Visible = true;
                div_retention.Visible = false;
                div_inbound.Visible = false;
                divby.Visible = false;
                ddl_product.Visible = false;
                ddl_by.Visible = false;
                divstatistics.Visible = false;
                RententionLb.Attributes["class"] = "RententionLblnew";
                lbl_ret.Visible = false;
                txt_retention.Visible = false;
                btnview.Visible = false;btnview_id.Visible = false;
                btn_get.Visible = true;btn_get_id.Visible = true;
                ddl_branch.Visible = true;ddl_branch_id.Visible = true;
                ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                txt_agent.Visible = true;txt_agent_id.Visible = true;
                //hf_date.Value = Utility.fn_ConvertDate(Logobj.GetDate().ToShortDateString());
                //txt_from.Text = hf_date.Value;
                //txt_to.Text = hf_date.Value;
                // btn_cancel.Text = "Back";

                btn_cancel.ToolTip = "Back"; ;
                btn_cancel1.Attributes["class"] = "btn ico-back";

                signup.Visible = false;

                //if (Session["StrTranType"] != null)
                //{
                //if (Session["StrTranType"].ToString() == "CO")
                //{
                //    Session["RightsTranType"] = "MI";
                //}

                //dtuser = obj_UP.GetFormwiseuserRights(263, Convert.ToInt32(Session["LoginEmpId"]), Convert.ToInt32(Session["LoginBranchid"]), Session["RightsTranType"].ToString());
                //if (dtuser.Rows.Count > 0)
                //{




                //}
                //    else
                //    {
                //        string message = "No Rights";
                //        ScriptManager.RegisterStartupScript(this.Page, typeof(System.Web.UI.WebControls.GridView), "OEOpsAndDocs", "alertify.alert('" + message + "');", true);

                //    }
                //}

                ddl_graph1.SelectedIndex = 0;
                ddl_graph1.Enabled = false;
                Filter();
                chartclear();
                txt_agent.Text = "";
            }




        }

        public DataTable SelectTopDataRow(DataTable dt, int count)
        {
            DataTable dtn = dt.Clone();
            for (int i = 0; i < count; i++)
            {
                if (dt.Rows[i][0].ToString() != "Total")
                {
                    dtn.ImportRow(dt.Rows[i]);
                }
            }

            return dtn;
        }


        protected void Grid_Agent()
        {
            DataTable dt_AgentDtls = new DataTable();
            DataTable dtnew = new DataTable();
            DataTable dtemptynew = new DataTable();
            DataTable dt = new DataTable();
            DataTable dtsort = new DataTable();
            //int bid = Convert.ToInt32(HttpContext.Current.Session["LoginBranchid"].ToString());
            int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
           // DataAccess.MISGrd obj_misgrd = new DataAccess.MISGrd();
            string transtype = HttpContext.Current.Session["StrTranType"].ToString();
            bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
            cust = "AG";

            if (txt_agent.Text != "")
            {
                int intcustid = Convert.ToInt32(hf_agent1.Value);
                dt_AgentDtls = miscorobj.GetShipperWisewithname(bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, cust, intcustid, did);
            }
            else
            {
                dt_AgentDtls = miscorobj.GetShipperWisewithoutname(bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, cust, did);
            }

            if (ddl_graph1.SelectedItem.Text == "Graph")
            {
                grd_Agent.Visible = false;
                if (ddl_graph2.SelectedItem.Text == "Bar")
                {
                    chartoperProfit.Visible = false;
                    DataTable dt_new = new DataTable();
                    //dt = (DataTable)Session["By Agent"];
                    DataView dv = dt_AgentDtls.DefaultView;
                    dv.Sort = "retention desc";
                    DataTable sortedDT = dv.ToTable();
                    dt_new = SelectTopDataRow(sortedDT, 11);
                    chartoperProfit.Visible = true;
                    string[] x = new string[dt_new.Rows.Count];
                    decimal[] y = new decimal[dt_new.Rows.Count];
                    for (int count = 0; count < dt_new.Rows.Count; count++)
                    {
                        x[count] = dt_new.Rows[count]["agent"].ToString();
                        y[count] = Convert.ToDecimal(dt_new.Rows[count]["retention"].ToString());
                    }

                    chartoperProfit.ChartAreas[0].AxisX.Title = "Agent";
                    chartoperProfit.ChartAreas[0].AxisY.Title = "Amount";

                    chartoperProfit.Series[0].Points.DataBindXY(x, y);
                    chartoperProfit.Series[0].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                    chartoperProfit.Series[0].LegendText = "Profit";
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.LabelStyle.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorTickMark.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisY.MajorGrid.Enabled = false;
                    grd_Agent.Visible = false;
                    return;
                }
                else if (ddl_graph2.SelectedItem.Text == "Line")
                {
                    chartoperProfit.Visible = false;
                    DataTable dt_new = new DataTable();
                    //dt = (DataTable)Session["By Agent"];
                    DataView dv = dt_AgentDtls.DefaultView;
                    dv.Sort = "retention desc";
                    DataTable sortedDT = dv.ToTable();
                    dt_new = SelectTopDataRow(sortedDT, 11);
                    chartoperProfit.Visible = true;
                    string[] x = new string[dt_new.Rows.Count];
                    decimal[] y = new decimal[dt_new.Rows.Count];
                    for (int count = 0; count < dt_new.Rows.Count; count++)
                    {
                        x[count] = dt_new.Rows[count]["agent"].ToString();
                        y[count] = Convert.ToDecimal(dt_new.Rows[count]["retention"].ToString());
                    }

                    chartoperProfit.ChartAreas[0].AxisX.Title = "Agent";
                    chartoperProfit.ChartAreas[0].AxisY.Title = "Amount";

                    chartoperProfit.Series[0].Points.DataBindXY(x, y);
                    chartoperProfit.Series[0].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                    chartoperProfit.Series[0].LegendText = "Profit";
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.LabelStyle.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorTickMark.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisY.MajorGrid.Enabled = false;
                    grd_Agent.Visible = false;
                    return;
                }
                else if (ddl_graph2.SelectedItem.Text == "Pie")
                {
                    chartoperProfit.Visible = false;
                    ScriptManager.RegisterClientScriptBlock(this.Page, typeof(Page), "Miscorporate", "alertify.alert('No Pie Chart For AgentWise');", true);
                }
            }

            if (dt_AgentDtls.Rows.Count > 0)
            {
                /*DataView dv_co = new DataView(dt_AgentDtls);
                dtnew = dv_co.ToTable(true, "agentid");
                dv_co = new DataView(dtnew);
                dv_co.Sort = "agentid";
                dtnew = dv_co.ToTable();

                DataTable dtempty = new DataTable();

                dtempty.Columns.Add("Agent");

                dtempty.Columns.Add("CBM/Kgs");
                dtempty.Columns.Add("Cont20");
                dtempty.Columns.Add("Cont40");
                dtempty.Columns.Add("Income");
                dtempty.Columns.Add("Expenses");
                dtempty.Columns.Add("Retention");
                dtempty.Columns.Add("agentid");
                dtempty.Columns.Add("branchid");

                DataRow dr = dtempty.NewRow();

                dtemptynew.Columns.Add("Agent");

                dtemptynew.Columns.Add("CBM/Kgs");
                dtemptynew.Columns.Add("Cont20");
                dtemptynew.Columns.Add("Cont40");
                dtemptynew.Columns.Add("Income");
                dtemptynew.Columns.Add("Expenses");
                dtemptynew.Columns.Add("Retention");
                dtemptynew.Columns.Add("agentid");
                dtemptynew.Columns.Add("branchid");

                for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                {
                    double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                    DataTable dtLi1 = new DataTable();
                    DataView data1 = dt_AgentDtls.DefaultView;
                    string aa = dtnew.Rows[j]["agentid"].ToString().Trim();
                    data1.RowFilter = "agentid = '" + aa + "' ";
                    dtLi1 = data1.ToTable();

                    dr = dtemptynew.NewRow();
                    dtemptynew.Rows.Add();

                    dtemptynew.Rows[0]["Agent"] = dtLi1.Rows[0]["agent"].ToString(); // +" , " + dtLi.Rows[0]["branch"].ToString();
                    for (int i = 0; i <= dtLi1.Rows.Count - 1; i++)
                    {
                        //dtempty.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                        temp2 = Convert.ToDouble(dtLi1.Rows[i]["volume"].ToString());
                        totalvou = totalvou + temp2;
                        dtemptynew.Rows[0]["CBM/Kgs"] = totalvou.ToString("#,0.00");
                        temp2 = Convert.ToInt32(dtLi1.Rows[i]["cont20"].ToString());
                        total20 = total20 + temp2;
                        dtemptynew.Rows[0]["Cont20"] = total20.ToString("#,0.00");
                        temp2 = Convert.ToInt32(dtLi1.Rows[i]["cont40"].ToString());
                        total40 = total40 + temp2;
                        dtemptynew.Rows[0]["Cont40"] = total40.ToString("#,0.00");

                        temp2 = Convert.ToDouble(dtLi1.Rows[i]["income"].ToString());
                        totalincome = totalincome + temp2;
                        dtemptynew.Rows[0]["Income"] = totalincome.ToString("#,0.00");
                        //totalincome = totalincome + Convert.ToDouble(dtempty.Rows[0]["income"].ToString());
                        temp2 = Convert.ToDouble(dtLi1.Rows[i]["expense"].ToString());
                        totalexpense = totalexpense + temp2;
                        dtemptynew.Rows[0]["Expenses"] = totalexpense.ToString("#,0.00");

                        //totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[0]["expense"].ToString());
                        temp2 = Convert.ToDouble(dtLi1.Rows[i]["retention"].ToString());
                        totalretention = totalretention + temp2;
                        dtemptynew.Rows[0]["Retention"] = totalretention.ToString("#,0.00");
                        dtemptynew.Rows[0]["agentid"] = dtLi1.Rows[i]["agentid"].ToString();
                        dtemptynew.Rows[0]["branchid"] = dtLi1.Rows[i]["branchid"].ToString();
                        //dtempty.Rows.Add(dr);
                    }
                    double total1 = 0, total2 = 0, total3 = 0, total4 = 0, total5 = 0, total6 = 0;
                    temp2 = 0;
                    for (int i = 0; i <= dtemptynew.Rows.Count - 1; i++)
                    {
                        dr = dtempty.NewRow();
                        dtempty.Rows.Add();
                        int count = dtempty.Rows.Count - 1;
                        dtempty.Rows[count]["Agent"] = dtemptynew.Rows[i]["Agent"].ToString();
                        temp2 = Convert.ToDouble(dtemptynew.Rows[i]["CBM/Kgs"].ToString());
                        dtempty.Rows[count]["CBM/Kgs"] = temp2.ToString("#,0.00");
                        total1 = total1 + Convert.ToDouble(dtempty.Rows[count]["CBM/Kgs"]);

                        temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Cont20"].ToString());
                        dtempty.Rows[count]["Cont20"] = temp2.ToString("#,0.00");
                        total2 = total2 + Convert.ToDouble(dtempty.Rows[count]["Cont20"]);

                        temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Cont40"].ToString());
                        dtempty.Rows[count]["Cont40"] = temp2.ToString("#,0.00");
                        total3 = total3 + Convert.ToDouble(dtempty.Rows[count]["Cont40"]);

                        temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        total4 = total4 + Convert.ToDouble(dtempty.Rows[count]["Income"].ToString());

                        temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Expenses"].ToString());
                        dtempty.Rows[count]["Expenses"] = temp2.ToString("#,0.00");
                        total5 = total5 + Convert.ToDouble(dtempty.Rows[count]["Expenses"].ToString());

                        temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        total6 = total6 + Convert.ToDouble(dtempty.Rows[count]["Retention"].ToString());
                        dtempty.Rows[count]["agentid"] = dtemptynew.Rows[i]["agentid"].ToString();
                        dtempty.Rows[count]["branchid"] = dtemptynew.Rows[i]["branchid"].ToString();
                    }

                    totalgrandvou += total1;
                    totalgrand20 += total2;
                    totalgrand40 += total3;
                    totalincomegrand += total4;
                    totalexpensegrand += total5;
                    totalretentiongrand += total6;
                    dtemptynew.Clear();
                }

                dr = dtempty.NewRow();
                dr["Agent"] = "Total";
                dr["CBM/Kgs"] = totalgrandvou.ToString("#,0.00");
                dr["Cont20"] = totalgrand20.ToString("#,0.00");
                dr["Cont40"] = totalgrand40.ToString("#,0.00");
                dr["Income"] = totalincomegrand.ToString("#,0.00");
                dr["Expenses"] = totalexpensegrand.ToString("#,0.00");
                dr["Retention"] = totalretentiongrand.ToString("#,0.00");
                dtempty.Rows.Add(dr);
                */
                grd_Agent.DataSource = dt_AgentDtls;
                grd_Agent.DataBind();
                signup.Visible = true;
                grd_Agent.Visible = true;
                //grd_Agent.Rows[grd_Agent.Rows.Count - 1].Font.Bold = Utility.fn_Grd_GrandTotal_Bold();
                //grd_Agent.Rows[grd_Agent.Rows.Count - 1].ForeColor = Utility.fn_Grd_GrandTotal_Color();
            }
            else
            {
                grd_Agent.DataSource = Utility.Fn_GetEmptyDataTable();
                grd_Agent.DataBind();
            }
        }
        protected void grdjobwisecosting()
        {
            try
            {
                DataTable dt_jobwiseCost = new DataTable();
                DataTable dtnew = new DataTable();
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                dt_jobwiseCost = miscorobj.Getjobwisecosting4Cor(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);

                if (dt_jobwiseCost.Rows.Count > 0)
                {
                    double totalincomeFE = 0, totalexpenseFE = 0, totalretentionFE = 0, totalincomeFI = 0, totalexpenseFI = 0, totalretentionFI = 0;
                    double totalincomeCHA = 0, totalexpenseCHA = 0, totalretentionCHA = 0, totalincomeFC = 0, totalexpenseFC = 0, totalretentionFC = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("rownumber");

                    dtempty.Columns.Add("branch");
                    dtempty.Columns.Add("TrantypeFull");
                    dtempty.Columns.Add("jobno");
                    dtempty.Columns.Add("jobopenon");
                    dtempty.Columns.Add("jobcloseddate");
                    dtempty.Columns.Add("income");
                    dtempty.Columns.Add("expense");
                    dtempty.Columns.Add("retention");
                    dtempty.Columns.Add("branchid");

                    DataRow dr = dtempty.NewRow();
                    if (bid == 0)
                    {
                        //double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;

                        DataView dv_co = new DataView(dt_jobwiseCost);
                        dtnew = dv_co.ToTable(true, "trantype");
                        dv_co = new DataView(dtnew);
                        dv_co.Sort = "trantype";
                        dtnew = dv_co.ToTable();

                        for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                        {
                            double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                            DataTable dtLi = new DataTable();
                            DataView data1 = dt_jobwiseCost.DefaultView;
                            data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                            dtLi = data1.ToTable();   //DataView dv = new DataView(dt_jobwiseCost);
                            dr = dtempty.NewRow();

                            dr["rownumber"] = dtLi.Rows[0]["TrantypeFull"];

                            dr["TrantypeFull"] = "";
                            dr["jobno"] = "";
                            dr["jobopenon"] = "";
                            dr["jobcloseddate"] = "";
                            dr["income"] = "";
                            dr["expense"] = "";
                            dr["retention"] = "";

                            dtempty.Rows.Add(dr);

                            for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                            {
                                dr = dtempty.NewRow();
                                dtempty.Rows.Add();
                                int count = dtempty.Rows.Count - 1;
                                dtempty.Rows[count]["rownumber"] = dtLi.Rows[i]["Rownumber"].ToString();
                                dtempty.Rows[count]["branch"] = dtLi.Rows[i]["branch"].ToString();
                                //dtempty.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                                dtempty.Rows[count]["TrantypeFull"] = dtLi.Rows[i]["trantype"].ToString();
                                dtempty.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                dtempty.Rows[count]["jobopenon"] = dtLi.Rows[i]["jobopenon"].ToString();
                                dtempty.Rows[count]["jobcloseddate"] = dtLi.Rows[i]["jobcloseddate"].ToString();
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                dtempty.Rows[count]["income"] = temp2.ToString("#,0.00");
                                totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["income"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                dtempty.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["expense"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                dtempty.Rows[count]["retention"] = temp2.ToString("#,0.00");
                                totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["retention"].ToString());
                                dtempty.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                //dtempty.Rows.Add(dr);
                            }

                            dr = dtempty.NewRow();
                            dr["jobcloseddate"] = dtLi.Rows[0]["trantype"] + "-" + "Total";
                            dr["income"] = totalincome.ToString("#,0.00");
                            dr["expense"] = totalexpense.ToString("#,0.00");
                            dr["retention"] = totalretention.ToString("#,0.00");
                            dtempty.Rows.Add(dr);
                            totalincomegrand += totalincome;
                            totalexpensegrand += totalexpense;
                            totalretentiongrand += totalretention;

                        }
                        dr = dtempty.NewRow();
                        dr["jobcloseddate"] = "Grand Total";
                        dr["income"] = totalincomegrand.ToString("#,0.00");
                        dr["expense"] = totalexpensegrand.ToString("#,0.00");
                        dr["retention"] = totalretentiongrand.ToString("#,0.00");
                        dtempty.Rows.Add(dr);
                        //grd_JobwiseCosting.Columns[0].Visible = true;
                        grd_JobwiseCosting.Visible = true;
                        grd_JobwiseCosting.DataSource = dtempty;
                        grd_JobwiseCosting.DataBind();

                        signup.Visible = true;

                    }
                    else
                    {
                        DataView dv_co = new DataView(dt_jobwiseCost);
                        dtnew = dv_co.ToTable(true, "trantype");
                        dv_co = new DataView(dtnew);
                        dv_co.Sort = "trantype";
                        dtnew = dv_co.ToTable();

                        for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                        {
                            double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                            DataTable dtLi = new DataTable();
                            DataView data1 = dt_jobwiseCost.DefaultView;
                            data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                            dtLi = data1.ToTable();
                            dr = dtempty.NewRow();

                            dr["branch"] = dtLi.Rows[0]["TrantypeFull"];

                            dr["TrantypeFull"] = "";
                            dr["jobno"] = "";
                            dr["jobopenon"] = "";
                            dr["jobcloseddate"] = "";
                            dr["income"] = "";
                            dr["expense"] = "";
                            dr["retention"] = "";

                            dtempty.Rows.Add(dr);



                            for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                            {

                                dr = dtempty.NewRow();
                                dtempty.Rows.Add();
                                int count = dtempty.Rows.Count - 1;
                                dtempty.Rows[count]["rownumber"] = dtLi.Rows[i]["Rownumber"].ToString();
                                dtempty.Rows[count]["branch"] = dtLi.Rows[i]["branch"].ToString();
                                //dtempty.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                                dtempty.Rows[count]["TranTypeFull"] = dtLi.Rows[i]["trantype"].ToString();
                                dtempty.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                dtempty.Rows[count]["jobopenon"] = dtLi.Rows[i]["jobopenon"].ToString();
                                dtempty.Rows[count]["jobcloseddate"] = dtLi.Rows[i]["jobcloseddate"].ToString();
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                dtempty.Rows[count]["income"] = temp2.ToString("#,0.00");
                                totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["income"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                dtempty.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["expense"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                dtempty.Rows[count]["retention"] = temp2.ToString("#,0.00");
                                totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["retention"].ToString());
                                dtempty.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                //dtempty.Rows.Add(dr);
                            }


                            dr = dtempty.NewRow();
                            dr["jobcloseddate"] = dtLi.Rows[0]["trantype"] + "-" + "Total";
                            dr["income"] = totalincome.ToString("#,0.00");
                            dr["expense"] = totalexpense.ToString("#,0.00");
                            dr["retention"] = totalretention.ToString("#,0.00");
                            dtempty.Rows.Add(dr);
                            totalincomegrand += totalincome;
                            totalexpensegrand += totalexpense;
                            totalretentiongrand += totalretention;

                        }
                        dr = dtempty.NewRow();
                        dr["jobcloseddate"] = "Grand Total";
                        dr["income"] = totalincomegrand.ToString("#,0.00");
                        dr["expense"] = totalexpensegrand.ToString("#,0.00");
                        dr["retention"] = totalretentiongrand.ToString("#,0.00");
                        dtempty.Rows.Add(dr);

                        grd_JobwiseCosting.DataSource = dtempty;
                        grd_JobwiseCosting.DataBind();
                        grd_JobwiseCosting.Columns[0].Visible = false;
                        signup.Visible = true;
                        grd_JobwiseCosting.Visible = true;
                    }

                }
                else
                {
                    grd_JobwiseCosting.DataSource = Utility.Fn_GetEmptyDataTable();
                    grd_JobwiseCosting.DataBind();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }
        protected void fn_ConsigneeWise()
        {

            DataTable dt_AgentDtls = new DataTable();
            DataTable dtnew = new DataTable();
            DataTable dtemptynew = new DataTable();
            //int bid = Convert.ToInt32(HttpContext.Current.Session["LoginBranchid"].ToString());
            int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
           // DataAccess.MISGrd obj_misgrd = new DataAccess.MISGrd();
            string transtype = HttpContext.Current.Session["StrTranType"].ToString();
            bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
            cust = "CO";

            if (txt_agent.Text != "")
            {
                int intcustid = Convert.ToInt32(hf_agent1.Value);
                dt_AgentDtls = miscorobj.GetShipperWisewithname(bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, cust, intcustid, did);
            }
            else
            {
                dt_AgentDtls = miscorobj.GetShipperWisewithoutname(bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, cust, did);
            }

            if (ddl_graph1.SelectedItem.Text == "Graph")
            {
                grd_Consignee.Visible = false;
                if (ddl_graph2.SelectedItem.Text == "Bar")
                {
                    chartoperProfit.Visible = false;
                    DataTable dt_new = new DataTable();
                    //dt = (DataTable)Session["By Agent"];
                    DataView dv = dt_AgentDtls.DefaultView;
                    dv.Sort = "retention desc";
                    DataTable sortedDT = dv.ToTable();
                    dt_new = SelectTopDataRow(sortedDT, 11);
                    div_op_char.Visible = true;
                    chartoperProfit.Visible = true;
                    string[] x = new string[dt_new.Rows.Count];
                    decimal[] y = new decimal[dt_new.Rows.Count];
                    for (int count = 0; count < dt_new.Rows.Count; count++)
                    {
                        x[count] = dt_new.Rows[count]["consignee"].ToString();
                        y[count] = Convert.ToDecimal(dt_new.Rows[count]["retention"].ToString());
                    }

                    chartoperProfit.ChartAreas[0].AxisX.Title = "Consignee";
                    chartoperProfit.ChartAreas[0].AxisY.Title = "Amount";

                    chartoperProfit.Series[0].Points.DataBindXY(x, y);
                    chartoperProfit.Series[0].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Column;
                    chartoperProfit.Series[0].LegendText = "Profit";
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.LabelStyle.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorTickMark.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisY.MajorGrid.Enabled = false;
                    grd_Consignee.Visible = false;
                    return;
                }
                else if (ddl_graph2.SelectedItem.Text == "Line")
                {
                    chartoperProfit.Visible = false;
                    DataTable dt_new = new DataTable();
                    //dt = (DataTable)Session["By Agent"];
                    DataView dv = dt_AgentDtls.DefaultView;
                    dv.Sort = "retention desc";
                    DataTable sortedDT = dv.ToTable();
                    dt_new = SelectTopDataRow(sortedDT, 11);
                    div_op_char.Visible = true;
                    chartoperProfit.Visible = true;
                    string[] x = new string[dt_new.Rows.Count];
                    decimal[] y = new decimal[dt_new.Rows.Count];
                    for (int count = 0; count < dt_new.Rows.Count; count++)
                    {
                        x[count] = dt_new.Rows[count]["consignee"].ToString();
                        y[count] = Convert.ToDecimal(dt_new.Rows[count]["retention"].ToString());
                    }

                    chartoperProfit.ChartAreas[0].AxisX.Title = "Consignee";
                    chartoperProfit.ChartAreas[0].AxisY.Title = "Amount";

                    chartoperProfit.Series[0].Points.DataBindXY(x, y);
                    chartoperProfit.Series[0].ChartType = System.Web.UI.DataVisualization.Charting.SeriesChartType.Line;
                    chartoperProfit.Series[0].LegendText = "Profit";
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.LabelStyle.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorTickMark.Interval = 1;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;
                    chartoperProfit.ChartAreas["ChartArea1"].AxisY.MajorGrid.Enabled = false;
                    grd_Consignee.Visible = false;
                    return;
                }
                else if (ddl_graph2.SelectedItem.Text == "Pie")
                {
                    chartoperProfit.Visible = false;
                    ScriptManager.RegisterClientScriptBlock(this.Page, typeof(Page), "Master", "alertify.alert('No Pie Chart For ConsigneeWise');", true);
                }
            }

            if (dt_AgentDtls.Rows.Count > 0)
            {
                /* DataView dv_co = new DataView(dt_AgentDtls);
                 dtnew = dv_co.ToTable(true, "consigneeid");
                 dv_co = new DataView(dtnew);
                 dv_co.Sort = "consigneeid";
                 dtnew = dv_co.ToTable();

                 DataTable dtempty = new DataTable();

                 dtempty.Columns.Add("Consignee");

                 dtempty.Columns.Add("CBM/Kgs");
                 dtempty.Columns.Add("Cont20");
                 dtempty.Columns.Add("Cont40");
                 dtempty.Columns.Add("Income");
                 dtempty.Columns.Add("Expense");
                 dtempty.Columns.Add("Retention");
                 dtempty.Columns.Add("consigneeid");
                 dtempty.Columns.Add("branchid");

                 DataRow dr = dtempty.NewRow();

                 dtemptynew.Columns.Add("Consignee");

                 dtemptynew.Columns.Add("CBM/Kgs");
                 dtemptynew.Columns.Add("Cont20");
                 dtemptynew.Columns.Add("Cont40");
                 dtemptynew.Columns.Add("Income");
                 dtemptynew.Columns.Add("Expense");
                 dtemptynew.Columns.Add("Retention");
                 dtemptynew.Columns.Add("consigneeid");
                 dtemptynew.Columns.Add("branchid");
                 for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                 {
                     double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                     DataTable dtLi = new DataTable();
                     DataView data1 = dt_AgentDtls.DefaultView;
                     string aa = dtnew.Rows[j]["consigneeid"].ToString().Trim();
                     data1.RowFilter = "consigneeid = '" + aa + "' ";
                     dtLi = data1.ToTable();   //DataView dv = new DataView(dt_jobwiseCost);

                     dr = dtemptynew.NewRow();
                     dtemptynew.Rows.Add();

                     dtemptynew.Rows[0]["Consignee"] = dtLi.Rows[0]["consignee"].ToString(); // +" , " + dtLi.Rows[0]["branch"].ToString();
                     for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                     {
                         //dtempty.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                         temp2 = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                         totalvou = totalvou + temp2;
                         dtemptynew.Rows[0]["CBM/Kgs"] = totalvou.ToString("#,0.00");
                         temp2 = Convert.ToInt32(dtLi.Rows[i]["cont20"].ToString());
                         total20 = total20 + temp2;
                         dtemptynew.Rows[0]["Cont20"] = total20.ToString("#,0");
                         temp2 = Convert.ToInt32(dtLi.Rows[i]["cont40"].ToString());
                         total40 = total40 + temp2;
                         dtemptynew.Rows[0]["Cont40"] = total40.ToString("#,0");

                         temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                         totalincome = totalincome + temp2;
                         dtemptynew.Rows[0]["Income"] = totalincome.ToString("#,0.00");
                         //totalincome = totalincome + Convert.ToDouble(dtempty.Rows[0]["income"].ToString());
                         temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                         totalexpense = totalexpense + temp2;
                         dtemptynew.Rows[0]["Expense"] = totalexpense.ToString("#,0.00");

                         //totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[0]["expense"].ToString());
                         temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                         totalretention = totalretention + temp2;
                         dtemptynew.Rows[0]["Retention"] = totalretention.ToString("#,0.00");
                         dtemptynew.Rows[0]["consigneeid"] = dtLi.Rows[i]["consigneeid"].ToString();
                         dtemptynew.Rows[0]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                         //dtempty.Rows.Add(dr);
                     }
                     double total1 = 0, total2 = 0, total3 = 0, total4 = 0, total5 = 0, total6 = 0;
                     temp2 = 0;
                     for (int i = 0; i <= dtemptynew.Rows.Count - 1; i++)
                     {
                         dr = dtempty.NewRow();
                         dtempty.Rows.Add();
                         int count = dtempty.Rows.Count - 1;
                         dtempty.Rows[count]["Consignee"] = dtemptynew.Rows[i]["Consignee"].ToString();
                         temp2 = Convert.ToDouble(dtemptynew.Rows[i]["CBM/Kgs"].ToString());
                         dtempty.Rows[count]["CBM/Kgs"] = temp2.ToString("#,0.00");
                         total1 = total1 + Convert.ToDouble(dtempty.Rows[count]["CBM/Kgs"]);

                         temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Cont20"].ToString());
                         dtempty.Rows[count]["Cont20"] = temp2.ToString("#,0");
                         total2 = total2 + Convert.ToDouble(dtempty.Rows[count]["Cont20"]);

                         temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Cont40"].ToString());
                         dtempty.Rows[count]["Cont40"] = temp2.ToString("#,0");
                         total3 = total3 + Convert.ToDouble(dtempty.Rows[count]["Cont40"]);

                         temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Income"].ToString());
                         dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                         total4 = total4 + Convert.ToDouble(dtempty.Rows[count]["Income"].ToString());

                         temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Expense"].ToString());
                         dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                         total5 = total5 + Convert.ToDouble(dtempty.Rows[count]["Expense"].ToString());

                         temp2 = Convert.ToDouble(dtemptynew.Rows[i]["Retention"].ToString());
                         dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                         total6 = total6 + Convert.ToDouble(dtempty.Rows[count]["Retention"].ToString());
                         dtempty.Rows[count]["consigneeid"] = dtemptynew.Rows[i]["consigneeid"].ToString();
                         dtempty.Rows[count]["branchid"] = dtemptynew.Rows[i]["branchid"].ToString();
                     }

                     totalgrandvou += total1;
                     totalgrand20 += total2;
                     totalgrand40 += total3;
                     totalincomegrand += total4;
                     totalexpensegrand += total5;
                     totalretentiongrand += total6;
                     dtemptynew.Clear();

                 }

                 dr = dtempty.NewRow();
                 dr["Consignee"] = "Total";
                 dr["CBM/Kgs"] = totalgrandvou.ToString("#,0.00");
                 dr["Cont20"] = totalgrand20.ToString("#,0");
                 dr["Cont40"] = totalgrand40.ToString("#,0");
                 dr["Income"] = totalincomegrand.ToString("#,0.00");
                 dr["Expense"] = totalexpensegrand.ToString("#,0.00");
                 dr["Retention"] = totalretentiongrand.ToString("#,0.00");
                 dtempty.Rows.Add(dr);
                 */
                grd_Consignee.DataSource = dt_AgentDtls;
                grd_Consignee.DataBind();
                signup.Visible = true;
                grd_Consignee.Visible = true;

                //grd_Agent.Rows[grd_Agent.Rows.Count - 1].Font.Bold = Utility.fn_Grd_GrandTotal_Bold();
                //grd_Agent.Rows[grd_Agent.Rows.Count - 1].ForeColor = Utility.fn_Grd_GrandTotal_Color();



                //if (dt_ConsigneeDtls.Rows.Count>0)
                //{
                //    DataRow dr_temp = dt_ConsigneeDtls.NewRow();
                //    temp2 = 0;
                //dr_temp[0] = "Total";
                //    temp2=Convert.ToDouble(dt_ConsigneeDtls.Compute("sum(Volume)", ""));
                //    dr_temp[1] = temp2.ToString("#,0.00");
                //dr_temp[2] = dt_ConsigneeDtls.Compute("sum(cont20)", "");
                //dr_temp[3] = dt_ConsigneeDtls.Compute("sum(cont40)", "");
                //temp2 = Convert.ToDouble(dt_ConsigneeDtls.Compute("sum(income)", ""));
                //dr_temp[4] =temp2.ToString("#,0.00");
                //temp2 = Convert.ToDouble(dt_ConsigneeDtls.Compute("sum(Expense)", ""));
                //dr_temp[5] =temp2.ToString("#,0.00");
                //temp2 = Convert.ToDouble(dt_ConsigneeDtls.Compute("sum(retention)", ""));
                //dr_temp[6] = temp2.ToString("#,0.00");

                //dt_ConsigneeDtls.Rows.Add(dr_temp);
                //grd_Consignee.Visible = true;
                //grd_Consignee.DataSource = dt_ConsigneeDtls;
                //grd_Consignee.DataBind();
            }
            else
            {
                grd_Consignee.DataSource = Utility.Fn_GetEmptyDataTable();
                grd_Consignee.DataBind();
            }

        }

        protected void grd_Consignee_SelectedIndexChanged(object sender, EventArgs e)
        {

            Load_Consignee();
        }

        protected void grd_Consignee_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[0].Text == "Total")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_consignee");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;

                }
                else if (e.Row.Cells[0].Text != "Total")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_Consignee, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
        }

        protected void grd_JobwiseCosting_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_JobCosting();
        }

        protected void grd_JobwiseCosting_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[2].Text == "&nbsp;")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_job");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
                else
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_JobwiseCosting, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }

        }

        protected void Grd_nomination_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[2].Text == "&nbsp;")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_Nomination");
                    //Lnk.Visible = false;

                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
                else
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(Grd_nomination, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
        }

        protected void Grd_nomination_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_Report.SelectedItem.Text == "Controlled By Us")
            {
                Load_Freehand();
            }
            else
            {
                Load_Nomination();
            }

        }

        protected void Grd_LogDetails_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[2].Text == "&nbsp;")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;

                }
            }
        }

        protected void grd_lossjob_SelectedIndexChanged(object sender, EventArgs e)
        {

            Load_loss();


        }


        protected void grd_lossjob_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[2].Text == "&nbsp;")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_Lossjob");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
                else if (e.Row.Cells[1].Text != "&nbsp;")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_jobloss, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }

        }

        protected void grd_operProfit_RowCreated(object sender, GridViewRowEventArgs e)
        {
            {
                GridViewRow row = e.Row;
                List<TableCell> columns = new List<TableCell>();
                foreach (DataControlField column in grd_operProfit.Columns)
                {
                    TableCell cell = row.Cells[0];
                    row.Cells.Remove(cell);
                    columns.Add(cell);
                }
                row.Cells.AddRange(columns.ToArray());
            }
            e.Row.Cells[1].Visible = true;

        }

        protected void grd_operProfit_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_profit();

        }

        protected void grd_operProfit_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {


                LinkButton _singleClickButton1 = (LinkButton)e.Row.Cells[0].Controls[0];
                string _jsSingle = ClientScript.GetPostBackClientHyperlink(_singleClickButton1, "");
                // Add events to each editable cell
                if (e.Row.Cells[0].Text != "Total")
                {
                    for (int columnIndex = 0; columnIndex < e.Row.Cells.Count; columnIndex++)
                    {
                        // Add the column index as the event argument parameter
                        string js = _jsSingle.Insert(_jsSingle.Length - 2, columnIndex.ToString());
                        // Add this javascript to the onclick Attribute of the cell
                        e.Row.Cells[columnIndex].Attributes["onclick"] = js;

                        // Add a cursor style to the cells
                        e.Row.Cells[columnIndex].Attributes["style"] += "cursor:pointer;cursor:hand;";
                        //e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_operProfit, "Select$" + e.Row.RowIndex);
                        e.Row.Attributes["style"] = "cursor:pointer";
                    }



                    for (int h = 2; h < e.Row.Cells.Count; h++)
                    {
                        double dbl_temp = 0;
                        e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;
                        if (double.TryParse(e.Row.Cells[h].Text.ToString(), out dbl_temp))
                        {
                            e.Row.Cells[h].Text = string.Format("{0:#,##0.00}", dbl_temp);
                        }
                    }
                }
                if (e.Row.Cells[1].Text == "Total")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }

            }



        }

        protected void grd_POD_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[1].Text == "Total" || e.Row.Cells[0].Text == "&nbsp;")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_PoD");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }

                if (e.Row.Cells[1].Text != "Total" || e.Row.Cells[0].Text != "&nbsp;")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_POD, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
        }

        protected void grd_POD_SelectedIndexChanged(object sender, EventArgs e)
        {

            Load_POD();


        }

        protected void grd_POL_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_Pol();


        }

        protected void grd_POL_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[1].Text == "Total" || e.Row.Cells[0].Text == "&nbsp;")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_Pol");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }

                if (e.Row.Cells[1].Text != "Total" || e.Row.Cells[0].Text != "&nbsp;")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_POL, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
        }

        protected void Grd_quotation_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_Quotation();
        }

        protected void Grd_quotation_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[2].Text == "&nbsp;")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_Quo");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
                if (e.Row.Cells[0].Text != "&nbsp;" && e.Row.Cells[1].Text != "&nbsp;")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(Grd_quotation, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
        }

        protected void grd_salesperson_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[1].Text == "Total")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
                else if (e.Row.Cells[1].Text != "Total")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_salesperson, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }

            }
        }

        protected void grd_salesperson_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_saelesperson();
        }

        protected void Grd_sectorwise_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[1].Text == "&nbsp;")
                {

                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
                if (e.Row.Cells[1].Text == "Total")
                {

                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
                if (e.Row.Cells[1].Text == "Grand Total")
                {

                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
            }
        }

        protected void Grd_sectorwise_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        protected void grd_Shipment_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[2].Text == "&nbsp;")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_shipment");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
                else if (e.Row.Cells[2].Text != "&nbsp;" && e.Row.Cells[0].Text != "&nbsp;")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_Shipment, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
        }

        protected void grd_Shipment_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_Shipment();
        }

        protected void Grd_shiperconsignee_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                //e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(Grd_shiperconsignee, "Select$" + e.Row.RowIndex);
                e.Row.Attributes["style"] = "cursor:pointer";

                LinkButton _singleClickButton = (LinkButton)e.Row.Cells[0].Controls[0];
                string _jsSingle = ClientScript.GetPostBackClientHyperlink(_singleClickButton, "");
                // Add events to each editable cell
                for (int columnIndex = 0; columnIndex < e.Row.Cells.Count; columnIndex++)
                {
                    // Add the column index as the event argument parameter
                    string js = _jsSingle.Insert(_jsSingle.Length - 2, columnIndex.ToString());
                    // Add this javascript to the onclick Attribute of the cell
                    e.Row.Cells[columnIndex].Attributes["onclick"] = js;

                    // Add a cursor style to the cells
                    e.Row.Cells[columnIndex].Attributes["style"] += "cursor:pointer;cursor:hand;";
                }


            }
        }

        protected void Grd_shiperconsignee_SelectedIndexChanged(object sender, EventArgs e)
        {
            //Load_Top50();
        }

        protected void grd_Shipper_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_Shipper();
        }

        protected void grd_Shipper_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[1].Text == "Total")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;

                }
                if (e.Row.Cells[0].Text != "&nbsp;" || e.Row.Cells[1].Text != "Total")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grd_Shipper, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
        }

        protected void grd_trendanalysis_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        protected void grd_trendanalysis_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.Cells[0].Text == "&nbsp;")
            {

                e.Row.ForeColor = System.Drawing.Color.Brown;
            }

            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                }
                if (ddl_Report.SelectedItem.Text == "Trend Analysis - Product" || ddl_Report.SelectedItem.Text == "Trend Analysis - Sales Person")
                {
                    for (int h = 1; h < e.Row.Cells.Count; h++)
                    {
                        e.Row.Cells[h].Attributes.CssStyle["text-align"] = "Right";

                    }

                }
                else
                {
                    for (int h = 3; h < e.Row.Cells.Count; h++)
                    {
                        e.Row.Cells[h].Attributes.CssStyle["text-align"] = "Right";

                    }
                }

            }



        }

        protected void grd_YearMIS_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.Cells[4].Text == "Total")
            {

                e.Row.ForeColor = System.Drawing.Color.Brown;
                e.Row.HorizontalAlign = HorizontalAlign.Center;
            }
            else
            {
                e.Row.HorizontalAlign = HorizontalAlign.Right;
            }

            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                }

                for (int h = 0; h < e.Row.Cells.Count; h++)
                {
                    if (h == 3)
                    {


                    }
                    else if (h == 4)
                    {

                    }
                    else if (h == 8)
                    {

                    }

                    else
                    {
                        e.Row.Cells[h].Attributes.CssStyle["text-align"] = "Right";
                    }
                }


            }
        }

        protected void Grd_Retention_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (e.Row.Cells[0].Text.ToString().StartsWith("Ocean Exports") || e.Row.Cells[0].Text.ToString().StartsWith("Ocean Imports") || e.Row.Cells[0].Text.ToString().StartsWith("Air Imports") || e.Row.Cells[0].Text.ToString().StartsWith("Air Exports"))
                {
                    e.Row.ForeColor = System.Drawing.Color.Maroon;
                }

                else if (e.Row.Cells[0].Text.ToString().StartsWith("Agent"))
                {
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.ForeColor = System.Drawing.Color.Maroon;
                }
                else if (e.Row.Cells[1].Text.ToString() == "Controlled")
                {
                    e.Row.ForeColor = System.Drawing.Color.Maroon;
                    e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Right;
                }
                else if (e.Row.Cells[0].Text.ToString() == "Summary")
                {
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.ForeColor = System.Drawing.Color.Maroon;
                }
                else if (e.Row.Cells[0].Text.ToString() == "Retention (Consol + LCL + FCL)")
                {
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.ForeColor = System.Drawing.Color.Maroon;
                }
                else if (e.Row.Cells[0].Text.ToString() == "Teus (Consol + FCL)")
                {
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.ForeColor = System.Drawing.Color.Maroon;
                }
                else if (e.Row.Cells[0].Text.ToString() == "CBM (Consol + LCL)")
                {
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.ForeColor = System.Drawing.Color.Maroon;
                }
                for (int h = 1; h < e.Row.Cells.Count; h++)
                {
                    double dbl_temp = 0;

                    if (double.TryParse(e.Row.Cells[h].Text.ToString(), out dbl_temp))
                    {
                        e.Row.Cells[h].Attributes.CssStyle["text-align"] = "Right";
                        e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[h].Text = string.Format("{0:#,##0.00}", dbl_temp);
                    }

                }

                //if (e.Row.Cells[0].Text == "Total")
                //{
                //    e.Row.ForeColor = System.Drawing.Color.Brown;
                //    for (int h = 1; h < e.Row.Cells.Count; h++)
                //    {

                //    }
                //}

            }
        }

        protected void ddl_branch_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_product.Text == "Income Statement")
            {
                if (ddl_branch.SelectedIndex != 0)
                {
                    if (ddl_branch.Text == "All")
                    {
                        intBranchID = 0;
                    }
                    else
                    {
                        NPortID = PortObj.GetNPortid(ddl_branch.Text.Trim());
                        intBranchID = HREmpobj.GetBranchId(intDivID, ddl_branch.Text.Trim());
                    }
                }
            }

            else if (ddl_product.Text == "Tradelane")
            {
                if (ddl_branch.SelectedItem.Text == "ALL")
                {
                    int_bid = 0;
                }
                else
                {
                    int_bid = da_obj_HrEmp.GetBranchId(Convert.ToInt32(ddl_division.SelectedValue.ToString()), ddl_branch.SelectedItem.Text);
                }
            }
            else
            {
                GridClear();
                txt_agent.Text = "";
            }
        }

        protected void Grd_freeVsnomi_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[1].Text != "Total" && e.Row.Cells[0].Text != "&nbsp;")
                {

                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(Grd_freeVsnomi, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";

                }
                if (e.Row.Cells[0].Text == "&nbsp;" || e.Row.Cells[1].Text == "Total")
                {
                    //LinkButton Lnk = (LinkButton)e.Row.Cells[e.Row.Cells.Count - 1].FindControl("Lnk_freeVSnomi");
                    //Lnk.Visible = false;
                    e.Row.ForeColor = System.Drawing.Color.Brown;

                }
            }
        }

        protected void grdBooking_PreRender(object sender, EventArgs e)
        {

        }

        protected void GRD_Common_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (e.Row.Cells[7].Text == "Total")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;

                }
                else if (e.Row.Cells[6].Text == "Total")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;

                }
                if (e.Row.Cells[0].Text == "&nbsp;")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[1].Text.ToString().Replace("&nbsp;", "").Trim() != "" || e.Row.Cells[2].Text.ToString().Replace("&nbsp;", "").Trim() != "")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(GRD_Common, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }

                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                int i;
                if (ddl_Report.SelectedItem.Text == "Operating Profit")
                {
                    i = 3;
                }
                else
                {
                    i = 6;
                }
                for (int h = 0; h < e.Row.Cells.Count; h++)
                {

                    double dbl_temp = 0;
                    int int_temp = 0;
                    if (double.TryParse(e.Row.Cells[h].Text.ToString(), out dbl_temp))
                    {
                        e.Row.Cells[h].Attributes.CssStyle["text-align"] = "Right";
                        e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;
                        if (double.TryParse(e.Row.Cells[h].Text.ToString(), out dbl_temp) && (int.TryParse(e.Row.Cells[h].Text.ToString(), out int_temp) == false))
                        {
                            e.Row.Cells[h].Text = string.Format("{0:#,##0.00}", dbl_temp);
                        }
                    }

                }
                if (e.Row.Cells[0].Text.ToString().Replace("&nbsp;", "").Trim() == "" && e.Row.Cells[1].Text.ToString().Replace("&nbsp;", "").Trim() == "")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                }
            }
        }

        protected void GRD_Common_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
              //  DataAccess.MISGrd obj_misgrd = new DataAccess.MISGrd();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                int int_jobno = 0;
                string str_trantype = "", str_Script = "", trantype = "";
                str_trantype = Session["StrTranType"].ToString();

                if (ddl_Report.SelectedItem.Text == "Jobwise  P&L")
                {
                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[0].Text.ToString());
                    Session["jobno"] = int_jobno;
                    //trantype = GRD_Common.SelectedRow.Cells[12].Text.ToString();     
                    trantype = hd_product.Value;
                }
                else if (ddl_Report.SelectedItem.Text == "By BL /AWB")
                {

                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "By Shipper")
                {

                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "By Consignee")
                {
                    if (bid == 0)
                    {
                        int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                        Session["jobno"] = int_jobno;
                        trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                    }
                    //else
                    //{
                    //    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    //    Session["jobno"] = int_jobno;
                    //    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                    //}

                }
                else if (ddl_Report.SelectedItem.Text == "By Agent")
                {

                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "By Sales Person")
                {

                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "Controlled By Agent")
                {

                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "Controlled By Us")
                {

                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "By POL")
                {

                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "By POD")
                {
                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "Loss Jobs")
                {
                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "DO Register")
                {
                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "Top 50 Customer")
                {
                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "Operating Profit")
                {
                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                }
                else if (ddl_Report.SelectedItem.Text == "Agent Controlled Vs Our Controlled")
                {
                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[1].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                    string Branch = GRD_Common.SelectedRow.Cells[9].Text.ToString();
                    bid = HREmpobj.GetBranchId(did, Branch);
                }
                else if (ddl_Report.SelectedItem.Text == "By Customer")
                {
                    int_jobno = int.Parse(GRD_Common.SelectedRow.Cells[0].Text.ToString());
                    Session["jobno"] = int_jobno;
                    trantype = hd_product.Value;
                    //trantype = GRD_Common.SelectedRow.Cells[0].Text.ToString();
                    //string Branch = GRD_Common.SelectedRow.Cells[9].Text.ToString();
                    //bid = HREmpobj.GetBranchId(did, Branch);
                }
                if (int_jobno == 0)
                {
                    return;
                }
                else
                {
                    //if (str_trantype == "AC")
                    //{
                    //    Session["trantype"] = trantype;
                    //}
                    //else 
                    if (bid == 0)
                    {
                        bid = Convert.ToInt32(hd_branchID.Value);
                        Session["bid"] = bid;
                    }
                    else
                    {
                        Session["bid"] = bid;
                    }
                    if (str_trantype == "CO")
                    {
                        Session["trantype"] = trantype;
                    }
                    else
                    {
                        Session["trantype"] = trantype;
                    }
                    Session["Budget"] = null;


                    Session["Budget"] = "Miscorporate";
                    /* str_Script = "window.open('../FormMain.aspx');";
                     //str_Script = "window.open('../ForwardExports/CostingDetails.aspx');";
                     ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "Master", str_Script, true);*/


                    this.popuprate.Show();
                    Panel3.Visible = true;
                    iframe_buyratequery.Attributes["src"] = "../ForwardExports/CostingDetails.aspx";
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }



        //------------------------------------


        protected void Load_Agent()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, intshipper, branchid = 0;
                string ship;
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_Agent.SelectedRow.RowIndex;
                string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                string str_todate = Utility.fn_ConvertDate(txt_to.Text);
               // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
                DataTable obj_dtjob = new DataTable();

                if (bid == 0)
                {
                    bid = Convert.ToInt32(grd_Agent.Rows[index].Cells[9].Text);
                    hd_branchID.Value = bid.ToString();
                    intshipper = Convert.ToInt32(grd_Agent.Rows[index].Cells[8].Text);
                    ship = HttpUtility.HtmlDecode(grd_Agent.Rows[index].Cells[1].Text);
                    dtcell = misgrdobj.GetshipmentDetails4Agent1(intshipper, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, did);
                }
                else
                {
                    intshipper = Convert.ToInt32(grd_Agent.Rows[index].Cells[8].Text);
                    ship = HttpUtility.HtmlDecode((grd_Agent.Rows[index].Cells[1].Text));
                    dtcell = misgrdobj.GetshipmentDetails4AgentOld(intshipper, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, did);

                }
                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_Agent.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    //dtempty.Columns.Add("Branch");
                    dtempty.Columns.Add("Product");

                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("BL #");
                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {

                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        //dtempty.Rows[count]["Branch"] = dtcell.Rows[i]["branch"].ToString();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["consignee"].ToString();
                        dtempty.Rows[count]["Agent"] = ship;
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);

                        if (bid == 0)
                        {
                            dtempty.Rows[count]["branchid"] = dtcell.Rows[i]["branchid"].ToString();
                            hd_branchID.Value = dtcell.Rows[i]["branchid"].ToString();
                        }
                        else
                        {
                            dtempty.Rows[count]["branchid"] = bid;
                        }

                        //totalgrand20 += total20;
                        //totalgrand40 += total40;
                        //totalgrandvou += totalvou;
                        //totalincomegrand += totalincome;
                        //totalexpensegrand += totalexpense;
                        //totalretentiongrand += totalretention;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;

                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }

                obj_dtjob = da_obj_misgrd.GetTeus4Agent(intshipper, bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), transtype, Convert.ToInt32(Session["LoginDivisionId"].ToString()));
                if (obj_dtjob.Rows.Count > 0)
                {
                    this.popup1.Show();
                    grdshipteusdtlscor.DataSource = obj_dtjob;
                    grdshipteusdtlscor.DataBind();
                }

                DataSet dt_Liner = new DataSet();
                DataTable dtemptyfree = new DataTable();

                dt_Liner = da_obj_misgrd.GetTeus4AgentYearwisecor(intshipper, bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), transtype, did); ;

                DataRow[] dr1 = new DataRow[dt_Liner.Tables[0].Rows.Count];
                dt_Liner.Tables[0].Rows.CopyTo(dr1, 0);
                //int[] dblPrice = Array.ConvertAll(dr1, new Converter<DataRow, Int32>(DataRowToDouble));

                if (dt_Liner.Tables[1].Rows.Count > 0)
                {
                    dtemptyfree.Columns.Add("month");
                    dtemptyfree.Columns.Add("branch");
                    dtemptyfree.Columns.Add("trantype");
                    dtemptyfree.Columns.Add("vol1");
                    dtemptyfree.Columns.Add("teus1");
                    dtemptyfree.Columns.Add("weight1");
                    dtemptyfree.Columns.Add("retention1");
                    dtemptyfree.Columns.Add("vol2");
                    dtemptyfree.Columns.Add("teus2");
                    dtemptyfree.Columns.Add("weight2");
                    dtemptyfree.Columns.Add("retention2");

                    DataRow dr = dtemptyfree.NewRow();
                    for (int j = 0; j <= dt_Liner.Tables[1].Rows.Count - 1; j++)
                    {
                        dr = dtemptyfree.NewRow();
                        dr["month"] = dt_Liner.Tables[1].Rows[j]["month"].ToString();
                        dr["branch"] = dt_Liner.Tables[1].Rows[j]["branch"].ToString();
                        if (dt_Liner.Tables[1].Rows[j]["trantype"].ToString() == "FE")
                        {
                            dr["trantype"] = "OE";
                        }
                        else if (dt_Liner.Tables[1].Rows[j]["trantype"].ToString() == "FI")
                        {
                            dr["trantype"] = "OI";
                        }
                        else
                        {
                            dr["trantype"] = dt_Liner.Tables[1].Rows[j]["trantype"].ToString();
                        }
                        dr["vol1"] = dt_Liner.Tables[1].Rows[j]["volume"].ToString();
                        dr["teus1"] = dt_Liner.Tables[1].Rows[j]["teus"].ToString();
                        dr["weight1"] = dt_Liner.Tables[1].Rows[j]["weight"].ToString();
                        dr["retention1"] = dt_Liner.Tables[1].Rows[j]["retention"].ToString();
                        dr["vol2"] = dt_Liner.Tables[1].Rows[j]["volume1"].ToString();
                        dr["teus2"] = dt_Liner.Tables[1].Rows[j]["teus1"].ToString();
                        dr["weight2"] = dt_Liner.Tables[1].Rows[j]["weight1"].ToString();
                        dr["retention2"] = dt_Liner.Tables[1].Rows[j]["retention1"].ToString();

                        dtemptyfree.Rows.Add(dr);
                        //}
                        if (dtemptyfree.Rows.Count > 0)
                        {
                            this.popup1.Show();
                            grdyearcor.DataSource = dtemptyfree;
                            grdyearcor.DataBind();
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_Consignee()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, intshipper, branchid = 0;
                string ship;
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_Consignee.SelectedRow.RowIndex;
                string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                string str_todate = Utility.fn_ConvertDate(txt_to.Text);
               // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
                DataTable obj_dtjob = new DataTable();
                if (bid == 0)
                {
                    intshipper = Convert.ToInt32(grd_Consignee.Rows[index].Cells[8].Text);
                    bid = Convert.ToInt32(grd_Consignee.Rows[index].Cells[9].Text);
                    hd_branchID.Value = bid.ToString();
                    ship = HttpUtility.HtmlDecode(grd_Consignee.Rows[index].Cells[0].Text);
                    dtcell = miscorobj.GetshipmentDetails4ConsigneeCorpNew(intshipper, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }
                else
                {
                    intshipper = Convert.ToInt32(grd_Consignee.Rows[index].Cells[8].Text);
                    ship = HttpUtility.HtmlDecode((grd_Consignee.Rows[index].Cells[0].Text));
                    dtcell = miscorobj.GetshipmentDetails4ConsigneeCorp(intshipper, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }

                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_Consignee.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();
                    if (bid == 0)
                    {
                        dtempty.Columns.Add("Branch");
                    }

                    dtempty.Columns.Add("Product");

                    dtempty.Columns.Add("Job #");
                    if (transtype != "CH")
                    {
                        dtempty.Columns.Add("BL #");
                    }
                    else
                    {
                        dtempty.Columns.Add("Doc #");
                    }

                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {

                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        if (bid == 0)
                        {
                            dtempty.Rows[count]["Branch"] = dtcell.Rows[i]["branch"].ToString();
                        }
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        if (transtype != "CH")
                        {
                            dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        }
                        else
                        {
                            dtempty.Rows[count]["Doc #"] = dtcell.Rows[i]["blno"].ToString();
                        }

                        dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        dtempty.Rows[count]["Consignee"] = ship;
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);


                        dtempty.Rows[count]["branchid"] = dtcell.Rows[i]["branchid"].ToString();
                        //totalgrand20 += total20;
                        //totalgrand40 += total40;
                        //totalgrandvou += totalvou;
                        //totalincomegrand += totalincome;
                        //totalexpensegrand += totalexpense;
                        //totalretentiongrand += totalretention;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;

                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }

                obj_dtjob = da_obj_misgrd.GetTeus4consignee(intshipper, bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), transtype, Convert.ToInt32(Session["LoginDivisionId"].ToString()));
                if (obj_dtjob.Rows.Count > 0)
                {
                    this.popup1.Show();
                    grdshipteusdtlscor.DataSource = obj_dtjob;
                    grdshipteusdtlscor.DataBind();
                }

                DataSet dt_Liner = new DataSet();
                DataTable dtemptyfree = new DataTable();

                dt_Liner = da_obj_misgrd.GetTeus4ConsigneeYearwisecor(intshipper, bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), transtype, did); ;

                DataRow[] dr1 = new DataRow[dt_Liner.Tables[0].Rows.Count];
                dt_Liner.Tables[0].Rows.CopyTo(dr1, 0);
                //int[] dblPrice = Array.ConvertAll(dr1, new Converter<DataRow, Int32>(DataRowToDouble));

                if (dt_Liner.Tables[1].Rows.Count > 0)
                {
                    dtemptyfree.Columns.Add("month");
                    dtemptyfree.Columns.Add("branch");
                    dtemptyfree.Columns.Add("trantype");
                    dtemptyfree.Columns.Add("vol1");
                    dtemptyfree.Columns.Add("teus1");
                    dtemptyfree.Columns.Add("weight1");
                    dtemptyfree.Columns.Add("retention1");
                    dtemptyfree.Columns.Add("vol2");
                    dtemptyfree.Columns.Add("teus2");
                    dtemptyfree.Columns.Add("weight2");
                    dtemptyfree.Columns.Add("retention2");

                    DataRow dr = dtemptyfree.NewRow();
                    for (int j = 0; j <= dt_Liner.Tables[1].Rows.Count - 1; j++)
                    {
                        dr = dtemptyfree.NewRow();
                        dr["month"] = dt_Liner.Tables[1].Rows[j]["month"].ToString();
                        dr["branch"] = dt_Liner.Tables[1].Rows[j]["branch"].ToString();
                        if (dt_Liner.Tables[1].Rows[j]["trantype"].ToString() == "FE")
                        {
                            dr["trantype"] = "OE";
                        }
                        else if (dt_Liner.Tables[1].Rows[j]["trantype"].ToString() == "FI")
                        {
                            dr["trantype"] = "OI";
                        }
                        else
                        {
                            dr["trantype"] = dt_Liner.Tables[1].Rows[j]["trantype"].ToString();
                        }

                        dr["vol1"] = dt_Liner.Tables[1].Rows[j]["volume"].ToString();
                        dr["teus1"] = dt_Liner.Tables[1].Rows[j]["teus"].ToString();
                        dr["weight1"] = dt_Liner.Tables[1].Rows[j]["weight"].ToString();
                        dr["retention1"] = dt_Liner.Tables[1].Rows[j]["retention"].ToString();
                        dr["vol2"] = dt_Liner.Tables[1].Rows[j]["volume1"].ToString();
                        dr["teus2"] = dt_Liner.Tables[1].Rows[j]["teus1"].ToString();
                        dr["weight2"] = dt_Liner.Tables[1].Rows[j]["weight1"].ToString();
                        dr["retention2"] = dt_Liner.Tables[1].Rows[j]["retention1"].ToString();

                        dtemptyfree.Rows.Add(dr);
                        //}
                        if (dtemptyfree.Rows.Count > 0)
                        {
                            this.popup1.Show();
                            grdyearcor.DataSource = dtemptyfree;
                            grdyearcor.DataBind();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_Nomination()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno, branchid = 0;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = Grd_nomination.SelectedRow.RowIndex;
                if (bid == 0)
                {
                    jobno = Convert.ToInt32(Grd_nomination.Rows[index].Cells[2].Text);
                    bid = Convert.ToInt32(Grd_nomination.Rows[index].Cells[10].Text);
                    hd_branchID.Value = bid.ToString();
                    Product = HttpUtility.HtmlDecode(Grd_nomination.Rows[index].Cells[1].Text);
                }
                else
                {
                    jobno = Convert.ToInt32(Grd_nomination.Rows[index].Cells[2].Text);
                    Product = HttpUtility.HtmlDecode((Grd_nomination.Rows[index].Cells[1].Text));
                }
                //dtcell = miscorobj.GetshipmentDetails4ConsigneeCorp(intshipper, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                dtcell = misgrdobj.GetshipmentDetailsfromjobnoNew(Product, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), jobno, did, "N");
                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    Grd_nomination.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("Product");

                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("Job type");
                    dtempty.Columns.Add("BL #");
                    dtempty.Columns.Add("Nomination");
                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {

                        if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 1)
                        {
                            jobtype = "Consol";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 2)
                        {
                            jobtype = "Co-Load";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 3)
                        {
                            jobtype = "FCL";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 4)
                        {
                            jobtype = "MCC";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 5)
                        {
                            jobtype = "Buyer Consol";
                        }

                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        dtempty.Rows[count]["Job type"] = jobtype;
                        dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        dtempty.Rows[count]["Nomination"] = dtcell.Rows[i]["Nomination"].ToString();
                        dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["consignee"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);


                        dtempty.Rows[count]["branchid"] = bid;
                        //totalgrand20 += total20;
                        //totalgrand40 += total40;
                        //totalgrandvou += totalvou;
                        //totalincomegrand += totalincome;
                        //totalexpensegrand += totalexpense;
                        //totalretentiongrand += totalretention;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;

                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_Freehand()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno, branchid = 0;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = Grd_nomination.SelectedRow.RowIndex;
                if (bid == 0)
                {
                    jobno = Convert.ToInt32(Grd_nomination.Rows[index].Cells[2].Text);
                    bid = Convert.ToInt32(Grd_nomination.Rows[index].Cells[10].Text);
                    hd_branchID.Value = bid.ToString();
                    Product = HttpUtility.HtmlDecode(Grd_nomination.Rows[index].Cells[1].Text);
                }
                else
                {
                    jobno = Convert.ToInt32(Grd_nomination.Rows[index].Cells[2].Text);
                    Product = HttpUtility.HtmlDecode((Grd_nomination.Rows[index].Cells[1].Text));
                }
                //dtcell = miscorobj.GetshipmentDetails4ConsigneeCorp(intshipper, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                dtcell = misgrdobj.GetshipmentDetailsfromjobnoNew(Product, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), jobno, did, "F");
                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    Grd_nomination.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("Product");

                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("Job type");
                    dtempty.Columns.Add("BL #");
                    dtempty.Columns.Add("Nomination");
                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {

                        if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 1)
                        {
                            jobtype = "Consol";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 2)
                        {
                            jobtype = "Co-Load";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 3)
                        {
                            jobtype = "FCL";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 4)
                        {
                            jobtype = "MCC";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 5)
                        {
                            jobtype = "Buyer Consol";
                        }

                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        dtempty.Rows[count]["Job type"] = jobtype;
                        dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        dtempty.Rows[count]["Nomination"] = dtcell.Rows[i]["Nomination"].ToString();
                        dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["consignee"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);


                        dtempty.Rows[count]["branchid"] = bid;
                        //totalgrand20 += total20;
                        //totalgrand40 += total40;
                        //totalgrandvou += totalvou;
                        //totalincomegrand += totalincome;
                        //totalexpensegrand += totalexpense;
                        //totalretentiongrand += totalretention;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;

                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;

                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_loss()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno, branchid = 0;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_jobloss.SelectedRow.RowIndex;
                jobno = Convert.ToInt32(grd_jobloss.Rows[index].Cells[2].Text);
                branchid = Convert.ToInt32(grd_jobloss.Rows[index].Cells[8].Text);
                Product = HttpUtility.HtmlDecode(grd_jobloss.Rows[index].Cells[1].Text);
                hd_branchID.Value = branchid.ToString();
                hd_product.Value = Product.ToString();
                dtcell = misgrdobj.GetJobDetailsFrmoJobNew(jobno, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), transtype, did);
                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_jobloss.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("Product");

                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("VslVoy");
                    dtempty.Columns.Add("Liner");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {

                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = Product;
                        dtempty.Rows[count]["Job #"] = jobno;
                        dtempty.Rows[count]["VslVoy"] = dtcell.Rows[i]["vslvoy"].ToString();
                        dtempty.Rows[count]["Liner"] = dtcell.Rows[i]["liner"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);


                        dtempty.Rows[count]["branchid"] = branchid;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Grd_freeVsnomi_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_freeVSNomi();
        }


        protected void Load_freeVSNomi()
        {
            try
            {
                DataTable dtcell = new DataTable();
                DataTable dtNew = new DataTable();
                int index, jobno, branchid = 0, intjobtype = 0;
                string Product, jobtype = "", trantype = "", tran = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = Grd_freeVsnomi.SelectedRow.RowIndex;
                if (Grd_freeVsnomi.Rows.Count > 0)
                {
                    Product = Grd_freeVsnomi.Rows[index].Cells[0].Text;
                    hf_tran.Value = Product;
                    if (Product == "Air Imports  ")
                    {
                        intjobtype = 0;
                        trantype = "Air Imports  ";
                    }
                    else if (Product == "Air Exports  ")
                    {
                        intjobtype = 0;
                        trantype = "Air Exports  ";
                    }
                    else
                    {
                        trantype = Product.Substring(0, 14);
                        if (Product.Substring(14) == "FCL")
                        {
                            jobtype = Product.Substring(14, 3);
                        }
                        else if (Product.Substring(14) == "LCL")
                        {
                            jobtype = Product.Substring(14, 3);
                        }
                        else if (Product.Substring(14) == "Consol")
                        {
                            jobtype = Product.Substring(14, 3);
                        }
                        if (trantype == "Ocean Exports ")
                        {
                            if (Product.Substring(14) != "FCL")
                            {
                                jobtype = Product.Substring(14, 3);
                            }
                        }
                    }

                    if (trantype == "Air Imports  ")
                    {
                        tran = "AI";
                    }
                    if (trantype == "Air Exports  ")
                    {
                        tran = "AE";
                    }
                    if (trantype == "Ocean Exports ")
                    {
                        tran = "FE";
                    }
                    if (trantype == "Ocean Imports ")
                    {
                        tran = "FI";
                    }
                    if (trantype == "C H A")
                    {
                        tran = "CH";
                    }
                    if (trantype == "Data WareHousing")
                    {
                        tran = "FC";
                    }

                    if (jobtype == "Consol")
                    {
                        intjobtype = 1;
                    }
                    else if (jobtype == "FCL")
                    {
                        intjobtype = 3;
                    }
                    else if (jobtype == "BuyerConsol")
                    {
                        intjobtype = 5;
                    }
                    else if (jobtype == "MCC")
                    {
                        intjobtype = 4;
                    }
                    else if (jobtype == "LCL")
                    {
                        intjobtype = 2;
                    }
                }
                if (bid != 0)
                {

                    dtcell = misgrdobj.GetNVsFFromJobtype(tran, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), intjobtype);
                }
                else
                {
                    dtcell = miscorobj.GetNVsFFromJobtype4Corp(tran, did, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), intjobtype);
                }


                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    Grd_freeVsnomi.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtemptyfree = new DataTable();
                    dtemptyfree.Columns.Add("Product");
                    dtemptyfree.Columns.Add("Job #");
                    dtemptyfree.Columns.Add("Nomination");
                    dtemptyfree.Columns.Add("Volume");
                    dtemptyfree.Columns.Add("Cont 20");
                    dtemptyfree.Columns.Add("Cont 40");
                    dtemptyfree.Columns.Add("Income");
                    dtemptyfree.Columns.Add("Expense");
                    dtemptyfree.Columns.Add("Retention");
                    dtemptyfree.Columns.Add("Branch");
                    dtemptyfree.Columns.Add("branchid");

                    DataView dv_co = new DataView(dtcell);
                    dtNew = dv_co.ToTable(true, "trantype");
                    dv_co = new DataView(dtNew);
                    dv_co.Sort = "trantype";
                    dtNew = dv_co.ToTable();
                    DataRow dr = dtemptyfree.NewRow();
                    for (int j = 0; j <= dtNew.Rows.Count - 1; j++)
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        DataTable dtLi = new DataTable();
                        DataView data1 = dtcell.DefaultView;
                        data1.RowFilter = "trantype = '" + dtNew.Rows[j]["trantype"] + "' ";
                        dtLi = data1.ToTable();
                        // count1=dtLi.Rows.Count;
                        if (dtLi.Rows.Count > 0)
                        {

                            dr = dtemptyfree.NewRow();
                            dr["Product"] = hf_tran.Value;
                            //dr["trantype"] = "";
                            //dr["jobno"] = "";
                            //dr["nomination"] = "";
                            //dr["quotcustomer"] = "";
                            //dr["volume"] = "";
                            //dr["cont20"] = "";
                            //dr["cont40"] = "";
                            //dr["income"] = "";
                            //dr["expense"] = "";
                            //dr["retention"] = "";

                            dtemptyfree.Rows.Add(dr);



                            for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                            {

                                dr = dtemptyfree.NewRow();
                                dtemptyfree.Rows.Add();
                                int count = dtemptyfree.Rows.Count - 1;
                                dtemptyfree.Rows[count]["Product"] = dtLi.Rows[i]["trantype"].ToString();
                                dtemptyfree.Rows[count]["Job #"] = dtLi.Rows[i]["jobno"].ToString();
                                dtemptyfree.Rows[count]["Nomination"] = dtLi.Rows[i]["nomination"].ToString();
                                double tempvolu = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());  //Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                                dtemptyfree.Rows[count]["Volume"] = tempvolu.ToString("#,0.00");
                                totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());
                                dtemptyfree.Rows[count]["Cont 20"] = dtLi.Rows[i]["cont20"].ToString();
                                total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                dtemptyfree.Rows[count]["Cont 40"] = dtLi.Rows[i]["cont40"].ToString();
                                total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                dtemptyfree.Rows[count]["Income"] = temp2.ToString("#,0.00");

                                totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                dtemptyfree.Rows[count]["Expense"] = temp2.ToString("#,0.00");

                                totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                dtemptyfree.Rows[count]["Retention"] = temp2.ToString("#,0.00");

                                totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                dtemptyfree.Rows[count]["Branch"] = dtLi.Rows[i]["branch"].ToString();
                                dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                                //dtemptyfree.Rows.Add(dr);
                            }


                            dr = dtemptyfree.NewRow();
                            dr["Nomination"] = dtNew.Rows[j]["trantype"] + "-" + "Total";
                            dr["Volume"] = totalvou.ToString("#,0.00");
                            dr["Cont 20"] = total20;
                            dr["Cont 40"] = total40;
                            dr["Income"] = totalincome.ToString("#,0.00");
                            dr["Expense"] = totalexpense.ToString("#,0.00");
                            dr["Retention"] = totalretention.ToString("#,0.00");
                        }
                        dtemptyfree.Rows.Add(dr);


                    }
                    dtemptyfree.Columns.RemoveAt(dtemptyfree.Columns.Count - 1);
                    GRD_Common.DataSource = dtemptyfree;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;

                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }


        protected void Load_JobCosting()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno = 0, branchid = 0;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_JobwiseCosting.SelectedRow.RowIndex;

                if (bid == 0)
                {
                    jobno = Convert.ToInt32(grd_JobwiseCosting.Rows[index].Cells[3].Text);
                    Product = grd_JobwiseCosting.Rows[index].Cells[2].Text;

                    if (Product == "Air Exports")
                    {
                        Product = "AE";
                    }
                    else if (Product == "Air Imports")
                    {
                        Product = "AI";
                    }
                    else if (Product == "Ocean Exports")
                    {
                        Product = "FE";
                    }
                    else if (Product == "Ocean Imports")
                    {
                        Product = "FI";
                    }
                    else if (Product == "C H A")
                    {
                        Product = "CH";
                    }
                    bid = Convert.ToInt32(grd_JobwiseCosting.Rows[index].Cells[9].Text);
                    hd_branchID.Value = bid.ToString();
                    hd_product.Value = Product;
                }
                else
                {
                    jobno = Convert.ToInt32(grd_JobwiseCosting.Rows[index].Cells[3].Text);
                    Product = grd_JobwiseCosting.Rows[index].Cells[2].Text;
                    hd_product.Value = Product;
                }

                dtcell = misgrdobj.GetJobDetailsFrmoJobNew(jobno, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Product, did);

                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_JobwiseCosting.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("VslVoy");
                    dtempty.Columns.Add("Liner");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {

                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();

                        dtempty.Rows[count]["Job #"] = jobno;
                        dtempty.Rows[count]["VslVoy"] = dtcell.Rows[i]["vslvoy"].ToString();
                        dtempty.Rows[count]["Liner"] = dtcell.Rows[i]["liner"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);


                        dtempty.Rows[count]["branchid"] = branchid;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }


        protected void Load_profit()
        {
            try
            {
                DataTable dtcell = new DataTable();
                DataTable dtNew = new DataTable();
                string transtype = "";
                int index, indexcell, jobno = 0, branchid = 0;
                string Product = "", jobtype = "", trantype = "", tran = "";

                int did = 0;
                if (Session["LoginDivisionid"] != null)
                {
                    did = Convert.ToInt32(Session["LoginDivisionid"].ToString());
                }

                if (Session["StrTranType"] != null)
                {
                    transtype = Session["StrTranType"].ToString();
                }

                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);

                //indexcell = grd_operProfit;

                //index = grd_operProfit.SelectedRow.RowIndex;
                //indexcell = Convert.ToInt32(Session["cellindexOP"]);
                if (grd_operProfit.Rows.Count > 0)
                {
                    trantype = (string)Session["HeadOP"];
                }

                if (bid == 0)
                {
                    index = Convert.ToInt32(Session["Rowindex"]);
                    temp2 = Convert.ToDouble(grd_operProfit.Rows[index].Cells[2].Text);
                    bid = Convert.ToInt32(temp2);
                    hd_branchID.Value = bid.ToString();
                }

                dtcell = misgrdobj.Getshipmentnew(trantype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_operProfit.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("Product");

                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("Nomination");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    DataView dv_co = new DataView(dtcell);
                    dtNew = dv_co.ToTable(true, "trantype");
                    dv_co = new DataView(dtNew);
                    dv_co.Sort = "trantype";
                    dtNew = dv_co.ToTable();

                    for (int j = 0; j <= dtNew.Rows.Count - 1; j++)
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        DataTable dtLi = new DataTable();
                        DataView data1 = dtcell.DefaultView;
                        data1.RowFilter = "trantype = '" + dtNew.Rows[j]["trantype"] + "' ";
                        dtLi = data1.ToTable();
                        // count1=dtLi.Rows.Count;
                        dr = dtempty.NewRow();
                        if (dtNew.Rows[j]["trantype"].ToString() == "AI")
                        {
                            tran = "Air Imports";
                        }
                        else if (dtNew.Rows[j]["trantype"].ToString() == "AE")
                        {
                            tran = "Air Exports";
                        }
                        else if (dtNew.Rows[j]["trantype"].ToString() == "FE")
                        {
                            tran = "Ocean Exports";
                        }
                        else if (dtNew.Rows[j]["trantype"].ToString() == "FI")
                        {
                            tran = "Ocean Imports";
                        }
                        else if (dtNew.Rows[j]["trantype"].ToString() == "CH")
                        {
                            tran = "C H A";
                        }
                        else if (dtNew.Rows[j]["trantype"].ToString() == "CH")
                        {
                            tran = "Data WareHousing";
                        }
                        // dtempty.Rows.Add();
                        dr["Product"] = tran;


                        dtempty.Rows.Add(dr);

                        for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                        {

                            //dr = dtempty.NewRow();


                            int count = dtempty.Rows.Count;
                            dr = dtempty.NewRow();
                            dtempty.Rows.Add();

                            dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                            dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                            dtempty.Rows[count]["Nomination"] = dtcell.Rows[i]["Nomination"].ToString();
                            temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                            dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                            totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                            temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                            dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                            total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                            temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                            dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                            total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                            temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                            dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                            totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                            temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                            dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                            totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                            temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                            dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                            totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);


                            dtempty.Rows[count]["branchid"] = bid;
                        }
                        dr = dtempty.NewRow();
                        dr["Nomination"] = "Total";
                        dr["volume"] = totalvou.ToString("#,0.00");
                        dr["Cont 20"] = total20;
                        dr["Cont 40"] = total40;
                        dr["Income"] = totalincome.ToString("#,0.00");
                        dr["Expense"] = totalexpense.ToString("#,0.00");
                        dr["Retention"] = totalretention.ToString("#,0.00");
                        dtempty.Rows.Add(dr);
                        dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                        GRD_Common.DataSource = dtempty;
                        GRD_Common.DataBind();
                        GRD_Common.Visible = true;
                        signup.Visible = true;
                    }
                }
                else
                {
                    ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('No Data Found');", true);
                }
            }
            catch (Exception ex)
            {
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('Please Select Correct Values');", true);
            }

        }

        protected void Load_POD()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno = 0, pol;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_POD.SelectedRow.RowIndex;

                if (bid == 0)
                {
                    bid = Convert.ToInt32(grd_POD.Rows[index].Cells[9].Text);
                    pol = Convert.ToInt32(grd_POD.Rows[index].Cells[8].Text);
                    hd_branchID.Value = bid.ToString();
                }
                else
                {
                    pol = Convert.ToInt32(grd_POD.Rows[index].Cells[8].Text);
                }

                dtcell = miscorobj.GetPODMISForCorp(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), pol, did);

                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_POD.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();
                    dtempty.Columns.Add("Product");
                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("Job type");
                    dtempty.Columns.Add("BL #");
                    dtempty.Columns.Add("Nomination");
                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();

                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {
                        if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 1)
                        {
                            jobtype = "Consol";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 2)
                        {
                            jobtype = "Co-Load";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 3)
                        {
                            jobtype = "FCL";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 4)
                        {
                            jobtype = "MCC";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 5)
                        {
                            jobtype = "Buyer Consol";
                        }


                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        dtempty.Rows[count]["Job type"] = jobtype;
                        dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        dtempty.Rows[count]["Nomination"] = dtcell.Rows[i]["Nomination"].ToString();
                        dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["Consignee"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);
                        dtempty.Rows[count]["branchid"] = bid;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_Shipment()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno = 0, pol;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_Shipment.SelectedRow.RowIndex;

                if (bid == 0)
                {
                    bid = Convert.ToInt32(grd_Shipment.Rows[index].Cells[12].Text);
                    jobno = Convert.ToInt32(grd_Shipment.Rows[index].Cells[3].Text);
                    Product = grd_Shipment.Rows[index].Cells[2].Text;
                    hd_branchID.Value = bid.ToString();
                    if (Product == "Air Exports")
                    {
                        Product = "AE";
                    }
                    else if (Product == "Air Imports")
                    {
                        Product = "AI";
                    }
                    else if (Product == "Ocean Exports")
                    {
                        Product = "FE";
                    }
                    else if (Product == "Ocean Imports")
                    {
                        Product = "FI";
                    }
                    else if (Product == "C H A")
                    {
                        Product = "CH";
                    }
                }
                else
                {
                    //bid = Convert.ToInt32(grd_Shipment.Rows[index].Cells[11].Text);
                    jobno = Convert.ToInt32(grd_Shipment.Rows[index].Cells[3].Text);
                    Product = grd_Shipment.Rows[index].Cells[2].Text;
                }

                dtcell = misgrdobj.GetshipmentDetailsfromjobnoNew(Product, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), jobno, did, " ");

                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_Shipment.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();
                    dtempty.Columns.Add("Product");
                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("Job type");
                    if (Product != "CH")
                    {
                        dtempty.Columns.Add("BL #");
                    }
                    else
                    {
                        dtempty.Columns.Add("Doc #");
                    }

                    dtempty.Columns.Add("Nomination");
                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();

                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {
                        if (Product != "CH")
                        {
                            if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 1)
                            {
                                jobtype = "Consol";
                            }
                            else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 2)
                            {
                                //jobtype = "Co-Load";
                                jobtype = "LCL";
                            }
                            else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 3)
                            {
                                jobtype = "FCL";
                            }
                            else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 4)
                            {
                                jobtype = "MCC";
                            }
                            else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 5)
                            {
                                jobtype = "Buyer Consol";
                            }
                        }
                        else
                        {
                            if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 1)
                            {
                                jobtype = "Sea Export";
                            }
                            else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 2)
                            {
                                //jobtype = "Co-Load";
                                jobtype = "Sea Import";
                            }
                            else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 3)
                            {
                                jobtype = "Air Export";
                            }
                            else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 4)
                            {
                                jobtype = "Air Import";
                            }
                            else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 5)
                            {
                                jobtype = "By Road";
                            }
                        }


                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        dtempty.Rows[count]["Job type"] = jobtype;
                        if (Product != "CH")
                        {
                            dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        }
                        else
                        {
                            dtempty.Rows[count]["Doc #"] = dtcell.Rows[i]["blno"].ToString();
                        }
                        dtempty.Rows[count]["Nomination"] = dtcell.Rows[i]["Nomination"].ToString();
                        dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["Consignee"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);
                        dtempty.Rows[count]["branchid"] = bid;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }


        protected void Load_Pol()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno = 0, pol = 0;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_POL.SelectedRow.RowIndex;

                if (bid == 0)
                {
                    bid = Convert.ToInt32(grd_POL.Rows[index].Cells[9].Text);
                    pol = Convert.ToInt32(grd_POL.Rows[index].Cells[8].Text);
                    hd_branchID.Value = bid.ToString();
                }
                else
                {
                    pol = Convert.ToInt32(grd_POL.Rows[index].Cells[8].Text);
                }

                dtcell = miscorobj.GetPOLMISForCorp(transtype, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), pol, did);


                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_POL.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();
                    dtempty.Columns.Add("Product");
                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("Job type");
                    dtempty.Columns.Add("BL #");
                    dtempty.Columns.Add("Nomination");
                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();

                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {
                        if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 1)
                        {
                            jobtype = "Consol";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 2)
                        {
                            jobtype = "Co-Load";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 3)
                        {
                            jobtype = "FCL";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 4)
                        {
                            jobtype = "MCC";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 5)
                        {
                            jobtype = "Buyer Consol";
                        }


                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        dtempty.Rows[count]["Job type"] = jobtype;
                        dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        dtempty.Rows[count]["Nomination"] = dtcell.Rows[i]["Nomination"].ToString();
                        dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["Consignee"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);
                        dtempty.Rows[count]["branchid"] = bid;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_Quotation()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno = 0, pol = 0;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = Grd_quotation.SelectedRow.RowIndex;

                if (bid == 0)
                {
                    jobno = Convert.ToInt32(Grd_quotation.Rows[index].Cells[2].Text);
                    Product = Grd_quotation.Rows[index].Cells[1].Text;
                    bid = Convert.ToInt32(Grd_quotation.Rows[index].Cells[11].Text);
                    hd_branchID.Value = bid.ToString();
                    hd_product.Value = Product;
                }
                else
                {
                    jobno = Convert.ToInt32(Grd_quotation.Rows[index].Cells[2].Text);
                    Product = Grd_quotation.Rows[index].Cells[1].Text;
                }

                dtcell = misgrdobj.GetJobDetailsFrmoJobNew(jobno, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Product, did);

                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    Grd_quotation.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("VslVoy");
                    dtempty.Columns.Add("Liner");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("producttype");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {

                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();

                        dtempty.Rows[count]["Job #"] = jobno;
                        dtempty.Rows[count]["VslVoy"] = dtcell.Rows[i]["vslvoy"].ToString();
                        dtempty.Rows[count]["Liner"] = dtcell.Rows[i]["liner"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);
                        dtempty.Rows[count]["producttype"] = Product;
                        dtempty.Rows[count]["branchid"] = bid;

                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_Shipper()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, Shipid = 0, pol;
                string Ship, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_Shipper.SelectedRow.RowIndex;
                string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                string str_todate = Utility.fn_ConvertDate(txt_to.Text);
               // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
                DataTable obj_dtjob = new DataTable();

                if (bid == 0)
                {
                    bid = Convert.ToInt32(grd_Shipper.Rows[index].Cells[9].Text);
                    Shipid = Convert.ToInt32(grd_Shipper.Rows[index].Cells[10].Text);
                    Ship = grd_Shipper.Rows[index].Cells[1].Text;
                    hd_branchID.Value = bid.ToString();
                }
                else
                {
                    //bid = Convert.ToInt32(grd_Shipper.Rows[index].Cells[11].Text);
                    Shipid = Convert.ToInt32(grd_Shipper.Rows[index].Cells[10].Text);
                    Ship = grd_Shipper.Rows[index].Cells[1].Text;
                }
                dtcell = miscorobj.GetshipmentDetails4ShipperCorp(Shipid, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);

                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_Shipper.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("Product");
                    dtempty.Columns.Add("Job #");
                    //dtempty.Columns.Add("Job type");
                    if (transtype != "CH")
                    {
                        dtempty.Columns.Add("BL #");
                    }
                    else
                    {
                        dtempty.Columns.Add("Doc #");
                    }

                    //dtempty.Columns.Add("Nomination");
                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    //dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();

                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {
                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        //dtempty.Rows[count]["Job type"] = jobtype;
                        dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        //dtempty.Rows[count]["Nomination"] = dtcell.Rows[i]["Nomination"].ToString();
                        dtempty.Rows[count]["Shipper"] = Ship;
                        dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["Consignee"].ToString();
                        //dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);
                        dtempty.Rows[count]["branchid"] = bid;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }

                else
                {
                    //ScriptManager.RegisterStartupScript(btn_get, typeof(Button), "logix", "alertify.alert('No Data Found');", true);
                }

                obj_dtjob = da_obj_misgrd.GetTeus4Shipper(Shipid, bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), transtype, Convert.ToInt32(Session["LoginDivisionId"].ToString()));
                if (obj_dtjob.Rows.Count > 0)
                {
                    this.popup1.Show();
                    grdshipteusdtlscor.DataSource = obj_dtjob;
                    grdshipteusdtlscor.DataBind();
                }

                DataSet dt_Liner = new DataSet();
                DataTable dtemptyfree = new DataTable();

                dt_Liner = da_obj_misgrd.GetTeus4ShipperYearwisecor(Shipid, bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), transtype, did); ;

                DataRow[] dr1 = new DataRow[dt_Liner.Tables[0].Rows.Count];
                dt_Liner.Tables[0].Rows.CopyTo(dr1, 0);
                //int[] dblPrice = Array.ConvertAll(dr1, new Converter<DataRow, Int32>(DataRowToDouble));

                if (dt_Liner.Tables[1].Rows.Count > 0)
                {
                    dtemptyfree.Columns.Add("month");
                    dtemptyfree.Columns.Add("branch");
                    dtemptyfree.Columns.Add("trantype");
                    dtemptyfree.Columns.Add("vol1");
                    dtemptyfree.Columns.Add("teus1");
                    dtemptyfree.Columns.Add("weight1");
                    dtemptyfree.Columns.Add("retention1");
                    dtemptyfree.Columns.Add("vol2");
                    dtemptyfree.Columns.Add("teus2");
                    dtemptyfree.Columns.Add("weight2");
                    dtemptyfree.Columns.Add("retention2");

                    DataRow dr = dtemptyfree.NewRow();
                    for (int j = 0; j <= dt_Liner.Tables[1].Rows.Count - 1; j++)
                    {
                        dr = dtemptyfree.NewRow();
                        dr["month"] = dt_Liner.Tables[1].Rows[j]["month"].ToString();
                        dr["branch"] = dt_Liner.Tables[1].Rows[j]["branch"].ToString();
                        if (dt_Liner.Tables[1].Rows[j]["trantype"].ToString() == "FE")
                        {
                            dr["trantype"] = "OE";
                        }
                        else if (dt_Liner.Tables[1].Rows[j]["trantype"].ToString() == "FI")
                        {
                            dr["trantype"] = "OI";
                        }
                        else
                        {
                            dr["trantype"] = dt_Liner.Tables[1].Rows[j]["trantype"].ToString();
                        }

                        dr["vol1"] = dt_Liner.Tables[1].Rows[j]["volume"].ToString();
                        dr["teus1"] = dt_Liner.Tables[1].Rows[j]["teus"].ToString();
                        dr["weight1"] = dt_Liner.Tables[1].Rows[j]["weight"].ToString();
                        dr["retention1"] = dt_Liner.Tables[1].Rows[j]["retention"].ToString();
                        dr["vol2"] = dt_Liner.Tables[1].Rows[j]["volume1"].ToString();
                        dr["teus2"] = dt_Liner.Tables[1].Rows[j]["teus1"].ToString();
                        dr["weight2"] = dt_Liner.Tables[1].Rows[j]["weight1"].ToString();
                        dr["retention2"] = dt_Liner.Tables[1].Rows[j]["retention1"].ToString();

                        dtemptyfree.Rows.Add(dr);
                        //}
                        if (dtemptyfree.Rows.Count > 0)
                        {
                            this.popup1.Show();
                            grdyearcor.DataSource = dtemptyfree;
                            grdyearcor.DataBind();
                        }
                    }
                }


            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_saelesperson()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, jobno = 0, pol = 0;
                string Product, jobtype = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                index = grd_salesperson.SelectedRow.RowIndex;

                string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                string str_todate = Utility.fn_ConvertDate(txt_to.Text);
              //  DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
                DataTable obj_dtjob = new DataTable();

                if (bid == 0)
                {
                    bid = Convert.ToInt32(grd_salesperson.Rows[index].Cells[9].Text);
                    pol = Convert.ToInt32(grd_salesperson.Rows[index].Cells[8].Text);
                    hd_branchID.Value = bid.ToString();
                }
                else
                {
                    pol = Convert.ToInt32(grd_salesperson.Rows[index].Cells[8].Text);
                }

                dtcell = miscorobj.GetshipmentDetailsfromsalesCorp(bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), pol, did);

                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    grd_salesperson.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();
                    dtempty.Columns.Add("Product");
                    dtempty.Columns.Add("Job #");
                    dtempty.Columns.Add("Job type");
                    dtempty.Columns.Add("BL #");
                    dtempty.Columns.Add("Nomination");
                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("Agent");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();

                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {
                        if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 1)
                        {
                            jobtype = "Consol";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 2)
                        {
                            jobtype = "Co-Load";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 3)
                        {
                            jobtype = "FCL";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 4)
                        {
                            jobtype = "MCC";
                        }
                        else if (Convert.ToInt32(dtcell.Rows[i]["jobtype"]) == 5)
                        {
                            jobtype = "Buyer Consol";
                        }


                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        dtempty.Rows[count]["Job type"] = jobtype;
                        dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();
                        dtempty.Rows[count]["Nomination"] = dtcell.Rows[i]["Nomination"].ToString();
                        dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["Consignee"].ToString();
                        dtempty.Rows[count]["Agent"] = dtcell.Rows[i]["agent"].ToString();
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);
                        dtempty.Rows[count]["branchid"] = bid;
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }

                obj_dtjob = da_obj_misgrd.GetTeus4SalesPerson(pol, bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), transtype, Convert.ToInt32(Session["LoginDivisionId"].ToString()));
                if (obj_dtjob.Rows.Count > 0)
                {
                    this.popup1.Show();
                    grdshipteusdtlscor.DataSource = obj_dtjob;
                    grdshipteusdtlscor.DataBind();
                }

                DataSet dt_Liner = new DataSet();
                DataTable dtemptyfree = new DataTable();

                dt_Liner = da_obj_misgrd.GetTeus4SPYearwisecor(pol, bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), transtype, did); ;

                DataRow[] dr1 = new DataRow[dt_Liner.Tables[0].Rows.Count];
                dt_Liner.Tables[0].Rows.CopyTo(dr1, 0);
                //int[] dblPrice = Array.ConvertAll(dr1, new Converter<DataRow, Int32>(DataRowToDouble));

                if (dt_Liner.Tables[1].Rows.Count > 0)
                {
                    dtemptyfree.Columns.Add("month");
                    dtemptyfree.Columns.Add("branch");
                    dtemptyfree.Columns.Add("trantype");
                    dtemptyfree.Columns.Add("vol1");
                    dtemptyfree.Columns.Add("teus1");
                    dtemptyfree.Columns.Add("weight1");
                    dtemptyfree.Columns.Add("retention1");
                    dtemptyfree.Columns.Add("vol2");
                    dtemptyfree.Columns.Add("teus2");
                    dtemptyfree.Columns.Add("weight2");
                    dtemptyfree.Columns.Add("retention2");

                    DataRow dr = dtemptyfree.NewRow();
                    for (int j = 0; j <= dt_Liner.Tables[1].Rows.Count - 1; j++)
                    {
                        dr = dtemptyfree.NewRow();
                        dr["month"] = dt_Liner.Tables[1].Rows[j]["month"].ToString();
                        dr["branch"] = dt_Liner.Tables[1].Rows[j]["branch"].ToString();
                        if (dt_Liner.Tables[1].Rows[j]["trantype"].ToString() == "FE")
                        {
                            dr["trantype"] = "OE";
                        }
                        else if (dt_Liner.Tables[1].Rows[j]["trantype"].ToString() == "FI")
                        {
                            dr["trantype"] = "OI";
                        }
                        else
                        {
                            dr["trantype"] = dt_Liner.Tables[1].Rows[j]["trantype"].ToString();
                        }
                        //dr["trantype"] = dt_Liner.Tables[1].Rows[j]["trantype"].ToString();
                        dr["vol1"] = dt_Liner.Tables[1].Rows[j]["volume"].ToString();
                        dr["teus1"] = dt_Liner.Tables[1].Rows[j]["teus"].ToString();
                        dr["weight1"] = dt_Liner.Tables[1].Rows[j]["weight"].ToString();
                        dr["retention1"] = dt_Liner.Tables[1].Rows[j]["retention"].ToString();
                        dr["vol2"] = dt_Liner.Tables[1].Rows[j]["volume1"].ToString();
                        dr["teus2"] = dt_Liner.Tables[1].Rows[j]["teus1"].ToString();
                        dr["weight2"] = dt_Liner.Tables[1].Rows[j]["weight1"].ToString();
                        dr["retention2"] = dt_Liner.Tables[1].Rows[j]["retention1"].ToString();

                        dtemptyfree.Rows.Add(dr);
                        //}
                        if (dtemptyfree.Rows.Count > 0)
                        {
                            this.popup1.Show();
                            grdyearcor.DataSource = dtemptyfree;
                            grdyearcor.DataBind();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Load_Top50()
        {
            try
            {
                DataTable dtcell = new DataTable();
                int index, indexcol, jobno = 0, intshipper = 0;
                string Product, jobtype = "", ship = "";
                int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
                string transtype = HttpContext.Current.Session["StrTranType"].ToString();
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                // index = Grd_shiperconsignee.SelectedRow.RowIndex;
                index = (int)Session["rowindex"];
                indexcol = (int)Session["cellindex"];
                Product = (string)Session["Head"];

                if (indexcol == 2)
                {
                    intshipper = Convert.ToInt32(customerobj.GetCustomerIdFrmName(HttpUtility.HtmlDecode(Grd_shiperconsignee.Rows[index].Cells[1].Text)));
                    ship = HttpUtility.HtmlDecode(Grd_shiperconsignee.Rows[index].Cells[1].Text);
                    dtcell = miscorobj.GetshipmentDetails4ShipperCorp(intshipper, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }
                else if (indexcol == 4)
                {
                    intshipper = Convert.ToInt32(customerobj.GetCustomerIdFrmName(HttpUtility.HtmlDecode(Grd_shiperconsignee.Rows[index].Cells[3].Text)));
                    ship = HttpUtility.HtmlDecode(Grd_shiperconsignee.Rows[index].Cells[3].Text);
                    dtcell = miscorobj.GetshipmentDetails4ConsigneeCorp(intshipper, bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), did);
                }

                if (dtcell.Rows.Count > 0)
                {
                    //this.popup.Show();
                    Grd_shiperconsignee.Visible = false;
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;
                    DataTable dtempty = new DataTable();

                    dtempty.Columns.Add("Product");

                    dtempty.Columns.Add("Job #");
                    if (transtype != "CH")
                    {
                        dtempty.Columns.Add("BL #");
                    }
                    else
                    {
                        dtempty.Columns.Add("Doc #");
                    }

                    dtempty.Columns.Add("Shipper");
                    dtempty.Columns.Add("Consignee");
                    dtempty.Columns.Add("PoL");
                    dtempty.Columns.Add("PoD");
                    dtempty.Columns.Add("Volume");
                    dtempty.Columns.Add("Cont 20");
                    dtempty.Columns.Add("Cont 40");
                    dtempty.Columns.Add("Income");
                    dtempty.Columns.Add("Expense");
                    dtempty.Columns.Add("Retention");
                    dtempty.Columns.Add("branchid");
                    DataRow dr = dtempty.NewRow();
                    totalvou = 0; totalincome = 0; totalexpense = 0; totalretention = 0; total20 = 0; total40 = 0;
                    for (int i = 0; i <= dtcell.Rows.Count - 1; i++)
                    {

                        int count = dtempty.Rows.Count;
                        dtempty.Rows.Add();
                        dr = dtempty.NewRow();
                        dtempty.Rows[count]["Product"] = dtcell.Rows[i]["trantype"].ToString();
                        dtempty.Rows[count]["Job #"] = dtcell.Rows[i]["jobno"].ToString();
                        dtempty.Rows[count]["BL #"] = dtcell.Rows[i]["blno"].ToString();

                        if (indexcol == 4)
                        {
                            dtempty.Rows[count]["Shipper"] = dtcell.Rows[i]["shipper"].ToString();
                        }
                        else
                        {
                            dtempty.Rows[count]["Shipper"] = ship;
                        }

                        if (indexcol == 4)
                        {
                            dtempty.Rows[count]["Consignee"] = ship;
                        }
                        else
                        {

                            dtempty.Rows[count]["Consignee"] = dtcell.Rows[i]["consignee"].ToString();
                        }
                        dtempty.Rows[count]["PoL"] = dtcell.Rows[i]["pol"].ToString();
                        dtempty.Rows[count]["PoD"] = dtcell.Rows[i]["pod"].ToString();
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["volume"].ToString());
                        dtempty.Rows[count]["Volume"] = temp2.ToString("#,0.00");
                        totalvou = totalvou + Convert.ToDouble(dtempty.Rows[count]["Volume"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont20"].ToString());
                        dtempty.Rows[count]["Cont 20"] = temp2.ToString("#,0.00");
                        total20 = total20 + Convert.ToDouble(dtempty.Rows[count]["Cont 20"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["cont40"].ToString());
                        dtempty.Rows[count]["Cont 40"] = temp2.ToString("#,0.00");
                        total40 = total40 + Convert.ToDouble(dtempty.Rows[count]["Cont 40"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["income"].ToString());
                        dtempty.Rows[count]["Income"] = temp2.ToString("#,0.00");
                        totalincome = totalincome + Convert.ToDouble(dtempty.Rows[count]["Income"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["expense"].ToString());
                        dtempty.Rows[count]["Expense"] = temp2.ToString("#,0.00");
                        totalexpense = totalexpense + Convert.ToDouble(dtempty.Rows[count]["Expense"]);
                        temp2 = Convert.ToDouble(dtcell.Rows[i]["retention"].ToString());
                        dtempty.Rows[count]["Retention"] = temp2.ToString("#,0.00");
                        totalretention = totalretention + Convert.ToDouble(dtempty.Rows[count]["Retention"]);


                        dtempty.Rows[count]["branchid"] = dtcell.Rows[i]["branchid"].ToString();
                        hd_branchID.Value = dtcell.Rows[i]["branchid"].ToString();
                    }
                    dr = dtempty.NewRow();
                    dr["PoD"] = "Total";
                    dr["volume"] = totalvou.ToString("#,0.00");
                    dr["Cont 20"] = total20;
                    dr["Cont 40"] = total40;
                    dr["Income"] = totalincome.ToString("#,0.00");
                    dr["Expense"] = totalexpense.ToString("#,0.00");
                    dr["Retention"] = totalretention.ToString("#,0.00");
                    dtempty.Rows.Add(dr);
                    dtempty.Columns.RemoveAt(dtempty.Columns.Count - 1);
                    GRD_Common.DataSource = dtempty;
                    GRD_Common.DataBind();
                    GRD_Common.Visible = true;
                    signup.Visible = true;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Grd_shiperconsignee_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            int selectedRowIndex, selectedColumnIndex;
            //Session["cellindex"] = 0;
            //Session["Head"] = "";
            if (e.CommandName.ToString() == "ColumnClick")
            {
                selectedRowIndex = Convert.ToInt32(e.CommandArgument.ToString());
                selectedColumnIndex = Convert.ToInt32(Request.Form["__EVENTARGUMENT"].ToString());
                Session["cellindex"] = selectedColumnIndex;
                string text = Grd_shiperconsignee.Columns[selectedColumnIndex].HeaderText;
                Session["Head"] = text;
                Session["rowindex"] = selectedRowIndex;
                Load_Top50();
                //Grd_shiperconsignee.Rows[selectedRowIndex].Cells[selectedColumnIndex].Attributes["style"] += "background-color:;";
            }
        }


        protected override void Render(HtmlTextWriter writer)
        {
            foreach (GridViewRow r in Grd_shiperconsignee.Rows)
            {
                if (r.RowType == DataControlRowType.DataRow)
                {
                    for (int columnIndex = 0; columnIndex < r.Cells.Count; columnIndex++)
                    {
                        Page.ClientScript.RegisterForEventValidation(r.UniqueID + "$ctl00", columnIndex.ToString());
                    }
                }
            }

            foreach (GridViewRow r in grd_operProfit.Rows)
            {
                if (r.RowType == DataControlRowType.DataRow)
                {
                    for (int columnIndex = 0; columnIndex < r.Cells.Count; columnIndex++)
                    {
                        Page.ClientScript.RegisterForEventValidation(r.UniqueID + "$ctl00", columnIndex.ToString());
                    }
                }
            }

            base.Render(writer);
        }



        protected void grd_operProfit_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                int selectedRowIndex1, selectedColumnIndex1;
                //Session["cellindex"] = 0;
                //Session["Head"] = "";
                if (e.CommandName.ToString() == "ColumnClickNew")
                {
                    selectedRowIndex1 = Convert.ToInt32(e.CommandArgument.ToString());
                    Session["Rowindex"] = selectedRowIndex1;
                    selectedColumnIndex1 = Convert.ToInt32(Request.Form["__EVENTARGUMENT"].ToString());
                    Session["cellindexOP"] = selectedColumnIndex1;
                    string text = grd_operProfit.Columns[selectedColumnIndex1].HeaderText;
                    Session["HeadOP"] = text;
                    if (text == "Total")
                    {
                        ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('Please Select Correct Values');", true);
                        return;
                    }
                    Load_profit();
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void Excelfunforserver_Click(object sender, EventArgs e)
        {
            ExportToExcel();
        }

        //prabha
        private void ExportToExcelNew()
        {
            string str_sp = "";
            int did = Convert.ToInt32(Session["LoginDivisionid"].ToString());
            bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
            grdexcel.Visible = true;
            int cnt = 0;
            Response.Clear();
            //Response.AddHeader("content-disposition", "attachment;filename=ExportData1.xls");
            Response.AddHeader("content-disposition", "attachment;filename=" + ddl_Report.Text + "for the period of" + txt_from.Text + " To" + txt_to.Text + ".xls");
            Response.Charset = "";
            Response.ContentType = "application/vnd.xls";
            StringBuilder SB = new StringBuilder();
            StringWriter StringWriter = new System.IO.StringWriter(SB);
            HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);

            if (bid == 0)
            {
                costtempobj.DelCostingTemp(Convert.ToInt32(Session["LoginEmpId"]));
                if (ddl_Report.Text == "By BL /AWB")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "shipment", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    if (dt.Rows.Count > 0)
                    {
                        //grdexcel.DataSource = dt;
                        //grdexcel.DataBind();
                        //str_sp = "Shipment Details for the period of " + txt_from.Text + " to " + txt_to.Text;
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        cnt = dt.Columns.Count;
                        SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>Shipment Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                        SB.Append("</table>");
                        //str_sp = "Shipment Details for the period of " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "By POL")
                {

                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "pol", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        if (dt.Rows.Count > 0)
                        {
                            grdexcel.DataSource = dt;
                            grdexcel.DataBind();
                            str_sp = "Port of Loadingwise Shipment for the period of " + txt_from.Text + " to " + txt_to.Text;
                        }
                    }
                    else
                    {
                        string intport;
                        intport = Portobj.GetNPortid(txt_agent.Text).ToString();
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "pol", intport, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        if (dt.Rows.Count > 0)
                        {
                            grdexcel.DataSource = dt;
                            grdexcel.DataBind();
                            str_sp = "Port of Loadingwise Shipment for the period of " + txt_from.Text + " to " + txt_to.Text;
                        }
                    }
                }
                else if (ddl_Report.Text == "By Carrier")
                {
                    if (hf_agent1.Value == "")
                    {
                        hf_agent1.Value = "0";
                    }
                    dt = costtempobj.SelExcelShipmentFCostingDtsLiner(Convert.ToInt32(Session["LoginBranchid"]), "CO", "liner", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]), Convert.ToInt32(hf_agent1.Value));
                    if (dt.Rows.Count > 0)
                    {
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Liner Details for the period of " + txt_from.Text + " to " + txt_to.Text;
                    }
                }

                else if (ddl_Report.Text == "By Sector")
                {
                    if (txt_agent.Text == "")
                    {
                        //LoginEmpId
                        dt = costtempobj.SelExcelShipment(Convert.ToInt32(Session["LoginBranchid"]), Convert.ToInt32(Session["LoginEmpId"]), "0", "pod", "0", "S");
                        if (dt.Rows.Count > 0)
                        {
                            grdexcel.DataSource = dt;
                            grdexcel.DataBind();

                        }
                        Dtbl = costtempobj.SelExcelShipment(Convert.ToInt32(Session["LoginBranchid"]), Convert.ToInt32(Session["LoginEmpId"]), "CH", "pod", "0", "N");
                        int co = 0;

                        for (int i = dt.Rows.Count; i <= (Dtbl.Rows.Count + dt.Rows.Count) - 1; i++)
                        {
                            DataRow dr;
                            dr = dt.NewRow();
                            dr[0] = Dtbl.Rows[co][0].ToString();
                            dr[1] = Dtbl.Rows[co][1].ToString();
                            dr[2] = Dtbl.Rows[co][2].ToString();
                            dr[3] = Dtbl.Rows[co][3].ToString();
                            dr[4] = Dtbl.Rows[co][4].ToString();
                            dr[5] = Dtbl.Rows[co][5].ToString();
                            dr[6] = Dtbl.Rows[co][6].ToString();
                            dr[7] = "";
                            dr[8] = Dtbl.Rows[co][7].ToString();
                            dr[9] = Dtbl.Rows[co][8].ToString();
                            dr[10] = Dtbl.Rows[co][9].ToString();
                            dr[11] = 0;
                            dr[12] = 0;
                            dr[13] = Dtbl.Rows[co][12].ToString();
                            dr[14] = Dtbl.Rows[co][13].ToString();
                            dr[15] = Dtbl.Rows[co][14].ToString();
                            co = co + 1;
                            dt.Rows.Add(dr);
                        }
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        costtempobj.DeleteOperatingprofit(Convert.ToInt32(Session["LoginBranchid"]), Session["StrTranType"].ToString(), Convert.ToInt32(Session["LoginEmpId"]));
                        str_sp = "Port  of Distinationwise Shipment for the period of " + txt_from.Text + " to " + txt_to.Text;
                        costtempobj.DelCostingTemp(Convert.ToInt32(Session["LoginBranchid"]));
                    }
                }
                else if (ddl_Report.Text == "By POD")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "pod", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Port  of Distinationwise Shipment for the period of " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        string intport;
                        intport = Portobj.GetNPortid(txt_agent.Text).ToString();
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "pod", intport, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Port  of Distinationwise Shipment for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "By Shipper")
                {

                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "shipper", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Shipperwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {

                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "shipper", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Shipperwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }

                else if (ddl_Report.Text == "By Consignee")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "consignee", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Consigneewise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "consignee", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Consigneewise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "Top 50 Customer")
                {
                    /*  DataSet ds = new DataSet();
                      DataTable Dt1 = new DataTable();
                      DataTable Dt2 = new DataTable();
                      Dt1.Columns.Add("Shipper");
                      Dt1.Columns.Add("Retention4Shipper");
                      Dt1.Columns.Add("Consignee");
                      Dt1.Columns.Add("Retention4Consignee");
                      for (int i = 0; i <= 4; i++)
                      {
                          ds = costtempobj.SelTop50ShipperConsignee(Convert.ToInt32(Session["LoginEmpId"]), i, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                          dt = ds.Tables[0];
                          Dt2 = ds.Tables[1];
                          if (dt.Rows.Count > 0)
                          {
                              int n;
                              n = Dt1.Rows.Count;
                              for (i = 0; i <= dt.Rows.Count - 1; i++)
                              {
                                  if (j == 0)
                                  {
                                      Dt1.Rows.Add();
                                      if (i == 1)
                                      {
                                          Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                      }
                                      else if (i == 2)
                                      {
                                          Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                      }
                                      else if (i == 3)
                                      {
                                          Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                      }
                                      else
                                      {
                                          Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                      }
                                      Dt1.Rows[n][1] = "";
                                      Dt1.Rows[n][2] = "";
                                      Dt1.Rows[n][3] = "";
                                      n = n + 1;
                                      Dt1.Rows.Add();
                                      Dt1.Rows[n][0] = dt.Rows[j][0].ToString();
                                      Dt1.Rows[n][1] = dt.Rows[j][1].ToString();
                                      if (Dt2.Rows.Count > j)
                                      {
                                          Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                          Dt1.Rows[n][1] = dt.Rows[j][3].ToString();
                                      }
                                      else
                                      {
                                          Dt1.Rows[n][0] = "";
                                          Dt1.Rows[n][1] = "";
                                      }
                                      n = n + 1;
                                  }
                                  else
                                  {
                                      Dt1.Rows.Add();
                                      Dt1.Rows[n][0] = dt.Rows[j][0].ToString();
                                      Dt1.Rows[n][1] = dt.Rows[j][1].ToString();
                                      if (Dt2.Rows.Count > j)
                                      {
                                          Dt1.Rows[n][2] = dt.Rows[j][0].ToString();
                                          Dt1.Rows[n][3] = dt.Rows[j][1].ToString();
                                      }
                                      else
                                      {
                                          Dt1.Rows[n][2] = "";
                                          Dt1.Rows[n][3] = "";
                                      }
                                      n = n + 1;
                                  }
                              }
                          }
                      }
                      grdexcel.DataSource = dt;
                      grdexcel.DataBind();*/

                    DataTable _datatable = new DataTable();
                    for (int i = 1; i < Grd_shiperconsignee.Columns.Count; i++)
                    {
                        _datatable.Columns.Add(Grd_shiperconsignee.Columns[i].ToString());
                    }
                    foreach (GridViewRow row in Grd_shiperconsignee.Rows)
                    {
                        DataRow dr = _datatable.NewRow();
                        for (int j = 1; j < Grd_shiperconsignee.Columns.Count; j++)
                        {
                            if (!row.Cells[j].Text.Equals("&nbsp;") || !row.Cells[j].Text.Equals("&amp;"))
                                dr[Grd_shiperconsignee.Columns[j].ToString()] = row.Cells[j].Text.Replace("&amp;", "&").Replace("&nbsp;", "");

                        }

                        _datatable.Rows.Add(dr);
                    }
                    //row.Cells[i].Text.Replace("&amp;", "&").Replace("&nbsp;", "");

                    // grdexcel.Columns[0].Visible = false;
                    grdexcel.DataSource = _datatable;
                    grdexcel.DataBind();


                    str_sp = "Top 50 Customer Details for the period from   " + txt_from.Text + " to " + txt_to.Text;
                }
                else if (ddl_Report.Text == "Loss Jobs")
                {
                    dt = costtempobj.SelLossJobs(Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), "CO", Convert.ToInt32(Session["LoginDivisionid"]));
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "Loss Jobs Details for the period of  " + txt_from.Text + " to " + txt_to.Text;

                }
                else if (ddl_Report.Text == "By Agent")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "agent", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Agentwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "agent", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Agentwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "By Sales Person")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "salesperson", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "salesperson", Session["LoginEmpId"].ToString(), Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "Controlled By Agent")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "nomination", "N", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "Nominationwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    costtempobj.DelCostingTemp(Convert.ToInt32(Session["LoginEmpId"]));
                }
                else if (ddl_Report.Text == "Controlled By Us")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "nomination", "F", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "Freehandwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                else if (ddl_Report.Text == "Agent Controlled Vs Our Controlled")
                {
                    Session["From"] = txt_from.Text;
                    Session["To"] = txt_to.Text;
                    this.popuprate.Show();
                }

                else if (ddl_Report.Text == "Operating Profit")
                {
                    if (ddl_Report.Text == "Operating Profit")
                    {
                        dt = costtempobj.SelExcelOperatingProfit(Convert.ToInt32(Session["LoginBranchid"]), "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "FOperating Profit for the period of  " + txt_from.Text + " to " + txt_to.Text;
                        /* if (grdexcel.Rows.Count > 0)
                         {
                             strtemp = Utility.Fn_ExportExcel(grdexcel, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + str_sp + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");
                             Response.Clear();
                             Response.AddHeader("Content-Disposition", "Attachment;Filename=" + str_sp + ".xls");
                             Response.Buffer = true;
                             Response.Charset = "UTF-8";
                             Response.ContentType = "application/vnd.ms-excel";
                             Response.Write(strtemp);
                             grdexcel.Visible = false;
                             Response.End();
                         }
                         else
                         {
                             ScriptManager.RegisterStartupScript(bnt, typeof(Button), "DataFound", "alertify.alert('Data not Avaliable');", true);
                             return;
                         }*/
                    }
                }
                else if (ddl_Report.Text == "Jobwise  P&L")
                {
                    dt = costtempobj.SelExcelJobWise(Convert.ToInt32(Session["LoginBranchid"]), "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "JobWise Costing for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                else if (ddl_Report.Text == "Retention for N / F")
                {
                    Retention_Export();
                }

             /*   else if (ddl_Report.Text == "Trend Analysis - Customer")
                {  
                    
                    if (grd_trendanalysis.Rows.Count > 0)
                   {
                    Filename = ddl_Report.Text + txt_from.Text + " to " + txt_to.Text;
                    strtemp = Utility.Fn_ExportExcel(grd_trendanalysis, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + Filename + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");

                    Response.Clear();
                    Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
                    Response.Buffer = true;
                    Response.Charset = "UTF-8";
                    Response.ContentType = "application/vnd.ms-excel";
                    Response.Write(strtemp);
                    Response.End();
                   }
                
               }*/

                else if (ddl_Report.Text == "Trend Analysis - Customer")
                {
                    //if (grd_trendanalysis.Rows.Count > 0)
                    //{
                    //    Filename = ddl_Report.Text + txt_from.Text + " to " + txt_to.Text;
                    //    strtemp = Utility.Fn_ExportExcel(grd_trendanalysis, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + Filename + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");

                    //    Response.Clear();
                    //    Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
                    //    Response.Buffer = true;
                    //    Response.Charset = "UTF-8";
                    //    Response.ContentType = "application/vnd.ms-excel";
                    //    Response.Write(strtemp);
                    //    Response.End();
                    //}

                    //DataTable _datatable = new DataTable();
                    //for (int i = 0; i < grd_trendanalysis.Columns.Count; i++)
                    //{
                    //    _datatable.Columns.Add(grd_trendanalysis.Columns[i].ToString());
                    //}
                    //foreach (GridViewRow row in grd_trendanalysis.Rows)
                    //{
                    //    DataRow dr = _datatable.NewRow();
                    //    for (int j = 0; j < grd_trendanalysis.Columns.Count; j++)
                    //    {
                    //        if (!row.Cells[j].Text.Equals("&nbsp;") || !row.Cells[j].Text.Equals("&amp;"))
                    //            dr[grd_trendanalysis.Columns[j].ToString()] = row.Cells[j].Text;
                    //    }

                    //    _datatable.Rows.Add(dr);
                    //}

                    grdexcel.DataSource = (DataTable)ViewState["grd_trendanalysisCustomer"];
                    grdexcel.DataBind();
                    cnt = dt.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                }
                else if (ddl_Report.Text == "Trend Analysis - Sales Person")
                {
                    grdexcel.DataSource = (DataTable)ViewState["grd_trendanalysisSalesperson"];
                    grdexcel.DataBind();
                    cnt = dt.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                }
                else if (ddl_Report.Text == "Trend Analysis - Product")
                {
                    grdexcel.DataSource = (DataTable)ViewState["grd_trendanalysisProduct"];
                    grdexcel.DataBind();
                    cnt = dt.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                }
            }
            else
            {
                if (ddl_Report.Text == "By BL /AWB")
                {
                    //karthi
                    strtrantype = "AC";
                    dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "shipment", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    //grdexcel.DataSource = dt;
                    //grdexcel.DataBind();
                    //str_sp = "Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    cnt = dt.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>Shipment Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");

                }
                else if (ddl_Report.Text == "Operating Profit")
                {
                    strtrantype = "AC";
                    if (ddl_Report.Text == "Operating Profit")
                    {
                        dt = costtempobj.SelExcelOperatingProfit(Convert.ToInt32(Session["LoginBranchid"]), "AC", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "FOperating Profit for the period of  " + txt_from.Text + " to " + txt_to.Text;
                        /* if (grdexcel.Rows.Count > 0)
                         {
                             strtemp = Utility.Fn_ExportExcel(grdexcel, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + str_sp + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");
                             Response.Clear();
                             Response.AddHeader("Content-Disposition", "Attachment;Filename=" + str_sp + ".xls");
                             Response.Buffer = true;
                             Response.Charset = "UTF-8";
                             Response.ContentType = "application/vnd.ms-excel";
                             Response.Write(strtemp);
                             grdexcel.Visible = false;
                             Response.End();
                         }
                         else
                         {
                             ScriptManager.RegisterStartupScript(bnt, typeof(Button), "DataFound", "alertify.alert('Data not Avaliable');", true);
                             return;
                         }*/
                    }
                }
                if (ddl_Report.Text == "Jobwise  P&L")
                {
                    dt = costtempobj.SelExcelJobWise(bid, "AC", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "JobWise Costing for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "By Carrier")
                {
                    if (hf_agent1.Value == "")
                    {
                        hf_agent1.Value = "0";
                    }

                    dt = costtempobj.SelExcelShipmentFCostingDtsLiner(bid, "AC", "liner", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]), Convert.ToInt32(hf_agent1.Value));
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "Liner Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Top 50 Customer")
                {
                    DataSet ds = new DataSet();
                    DataTable Dt1 = new DataTable();
                    DataTable Dt2 = new DataTable();
                    Dt1.Columns.Add("Shipper");
                    Dt1.Columns.Add("Retention4Shipper");
                    Dt1.Columns.Add("Consignee");
                    Dt1.Columns.Add("Retention4Consignee");
                    for (int i = 0; i <= 4; i++)
                    {
                        ds = costtempobj.SelTop50ShipperConsignee4Branch(Convert.ToInt32(Session["LoginEmpId"]), bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                        dt = ds.Tables[0];
                        Dt2 = ds.Tables[1];
                        if (dt.Rows.Count > 0)
                        {
                            int n;
                            n = Dt1.Rows.Count;
                            for (i = 0; i <= dt.Rows.Count - 1; i++)
                            {
                                if (j == 0)
                                {
                                    Dt1.Rows.Add();
                                    if (i == 1)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else if (i == 2)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else if (i == 3)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    Dt1.Rows[n][1] = "";
                                    Dt1.Rows[n][2] = "";
                                    Dt1.Rows[n][3] = "";
                                    n = n + 1;
                                    Dt1.Rows.Add();
                                    Dt1.Rows[n][0] = dt.Rows[j][0].ToString();
                                    Dt1.Rows[n][1] = dt.Rows[j][1].ToString();
                                    if (Dt2.Rows.Count > j)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                        Dt1.Rows[n][1] = dt.Rows[j][3].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][0] = "";
                                        Dt1.Rows[n][1] = "";
                                    }
                                    n = n + 1;
                                }
                                else
                                {
                                    Dt1.Rows.Add();
                                    Dt1.Rows[n][0] = dt.Rows[j][0].ToString();
                                    Dt1.Rows[n][1] = dt.Rows[j][1].ToString();
                                    if (Dt2.Rows.Count > j)
                                    {
                                        Dt1.Rows[n][2] = dt.Rows[j][0].ToString();
                                        Dt1.Rows[n][3] = dt.Rows[j][1].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][2] = "";
                                        Dt1.Rows[n][3] = "";
                                    }
                                    n = n + 1;
                                }
                            }
                        }
                    }
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "Top 50 Customer Details for the period from   " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Loss Jobs")
                {
                    dt = costtempobj.SelLossJobs(Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), "AC", bid);
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "Loss Jobs Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "By POL")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "pol", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Port of Loadingwise Shipment for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        string intport = "";
                        intport = Portobj.GetNPortid(txt_agent.Text).ToString();
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "pol", intport, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Port of Loadingwise Shipment for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "By POD")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "pod", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Port  of Distinationwise Shipment for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        string intport = "";
                        intport = Portobj.GetNPortid(txt_agent.Text).ToString();
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "pod", intport, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Port  of Distinationwise Shipment for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "By Shipper")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "shipper", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Shipperwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "shipper", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Shipperwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "By Consignee")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "consignee", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Consigneewise Shipment Details for the period of    " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "consignee", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Consigneewise Shipment Details for the period of    " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "By Agent")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "agent", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Agentwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "agent", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Agentwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "By Sales Person")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "salesperson", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "salesperson", Session["LoginEmpId"].ToString(), Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        grdexcel.DataSource = dt;
                        grdexcel.DataBind();
                        str_sp = "Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "Controlled By Agent")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "nomination", "N", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "Nominationwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Controlled By Us")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "nomination", "F", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    grdexcel.DataSource = dt;
                    grdexcel.DataBind();
                    str_sp = "Freehandwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                }

                if (ddl_Report.Text == "Agent Controlled Vs Our Controlled")
                {
                    str_sp = "Nomination/Freehand wise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Quotation - Customerwise")
                {
                    str_sp = "Quotation Customerwise for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                // Retention_Export()
                if (ddl_Report.Text == "Retention for N / F")
                {
                    Retention_Export();
                }

                if (ddl_Report.Text == "Trend Analysis - Customer" || ddl_Report.Text == "Trend Analysis - Sales Person" || ddl_Report.Text == "Trend Analysis - Product")
                {
                    if (grd_trendanalysis.Rows.Count > 0)
                    {
                        Filename = ddl_Report.Text + txt_from.Text + " to " + txt_to.Text;
                        strtemp = Utility.Fn_ExportExcel(grd_trendanalysis, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + Filename + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");

                        Response.Clear();
                        Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
                        Response.Buffer = true;
                        Response.Charset = "UTF-8";
                        Response.ContentType = "application/vnd.ms-excel";
                        Response.Write(strtemp);
                        Response.End();
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(bnt, typeof(Button), "DataFound", "alertify.alert('Data not Avaliable');", true);
                        return;
                    }
                }
            }

            //strtemp = Utility.Fn_ExportExcel(grdexcel, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + str_sp + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");
            //Response.Clear();
            //Response.AddHeader("Content-Disposition", "Attachment;Filename=" + str_sp + ".xls");
            //Response.Buffer = true;
            //Response.Charset = "UTF-8";
            //Response.ContentType = "application/vnd.ms-excel";
            //Response.Write(strtemp);
            //grdexcel.Visible = false;
            //Response.End();
            //if (bid != 0)
            //{
            if (grdexcel.Visible == true)
            {
                grdexcel.GridLines = GridLines.Both;
                grdexcel.HeaderStyle.Font.Bold = true;
                grdexcel.RenderControl(HtmlTextWriter);
            }
            Response.Write(StringWriter.ToString());
            Response.End();
            //}
            //else
            //{
            //    ScriptManager.RegisterStartupScript(bnt, typeof(Button), "DataFound", "alertify.alert('Data not Avaliable');", true);
            //    return;
            //}
        }

        protected void pdffunforserver_Click(object sender, EventArgs e)
        {
            // ExportToPdf();
        }

        /*private void ExportToExcel()
        {
            string str_sp = "";
            int did = Convert.ToInt32(HttpContext.Current.Session["LoginDivisionid"].ToString());
            bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
            GrdExcelForNew.Visible = true;
            //Response.Clear();
            //Response.AddHeader("content-disposition", "attachment;filename=ExportData1.xls");
            //Response.Charset = "";
            //Response.ContentType = "application/vnd.xls";
            //StringWriter StringWriter = new System.IO.StringWriter();
            //HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);

            if (bid == 0)
            {
                costtempobj.DelCostingTemp(Convert.ToInt32(Session["LoginEmpId"]));
                if (ddl_Report.Text == "Shipment Details")
                {

                    dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "shipment", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    if (dt.Rows.Count > 0)
                    {
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipment Details for the period of " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "By POL")
                {

                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "pol", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        if (dt.Rows.Count > 0)
                        {
                            GrdExcelForNew.DataSource = dt;
                            GrdExcelForNew.DataBind();
                            str_sp = "Port of Loadingwise Shipment for the period of " + txt_from.Text + " to " + txt_to.Text;
                        }
                    }
                    else
                    {
                        string intport;
                        intport = Portobj.GetNPortid(txt_agent.Text).ToString();
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "pol", intport, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        if (dt.Rows.Count > 0)
                        {
                            GrdExcelForNew.DataSource = dt;
                            GrdExcelForNew.DataBind();
                            str_sp = "Port of Loadingwise Shipment for the period of " + txt_from.Text + " to " + txt_to.Text;
                        }
                    }
                }
                else if (ddl_Report.Text == "By Carrier")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDtsLiner(Convert.ToInt32(Session["LoginBranchid"]), "CO", "liner", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]), Convert.ToInt32(hf_agent1.Value));
                    if (dt.Rows.Count > 0)
                    {
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Liner Details for the period of " + txt_from.Text + " to " + txt_to.Text;
                    }
                }

                else if (ddl_Report.Text == "By Sector")
                {
                    if (txt_agent.Text == "")
                    {
                        //LoginEmpId
                        dt = costtempobj.SelExcelShipment(Convert.ToInt32(Session["LoginBranchid"]), Convert.ToInt32(Session["LoginEmpId"]), "0", "pod", "0", "S");
                        if (dt.Rows.Count > 0)
                        {
                            GrdExcelForNew.DataSource = dt;
                            GrdExcelForNew.DataBind();

                        }
                        Dtbl = costtempobj.SelExcelShipment(Convert.ToInt32(Session["LoginBranchid"]), Convert.ToInt32(Session["LoginEmpId"]), "CH", "pod", "0", "N");
                        int co = 0;

                        for (int i = dt.Rows.Count; i <= (Dtbl.Rows.Count + dt.Rows.Count) - 1; i++)
                        {
                            DataRow dr;
                            dr = dt.NewRow();
                            dr[0] = Dtbl.Rows[co][0].ToString();
                            dr[1] = Dtbl.Rows[co][1].ToString();
                            dr[2] = Dtbl.Rows[co][2].ToString();
                            dr[3] = Dtbl.Rows[co][3].ToString();
                            dr[4] = Dtbl.Rows[co][4].ToString();
                            dr[5] = Dtbl.Rows[co][5].ToString();
                            dr[6] = Dtbl.Rows[co][6].ToString();
                            dr[7] = "";
                            dr[8] = Dtbl.Rows[co][7].ToString();
                            dr[9] = Dtbl.Rows[co][8].ToString();
                            dr[10] = Dtbl.Rows[co][9].ToString();
                            dr[11] = 0;
                            dr[12] = 0;
                            dr[13] = Dtbl.Rows[co][12].ToString();
                            dr[14] = Dtbl.Rows[co][13].ToString();
                            dr[15] = Dtbl.Rows[co][14].ToString();
                            co = co + 1;
                            dt.Rows.Add(dr);
                        }
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        costtempobj.DeleteOperatingprofit(Convert.ToInt32(Session["LoginBranchid"]), Session["StrTranType"].ToString(), Convert.ToInt32(Session["LoginEmpId"]));
                        str_sp = "Port  of Distinationwise Shipment for the period of " + txt_from.Text + " to " + txt_to.Text;
                        costtempobj.DelCostingTemp(Convert.ToInt32(Session["LoginBranchid"]));
                    }
                }
                else if (ddl_Report.Text == "By POD")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "pod", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Port  of Distinationwise Shipment for the period of " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        string intport;
                        intport = Portobj.GetNPortid(txt_agent.Text).ToString();
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "pod", intport, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Port  of Distinationwise Shipment for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "By Shipper")
                {

                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "shipper", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipperwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {

                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "shipper", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipperwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }

                else if (ddl_Report.Text == "By Consignee")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "consignee", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Consigneewise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "consignee", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Consigneewise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "Top 50 Customer")
                {
                    DataSet ds = new DataSet();
                    DataTable Dt1 = new DataTable();
                    DataTable Dt2 = new DataTable();
                    Dt1.Columns.Add("Shipper");
                    Dt1.Columns.Add("Retention4Shipper");
                    Dt1.Columns.Add("Consignee");
                    Dt1.Columns.Add("Retention4Consignee");
                    for (int i = 0; i <= 4; i++)
                    {
                        ds = costtempobj.SelTop50ShipperConsignee(Convert.ToInt32(Session["LoginEmpId"]), i, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                        dt = ds.Tables[0];
                        Dt2 = ds.Tables[1];
                        if (dt.Rows.Count > 0)
                        {
                            int n;
                            n = Dt1.Rows.Count;
                            for ( i = 0; i <= dt.Rows.Count - 1; i++)
                            {
                                if (j == 0)
                                {
                                    Dt1.Rows.Add();
                                    if (i == 1)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else if (i == 2)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else if (i == 3)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    Dt1.Rows[n][1] = "";
                                    Dt1.Rows[n][2] = "";
                                    Dt1.Rows[n][3] = "";
                                    n = n + 1;
                                    Dt1.Rows.Add();
                                    Dt1.Rows[n][0] = dt.Rows[j][0].ToString();
                                    Dt1.Rows[n][1] = dt.Rows[j][1].ToString();
                                    if (Dt2.Rows.Count > j)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                        Dt1.Rows[n][1] = dt.Rows[j][3].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][0] = "";
                                        Dt1.Rows[n][1] = "";
                                    }
                                    n = n + 1;
                                }
                                else
                                {
                                    Dt1.Rows.Add();
                                    Dt1.Rows[n][0] = dt.Rows[j][0].ToString();
                                    Dt1.Rows[n][1] = dt.Rows[j][1].ToString();
                                    if (Dt2.Rows.Count > j)
                                    {
                                        Dt1.Rows[n][2] = dt.Rows[j][0].ToString();
                                        Dt1.Rows[n][3] = dt.Rows[j][1].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][2] = "";
                                        Dt1.Rows[n][3] = "";
                                    }
                                    n = n + 1;
                                }
                            }
                        }
                    }
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Top 50 Customer Details for the period from   " + txt_from.Text + " to " + txt_to.Text;
                }
                else if (ddl_Report.Text == "Loss Jobs")
                {
                    dt = costtempobj.SelLossJobs(Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), "CO", Convert.ToInt32(Session["LoginDivisionid"]));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Loss Jobs Details for the period of  " + txt_from.Text + " to " + txt_to.Text;

                }
                else if (ddl_Report.Text == "By Agent")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "agent", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Agentwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "agent", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Agentwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "Sales Person")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "salesperson", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "salesperson", Session["LoginEmpId"].ToString(), Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                else if (ddl_Report.Text == "Nomination")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "nomination", "N", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Nominationwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                    costtempobj.DelCostingTemp(Convert.ToInt32(Session["LoginEmpId"]));
                }
                else if (ddl_Report.Text == "Controlled By Us")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "nomination", "F", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Freehandwise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                else if (ddl_Report.Text == "Agent Controlled Vs Our Controlled")
                {
                    Session["From"] = txt_from.Text;
                    Session["To"] = txt_to.Text;
                    this.popuprate.Show();
                }

                else if (ddl_Report.Text == "Operating Profit")
                {
                    if (ddl_Report.Text == "Operating Profit")
                    {
                        dt = costtempobj.SelExcelOperatingProfit(Convert.ToInt32(Session["LoginBranchid"]), "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "FOperating Profit for the period of  " + txt_from.Text + " to " + txt_to.Text;
                        if (GrdExcelForNew.Rows.Count > 0)
                        {
                            strtemp = Utility.Fn_ExportExcel(GrdExcelForNew, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + str_sp + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");

                            Response.Clear();
                            Response.AddHeader("Content-Disposition", "Attachment;Filename=" + str_sp + ".xls");
                            Response.Buffer = true;
                            Response.Charset = "UTF-8";
                            Response.ContentType = "application/vnd.ms-excel";
                            Response.Write(strtemp);
                            GrdExcelForNew.Visible = false;
                            Response.End();
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(bnt, typeof(Button), "DataFound", "alertify.alert('Data not Avaliable');", true);
                            return;
                        }

                    }
                }
                else if (ddl_Report.Text == "Jobwise  P&L")
                {
                    dt = costtempobj.SelExcelJobWise(Convert.ToInt32(Session["LoginBranchid"]), "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "JobWise Costing for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                else if (ddl_Report.Text == "Retention for N / F")
                {
                    Retention_Export();
                }
            }
            else
            {
                if (ddl_Report.Text == "Shipment Details")
                {
                    strtrantype = "AC";
                    dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "shipment", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Jobwise  P&L")
                {
                    dt = costtempobj.SelExcelJobWise(bid, "AC", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "JobWise Costing for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "By Carrier")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDtsLiner(bid, "AC", "liner", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]), Convert.ToInt32 (hf_agent1.Value));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Liner Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Top 50 Customer")
                {
                    DataSet ds = new DataSet();
                    DataTable Dt1 = new DataTable();
                    DataTable Dt2 = new DataTable();
                    Dt1.Columns.Add("Shipper");
                    Dt1.Columns.Add("Retention4Shipper");
                    Dt1.Columns.Add("Consignee");
                    Dt1.Columns.Add("Retention4Consignee");
                    for (int i = 0; i <= 4; i++)
                    {
                        ds = costtempobj.SelTop50ShipperConsignee4Branch(Convert.ToInt32(Session["LoginEmpId"]), bid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                        dt = ds.Tables[0];
                        Dt2 = ds.Tables[1];
                        if (dt.Rows.Count > 0)
                        {
                            int n;
                            n = Dt1.Rows.Count;
                            for ( i = 0; i <= dt.Rows.Count - 1; i++)
                            {
                                if (j == 0)
                                {
                                    Dt1.Rows.Add();
                                    if (i == 1)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else if (i == 2)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else if (i == 3)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                    }
                                    Dt1.Rows[n][1] = "";
                                    Dt1.Rows[n][2] = "";
                                    Dt1.Rows[n][3] = "";
                                    n = n + 1;
                                    Dt1.Rows.Add();
                                    Dt1.Rows[n][0] = dt.Rows[j][0].ToString();
                                    Dt1.Rows[n][1] = dt.Rows[j][1].ToString();
                                    if (Dt2.Rows.Count > j)
                                    {
                                        Dt1.Rows[n][0] = dt.Rows[j][2].ToString();
                                        Dt1.Rows[n][1] = dt.Rows[j][3].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][0] = "";
                                        Dt1.Rows[n][1] = "";
                                    }
                                    n = n + 1;
                                }
                                else
                                {
                                    Dt1.Rows.Add();
                                    Dt1.Rows[n][0] = dt.Rows[j][0].ToString();
                                    Dt1.Rows[n][1] = dt.Rows[j][1].ToString();
                                    if (Dt2.Rows.Count > j)
                                    {
                                        Dt1.Rows[n][2] = dt.Rows[j][0].ToString();
                                        Dt1.Rows[n][3] = dt.Rows[j][1].ToString();
                                    }
                                    else
                                    {
                                        Dt1.Rows[n][2] = "";
                                        Dt1.Rows[n][3] = "";
                                    }
                                    n = n + 1;
                                }
                            }
                        }
                    }
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Top 50 Customer Details for the period from   " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Loss Jobs")
                {
                    dt = costtempobj.SelLossJobs(Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), "AC", bid);
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Loss Jobs Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "By POL")
                {
                    if(txt_agent.Text=="")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "pol", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Port of Loadingwise Shipment for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        string intport = "";
                        intport = Portobj.GetNPortid(txt_agent.Text).ToString();
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "pol", intport, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Port of Loadingwise Shipment for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "By POD")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "pod", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Port  of Distinationwise Shipment for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        string intport = "";
                        intport = Portobj.GetNPortid(txt_agent.Text).ToString();
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "pod", intport, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Port  of Distinationwise Shipment for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "Shipperwise")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "shipper", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipperwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "shipper", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipperwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "By Consignee")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "consignee", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Consigneewise Shipment Details for the period of    " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "consignee", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Consigneewise Shipment Details for the period of    " + txt_from.Text + " to " + txt_to.Text;
                    
                    }
                }
                if (ddl_Report.Text == "By Agent")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "agent", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Agentwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "agent", hf_agent1.Value, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Agentwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "Sales Person")
                {
                    if (txt_agent.Text == "")
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "salesperson", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                    else
                    {
                        dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "salesperson", Session["LoginEmpId"].ToString(), Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        GrdExcelForNew.DataSource = dt;
                        GrdExcelForNew.DataBind();
                        str_sp = "Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                    }
                }
                if (ddl_Report.Text == "Nomination")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "nomination", "N", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Nominationwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Controlled By Us")
                {
                    dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "nomination", "F", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                    GrdExcelForNew.DataSource = dt;
                    GrdExcelForNew.DataBind();
                    str_sp = "Freehandwise Shipment Details for the period of   " + txt_from.Text + " to " + txt_to.Text;
                }

                if (ddl_Report.Text == "Agent Controlled Vs Our Controlled")
                {

                    str_sp = "Nomination/Freehand wise Shipment Details for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                if (ddl_Report.Text == "Quotation - Customerwise")
                {
                    str_sp = "Quotation Customerwise for the period of  " + txt_from.Text + " to " + txt_to.Text;
                }
                // Retention_Export()
                if (ddl_Report.Text == "Retention for N / F")
                {
                    Retention_Export();
                }

                if( ddl_Report.Text == "Trend Analysis - Customer" || ddl_Report.Text == "Trend Analysis - Sales Person" || ddl_Report.Text == "Trend Analysis - Product" )
                {
                    if (grd_trendanalysis.Rows.Count>0)
                    {
                         Filename = "Retention For N/F for the period of  " + txt_from.Text + " to " + txt_to.Text;
                        strtemp = Utility.Fn_ExportExcel(grd_trendanalysis, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + Filename + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");

                        Response.Clear();
                        Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
                        Response.Buffer = true;
                        Response.Charset = "UTF-8";
                        Response.ContentType = "application/vnd.ms-excel";
                        Response.Write(strtemp);
                        Response.End();
                        
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(bnt, typeof(Button), "DataFound", "alertify.alert('Data not Avaliable');", true);
                        return;
                    }

                    
                }
                //if (dt.Rows.Count > 0)
                //{
                //    strtemp = Utility.Fn_ExportExcel(GrdExcelForNew, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + Filename + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");

                //    Response.Clear();
                //    Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
                //    Response.Buffer = true;
                //    Response.Charset = "UTF-8";
                //    Response.ContentType = "application/vnd.ms-excel";
                //    Response.Write(strtemp);
                //    Response.End();
                //}
                //else
                //{
                //    ScriptManager.RegisterStartupScript(bnt, typeof(Button), "DataFound", "alertify.alert('Data not Avaliable');", true);
                //    return;
                //}
            

            }


            strtemp = Utility.Fn_ExportExcel(GrdExcelForNew, "<tr><td></td><td><FONT FACE=arial SIZE=2>" + str_sp + "</td></tr><tr><td></td><td></td><td><FONT FACE=arial SIZE=2>" + Session["LoginDivisionName"].ToString() + " - " + Session["LoginBranchName"].ToString() + "</td></tr>");

            Response.Clear();
            Response.AddHeader("Content-Disposition", "Attachment;Filename=" + str_sp + ".xls");
            Response.Buffer = true;
            Response.Charset = "UTF-8";
            Response.ContentType = "application/vnd.ms-excel";
            Response.Write(strtemp);
            GrdExcelForNew.Visible = false;
            Response.End();
        }*/
        /*private void ExportToPdf()
        {
            Response.ContentType = "application/pdf";
            Response.AddHeader("content-disposition", "attachment;filename=Export.pdf");
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            StringWriter sw = new StringWriter();
            HtmlTextWriter hw = new HtmlTextWriter(sw);
            HtmlForm frm = new HtmlForm();
            // getgrid();

            if (grd_Agent.Visible == true)
            {
                grd_Agent.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_Agent);

                grd_Agent.Columns[8].Visible = false;
                grd_Agent.Columns[7].Visible = false;
                grd_Agent.GridLines = GridLines.Both;
                grd_Agent.HeaderStyle.Font.Bold = true;
                grd_Agent.RenderControl(hw);
            }
            else if (grd_Consignee.Visible == true)
            {
                grd_Consignee.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_Consignee);
                grd_Consignee.Columns[8].Visible = false;
                grd_Consignee.Columns[7].Visible = false;
                grd_Consignee.GridLines = GridLines.Both;
                grd_Consignee.HeaderStyle.Font.Bold = true;
                grd_Consignee.RenderControl(hw);
            }
            else if (Grd_nomination.Visible == true)
            {
                Grd_nomination.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(Grd_nomination);
                // bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
                Grd_nomination.Columns[10].Visible = false;
                Grd_nomination.Columns[11].Visible = false;
                Grd_nomination.GridLines = GridLines.Both;
                Grd_nomination.HeaderStyle.Font.Bold = true;
                Grd_nomination.RenderControl(hw);

            }
            else if (Grd_freeVsnomi.Visible == true)
            {
                Grd_freeVsnomi.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(Grd_freeVsnomi);
                Grd_freeVsnomi.Columns[8].Visible = false;
                Grd_freeVsnomi.GridLines = GridLines.Both;
                Grd_freeVsnomi.HeaderStyle.Font.Bold = true;
                Grd_freeVsnomi.RenderControl(hw);
            }
            else if (grd_JobwiseCosting.Visible == true)
            {
                grd_JobwiseCosting.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_JobwiseCosting);
                grd_JobwiseCosting.Columns[8].Visible = false;
                grd_JobwiseCosting.Columns[9].Visible = false;
                grd_JobwiseCosting.GridLines = GridLines.Both;
                grd_JobwiseCosting.HeaderStyle.Font.Bold = true;
                grd_JobwiseCosting.RenderControl(hw);
            }
            else if (grd_jobloss.Visible == true)
            {
                grd_jobloss.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_jobloss);
                grd_jobloss.Columns[8].Visible = false;
                grd_jobloss.Columns[9].Visible = false;
                grd_jobloss.GridLines = GridLines.Both;
                grd_jobloss.HeaderStyle.Font.Bold = true;
                grd_jobloss.RenderControl(hw);
            }
            else if (grd_POD.Visible == true)
            {
                grd_POD.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_POD);
                grd_POD.Columns[8].Visible = false;
                grd_POD.Columns[9].Visible = false;
                grd_POD.Columns[10].Visible = false;
                grd_POD.GridLines = GridLines.Both;
                grd_POD.HeaderStyle.Font.Bold = true;
                grd_POD.RenderControl(hw);
            }
            else if (grd_POL.Visible == true)
            {
                grd_POL.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_POL);
                grd_POL.Columns[8].Visible = false;
                grd_POL.Columns[9].Visible = false;
                grd_POL.Columns[10].Visible = false;
                grd_POL.GridLines = GridLines.Both;
                grd_POL.HeaderStyle.Font.Bold = true;
                grd_POL.RenderControl(hw);
            }
            else if (grd_operProfit.Visible == true)
            {
                grd_operProfit.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_operProfit);
                grd_operProfit.Columns[1].Visible = false;
                grd_operProfit.GridLines = GridLines.Both;
                grd_operProfit.HeaderStyle.Font.Bold = true;
                grd_operProfit.RenderControl(hw);
            }
            else if (Grd_quotation.Visible == true)
            {
                Grd_quotation.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(Grd_quotation);
                Grd_quotation.Columns[11].Visible = false;
                Grd_quotation.Columns[12].Visible = false;
                Grd_quotation.GridLines = GridLines.Both;
                Grd_quotation.HeaderStyle.Font.Bold = true;
                Grd_quotation.RenderControl(hw);
            }
            else if (grd_salesperson.Visible == true)
            {
                grd_salesperson.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_salesperson);
                grd_salesperson.Columns[8].Visible = false;
                grd_salesperson.Columns[9].Visible = false;
                grd_salesperson.Columns[10].Visible = false;
                grd_salesperson.GridLines = GridLines.Both;
                grd_salesperson.HeaderStyle.Font.Bold = true;
                grd_salesperson.RenderControl(hw);
            }
            else if (Grd_shiperconsignee.Visible == true)
            {
                Grd_shiperconsignee.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(Grd_shiperconsignee);
                Grd_shiperconsignee.GridLines = GridLines.Both;
                Grd_shiperconsignee.HeaderStyle.Font.Bold = true;
                Grd_shiperconsignee.RenderControl(hw);
            }
            else if (grd_Shipper.Visible == true)
            {
                grd_Shipper.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_Shipper);
                grd_Shipper.Columns[8].Visible = false;
                grd_Shipper.Columns[9].Visible = false;
                grd_Shipper.Columns[10].Visible = false;
                grd_Shipper.GridLines = GridLines.Both;
                grd_Shipper.HeaderStyle.Font.Bold = true;
                grd_Shipper.RenderControl(hw);
            }
            else if (grd_Shipment.Visible == true)
            {
                grd_Shipment.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_Shipment);
                grd_Shipment.Columns[11].Visible = false;
                grd_Shipment.Columns[12].Visible = false;
                grd_Shipment.GridLines = GridLines.Both;
                grd_Shipment.HeaderStyle.Font.Bold = true;
                grd_Shipment.RenderControl(hw);
            }
            else if (Grd_LogDetails.Visible == true)
            {
                Grd_LogDetails.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(Grd_LogDetails);
                Grd_LogDetails.GridLines = GridLines.Both;
                Grd_LogDetails.HeaderStyle.Font.Bold = true;
                Grd_LogDetails.RenderControl(hw);
            }
            else if (Grd_sectorwise.Visible == true)
            {
                Grd_sectorwise.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(Grd_sectorwise);
                Grd_sectorwise.GridLines = GridLines.Both;
                Grd_sectorwise.HeaderStyle.Font.Bold = true;
                Grd_sectorwise.RenderControl(hw);
            }
            else if (grd_trendanalysis.Visible == true)
            {
                grd_trendanalysis.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_trendanalysis);
                grd_trendanalysis.GridLines = GridLines.Both;
                grd_trendanalysis.HeaderStyle.Font.Bold = true;
                grd_trendanalysis.RenderControl(hw);
            }
            else if (grd_YearMIS.Visible == true)
            {
                grd_YearMIS.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(grd_YearMIS);
                grd_YearMIS.GridLines = GridLines.Both;
                grd_YearMIS.HeaderStyle.Font.Bold = true;
                grd_YearMIS.RenderControl(hw);
            }
            else if (GRD_Common.Visible == true)
            {
                GRD_Common.Parent.Controls.Add(frm);
                frm.Attributes["runat"] = "server";
                frm.Controls.Add(GRD_Common);
                GRD_Common.GridLines = GridLines.Both;
                GRD_Common.HeaderStyle.Font.Bold = true;
                GRD_Common.RenderControl(hw);
            }
            else if (Grd_Retention.Visible == true)
            {

                Retention_Export();
                // return;
                //GRD_Common.GridLines = GridLines.Both;
                //GRD_Common.HeaderStyle.Font.Bold = true;
                //GRD_Common.RenderControl(HtmlTextWriter);
            }

            frm.RenderControl(hw);
            StringReader sr = new StringReader(sw.ToString());
            Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 10f, 0f);
            HTMLWorker htmlparser = new HTMLWorker(pdfDoc);
            PdfWriter.GetInstance(pdfDoc, Response.OutputStream);
            pdfDoc.Open();
            htmlparser.Parse(sr);
            pdfDoc.Close();
            Response.Write(pdfDoc);
            Response.End();
        }*/

        public override void VerifyRenderingInServerForm(Control control)
        {
            //required to avoid the run time error "  
            //Control 'GridView1' of type 'Grid View' must be placed inside a form tag with runat=server."  
        }

        protected void ddl_graph1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_graph1.SelectedItem.Text == "Data")
            {
                chartclear();
            }
            else
            {
                ddl_graph2.Visible = true;
                ddl_graph2.SelectedIndex = 0;
                signup.Visible = false;
                grd_Agent.Visible = false;
                grd_Consignee.Visible = false;
                grd_operProfit.Visible = false;
                Grd_freeVsnomi.Visible = false;
                grd_Agent.Visible = false;
            }
        }

        public void chartclear()
        {
            ddl_graph2.Visible = false;
            chartoperProfit.Visible = false;
            chartoperProfit1.Visible = false;
            piechart.Visible = false;
            PODCHARTVIEW.Visible = false;
            DivAllCahrtnew.Visible = false;
        }

        protected void ddl_graph2_SelectedIndexChanged(object sender, EventArgs e)
        {
            Get_grid();
        }

        protected void GRD_Common_RowCreated(object sender, GridViewRowEventArgs e)
        {
            {
                GridViewRow row = e.Row;
                List<TableCell> columns = new List<TableCell>();
                foreach (DataControlField column in GRD_Common.Columns)
                {
                    TableCell cell = row.Cells[0];
                    row.Cells.Remove(cell);
                    columns.Add(cell);
                }
                row.Cells.AddRange(columns.ToArray());
            }
        }

        protected void Grd_LogDetails_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            Grd_LogDetails.PageIndex = e.NewPageIndex;
            LoadGrd_LogDetails();
        }

        protected void bnt_Click(object sender, EventArgs e)
        {
            //ExportToExcel();
            // ExportToExcelNew();

            ExportToExcel();
        }



        protected void btn_print_Click(object sender, EventArgs e)
        {



            int did, empid; String str_TranType;
            if (ddl_Report.Text == "REPORT")
            {
                ScriptManager.RegisterStartupScript(btn_print, typeof(LinkButton), "logix", "alertify.alert('Select any one Report');", true);
                return;
            }
            try
            {

              //  DataAccess.LogDetails Logobj = new DataAccess.LogDetails();
                did = int.Parse(Session["LoginDivisionId"].ToString());
                //int bid = Convert.ToInt32(Session["LoginBranchid"].ToString());
                str_TranType = Session["StrTranType"].ToString();
                empid = Convert.ToInt32(Session["LoginEmpId"].ToString());
                bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
            }
            catch
            {
                ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "Master", "alertify.alert('Session TimeOut');window.open('../Login.aspx','_top');", true);
                return;
            }

            string str_sp = "", str_sp1 = "";
            string str_sf = "", str_sf1 = "";
            string str_RptName = "", str_RptName1 = "";
            string str_Script = "";
            Session["str_sfs"] = "";
            Session["str_sp"] = "";
            Session["str_sfs1"] = "";
            Session["str_sp1"] = "";
            DateTime dtfrom = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text.ToString()));
            DateTime dtto = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text.ToString()));
            if (bid == 0)
            {
                str_sp = "fromdate=Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                if (ddl_Report.Text == "By BL /AWB")
                {
                    str_RptName = "AllShipmentDetailsTemp.rpt";
                    Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                    str_sp = "Title=Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    str_RptName1 = "AllShipmentDetailsTempJobwise.rpt";
                    Session["str_sfs1"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did + " and {CostingDetails.trantype} <> '" + "AD" + "'";
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); window.open('../Tools/ReportView.aspx?SFormula=" + str_sf1 + "&Parameter=" + str_sp1 + "&RFName=" + str_RptName1 + "&" + this.Page.ClientQueryString + "','','');";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                    Session["str_sp1"] = str_sp;
                }
                else if (ddl_Report.Text == "Loss Jobs")
                {
                    str_RptName = "JobWiseCosting.rpt";
                    Session["str_sfs"] = "{JobDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {JobDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {JobDetails.retention}<0 and {JobDetails.division}=" + did;
                    str_sp = "Header=Loss Jobwise Costing Details from" + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Shipper")
                {
                    if (txt_agent.Text == "")
                    {
                        str_RptName = "AllShipperwiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                        str_sp = "Title=Shipper Wise Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    else
                    {
                        str_RptName = "AllShipmentDetailsTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.shipper}=" + hf_agent1.Value + "  and {CostingDetails.division}=" + did;
                        str_sp = "Title= " + txt_agent.Text + " - Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Consignee")
                {
                    if (txt_agent.Text == "")
                    {
                        str_RptName = "AllConsigneewiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                        str_sp = "Title=Consignee wise from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    else
                    {
                        str_RptName = "AllShipmentDetailsTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.consignee}=" + hf_agent1.Value + "  and {CostingDetails.division}=" + did;
                        str_sp = "Title= " + txt_agent.Text + " - Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Agent")
                {
                    if (txt_agent.Text == "")
                    {
                        str_RptName = "AllAgentwiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                        str_sp = "Title=Agent Wise Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    else
                    {
                        str_RptName = "AllShipmentDetailsTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.agent}=" + hf_agent1.Value + "  and {CostingDetails.division}=" + did;
                        str_sp = "Title= " + txt_agent.Text + " - Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Operating Profit")
                {
                    str_RptName = "OperatingProfit.rpt";
                    Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.trantype} <> 'AD' and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                    str_sp = "Header=Operating Profit for the period of " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Jobwise  P&L")
                {
                    str_RptName = "JobWiseCosting.rpt";
                    Session["str_sfs"] = "{JobDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {JobDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {JobDetails.division}=" + did;
                    str_sp = "Header=JobWise Costing for the period of " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Sales Person")
                {
                    if (txt_agent.Text == "")
                    {
                        str_RptName = "AllSalesPersonWiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                        str_sp = "Title=SalesPersons Wise Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    else
                    {
                        str_RptName = "AllShipmentDetailsTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "')and {CostingDetails.salesperson}=" + empid + "  and {CostingDetails.division}=" + did;
                        str_sp = "Title= " + txt_agent.Text + " - Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Controlled By Agent")
                {
                    str_RptName = "AllShipmentDetailsTemp.rpt";
                    Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.nomination}='N' and {CostingDetails.division}=" + did;
                    str_sp = "Title=Nomination Shipment Details from  " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Controlled By Us")
                {
                    str_RptName = "AllShipmentDetailsTemp.rpt";
                    Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.nomination}='F' and {CostingDetails.division}=" + did;
                    str_sp = "Title=Nomination Shipment Details from  " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Agent Controlled Vs Our Controlled")
                {
                    Session["From"] = txt_from.Text;
                    Session["To"] = txt_to.Text;
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    this.popuprate.Show();
                }
                else if (ddl_Report.Text == "By POL")
                {
                    str_RptName = "MISPoLWise.rpt";
                    if (txt_agent.Text == "")
                    {
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                    }
                    else
                    {
                        int intport = Portobj.GetNPortid(txt_agent.Text);
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "')and {CostingDetails.pol}=" + intport + "  and {CostingDetails.division}=" + did;
                    }
                    str_sp = "Title=Shipment Details - Port Of Loading for the Period from  " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Sector")
                {
                    str_RptName = "MISSectorWise.rpt";
                    if (txt_agent.Text == "")
                    {
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') ";
                    }
                    str_sp = "Title=SectorWise Details for the Period from " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By POD")
                {
                    str_RptName = "MISPoDWise.rpt";
                    if (txt_agent.Text == "")
                    {
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                    }
                    else
                    {
                        int intport = Portobj.GetNPortid(txt_agent.Text);
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "')and {CostingDetails.pod}=" + intport + "  and {CostingDetails.division}=" + did;
                    }
                    str_sp = "Title=Shipment Details - Port Of Discharging for the Period from " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Year M I S")
                {
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, 0, did);

                    str_RptName = "year2date.rpt";
                    Session["str_sfs"] = "{TempY2D.empid}=" + empid;

                    str_sp = "mon=" + dtfrom.Month + " ~cid=" + did + "~year=" + dtfrom.Year;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Log Details")
                {
                    str_RptName = "LogDetails.rpt";
                    if (txt_agent.Text == "")
                    {
                        Logobj.InsLogsAll(empid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                        Session["str_sfs"] = "{Logs.empid}=" + employeeobj.GetNEmpid(txt_agent.Text) + " and {Logs.eventdate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {Logs.eventdate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "')";
                    }
                    else
                    {
                        Logobj.InsLogsAll(empid, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)));
                        Session["str_sfs"] = "{Logs.eventdate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {Logs.eventdate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "')";
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
            }
            else
            {
                if (ddl_Report.Text == "By BL /AWB")
                {
                    str_RptName = "ShipmentDetailsTemp.rpt";
                    Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did;
                    str_sp = "Title=Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    str_RptName1 = "AllShipmentDetailsTempJobwise.rpt";
                    Session["str_sfs1"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.division}=" + did + " and {CostingDetails.trantype} <> '" + "AD" + "'";
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); window.open('../Tools/ReportView.aspx?SFormula=" + str_sf1 + "&Parameter=" + str_sp1 + "&RFName=" + str_RptName1 + "&" + this.Page.ClientQueryString + "','','');";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                    Session["str_sp1"] = str_sp;
                }
                else if (ddl_Report.Text == "Loss Jobs")
                {
                    str_RptName = "JobWiseCosting.rpt";
                    Session["str_sfs"] = "{JobDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {JobDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {JobDetails.retention}<0 and {JobDetails.branchid}=" + bid;
                    str_sp = "Header=Loss Jobwise Costing Details from" + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By POL")
                {
                    str_RptName = "MISPoLWise.rpt";
                    if (txt_agent.Text == "")
                    {
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.branchid}=" + bid;
                    }
                    else
                    {
                        int intport = Portobj.GetNPortid(txt_agent.Text);
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "')and {CostingDetails.pol}=" + intport + "  and {CostingDetails.branchid}=" + bid;
                    }
                    str_sp = "Title=Shipment Details - Port Of Loading for the Period from  " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By POD")
                {
                    str_RptName = "MISPoDWise.rpt";
                    if (txt_agent.Text == "")
                    {
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.branchid}=" + bid;
                    }
                    else
                    {
                        int intport = Portobj.GetNPortid(txt_agent.Text);
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "')and {CostingDetails.pod}=" + intport + "  and {CostingDetails.branchid}=" + bid;
                    }
                    str_sp = "Title=Shipment Details - Port Of Discharging for the Period from " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Shipper")
                {
                    if (txt_agent.Text == "")
                    {
                        str_RptName = "ShipperwiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.branchid}=" + bid;
                        str_sp = "Title=Shipper Wise Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    else
                    {
                        str_RptName = "ShipperwiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.shipper}=" + hf_agent1.Value + "  and {CostingDetails.branchid}=" + bid;
                        str_sp = "Title= " + txt_agent.Text + " - Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Consignee")
                {
                    if (txt_agent.Text == "")
                    {
                        str_RptName = "ConsigneewiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.branchid}=" + bid;
                        str_sp = "Title=Consignee wise Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    else
                    {
                        str_RptName = "ConsigneewiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.consignee}=" + hf_agent1.Value + "  and {CostingDetails.branchid}=" + bid;
                        str_sp = "Title= " + txt_agent.Text + " - Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Agent")
                {
                    if (txt_agent.Text == "")
                    {
                        str_RptName = "AgentwiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.branchid}=" + bid;
                        str_sp = "Title=Agent wise Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    else
                    {
                        str_RptName = "AgentwiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.agent}=" + Convert.ToInt32(hf_agent1.Value) + "  and {CostingDetails.branchid}=" + bid;
                        str_sp = "Title= " + txt_agent.Text + " - Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Operating Profit")
                {
                    str_RptName = "OperatingProfit.rpt";
                    Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.branchid}=" + bid + " and {CostingDetails.trantype}<>'AD'";
                    str_sp = "Header=Operating Profit for the period of " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Jobwise  P&L")
                {
                    str_RptName = "JobWiseCosting.rpt";
                    Session["str_sfs"] = "{JobDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {JobDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {JobDetails.branchid}=" + bid;
                    str_sp = "Header=JobWise Costing for the period of " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "logix", " alertify.alert('Please use Shipment Details/Operating Profit for Weekly/Monthly MIS. Do not submit Jobwise Costing as MIS report.For further classification please contact to Mr.Padmanabhan')", true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "By Sales Person")
                {
                    if (txt_agent.Text == "")
                    {
                        str_RptName = "SalesPersonWiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.business}='" + "O" + "' and {CostingDetails.branchid}=" + bid + " and {CostingDetails.salesperson}<>0";
                        str_sp = "Title=SalesPesons Wise Revenue from " + txt_from.Text + " To " + txt_to.Text;
                        Session["str_sp"] = str_sp;
                    }
                    else
                    {
                        str_RptName = "SalesPersonWiseTemp.rpt";
                        Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.business}='" + "O" + "' and {CostingDetails.branchid}=" + bid + " and {CostingDetails.salesperson}=" + empid;
                        Session["str_sp"] = "Title= '" + txt_agent.Text + "' - Revenue from " + txt_from.Text + " To " + txt_to.Text;
                    }
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);

                }
                else if (ddl_Report.Text == "Controlled By Agent")
                {
                    str_RptName = "ShipmentDetailsTemp.rpt";
                    Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.nomination}='N' and {CostingDetails.branchid}=" + bid;
                    str_sp = "Title=Nomination Shipment Details from  " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Controlled By Us")
                {
                    str_RptName = "ShipmentDetailsTemp.rpt";
                    Session["str_sfs"] = "{CostingDetails.closeddate}>=date('" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + "') and {CostingDetails.closeddate}<=date('" + dtto.Year + "," + dtto.Month + "," + dtto.Day + "') and {CostingDetails.nomination}='F' and {CostingDetails.branchid}=" + bid;
                    str_sp = "Title=Nomination Shipment Details from  " + txt_from.Text + " To " + txt_to.Text;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
                else if (ddl_Report.Text == "Year M I S")
                {
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);
                    misobj.InsTempY2D("", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), empid, bid, 0);

                    str_RptName = "year2date.rpt";
                    Session["str_sfs"] = "{TempY2D.empid}=" + empid + " and {TempY2D.bid}=" + bid;

                    str_sp = "mon=" + dtfrom.Month + " ~cid=" + did + "~year=" + dtfrom.Year;
                    str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + str_sf + "&Parameter=" + str_sp + "&RFName=" + str_RptName + "&" + this.Page.ClientQueryString + "','',''); ";
                    Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                    ScriptManager.RegisterStartupScript(btn_print, typeof(Button), "logix", str_Script, true);
                    Session["str_sp"] = str_sp;
                }
            }


        }

        protected void grdyear_RowCreated(object sender, GridViewRowEventArgs e)
        {
            //string hex = "#dbdbdb";
            //string hexfore = "#4e4c4c";

            //string hex = "#003a65";
            //string hexfore = "#ffffff";

            try
            {
                if (e.Row.RowType == DataControlRowType.Header)
                {
                    GridView HeaderGrid = (GridView)sender;
                    GridViewRow HeaderGridRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
                    HeaderGridRow.Font.Bold = true;
                    //HeaderGridRow.CssClass = "clsgridback";

                    TableCell HeaderCell = new TableCell();
                    HeaderCell.Text = "Year";
                    //                    HeaderCell.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    //HeaderCell.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                    HeaderCell.Font.Size = 10;
                    HeaderCell.RowSpan = 1;
                    HeaderCell.ColumnSpan = 3;
                    HeaderGridRow.Cells.Add(HeaderCell);



                    HeaderCell = new TableCell();
                    HeaderCell.Text = "Previous Year";
                    //                    HeaderCell.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    //HeaderCell.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                    HeaderCell.Font.Size = 10;
                    HeaderCell.RowSpan = 1;
                    HeaderCell.ColumnSpan = 4;
                    HeaderGridRow.Cells.Add(HeaderCell);

                    HeaderCell = new TableCell();
                    HeaderCell.Text = "Current Year";
                    //// //                     HeaderCell.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    //HeaderCell.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                    HeaderCell.Font.Size = 10;
                    HeaderCell.RowSpan = 1;
                    HeaderCell.ColumnSpan = 4;
                    HeaderGridRow.Cells.Add(HeaderCell);

                    grdyearcor.Controls[0].Controls.AddAt(0, HeaderGridRow);

                    GridView HeaderGrid2 = (GridView)sender;
                    GridViewRow HeaderGridRow2 = new GridViewRow(2, 0, DataControlRowType.Header, DataControlRowState.Insert);
                    //HeaderGridRow2.BorderColor = System.Drawing.Color.Black;
                    HeaderGridRow2.Font.Bold = true;
                    // HeaderGridRow2.CssClass = "clsgridback";

                    TableCell HeaderCell12 = new TableCell();
                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Month";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Branch";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Product";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "CBM";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Teus";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Weight";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Retention";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "CBM";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Teus";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Weight";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    HeaderCell12 = new TableCell();
                    HeaderCell12.Text = "Retention";
                    HeaderCell12.HorizontalAlign = HorizontalAlign.Center;
                    //HeaderCell12.ForeColor = System.Drawing.ColorTranslator.FromHtml(hexfore);
                    //HeaderCell12.BackColor = System.Drawing.ColorTranslator.FromHtml(hex);
                    HeaderCell12.Font.Size = 10;
                    HeaderGridRow2.Cells.Add(HeaderCell12);

                    grdyearcor.Controls[0].Controls.AddAt(1, HeaderGridRow2);

                }
            }
            catch
            {

            }
        }




        //Dinesh New Export

        private void ExportToExcel()
        {

            string str_sp = "";
            int did = Convert.ToInt32(Session["LoginDivisionid"].ToString());
            bid = HREmpobj.GetBranchId(did, ddl_branch.SelectedItem.Text);
            //if (bid == 0)
            //{
            //    if (grd_YearMIS.Visible == true)
            //    {
            //        ScriptManager.RegisterStartupScript(bnt, typeof(Button), "logix", "alertify.alert('Data Not Available');", true);
            //        return;
            //    }
            //    //if(grd_Shipment.Visible == false)
            //    // {
            //    //      ScriptManager.RegisterStartupScript(bnt, typeof(Button), "logix", "alertify.alert('Data Not Available');", true);
            //    //      return;
            //    //  }
            //}
            //else
            //{
            //    if (grd_YearMIS.Visible == true)
            //    {
            //        ScriptManager.RegisterStartupScript(bnt, typeof(Button), "logix", "alertify.alert('Data Not Available');", true);
            //        return;
            //    }
            //}

            Response.Clear();

            //  Response.AddHeader("content-disposition", "attachment;filename=ExportData1.xls");
            // Response.AddHeader("content-disposition", "attachment;filename=" + ddl_Report.Text + ".xls");

            Response.AddHeader("content-disposition", "attachment;filename=" + ddl_Report.Text + "for the period of" + txt_from.Text + " To" + txt_to.Text + ".xls");
            Response.Charset = "";
            Response.ContentType = "application/vnd.xls";
            StringBuilder SB = new StringBuilder();
            StringWriter StringWriter = new System.IO.StringWriter(SB);
            //StringWriter StringWriter = new System.IO.StringWriter();
            HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);
            int cnt = 0;
            DataTable dt = new DataTable();
            str_TranType = Session["StrTranType"].ToString();
            if (bid == 0)
            {


                if (grd_Shipment.Visible == true)
                {
                    costtempobj.DelCostingTemp(Convert.ToInt32(Session["LoginEmpId"]));
                    //if (str_TranType == "FI" || str_TranType == "FE" || str_TranType == "AE" || str_TranType == "AI" || str_TranType == "CH" || str_TranType == "AC")
                    //{
                    if (ddl_Report.SelectedItem.Text == "By BL /AWB")
                    {
                        //  dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), Session["StrTranType"].ToString(), "shipment", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionId"].ToString()));

                        dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), "CO", "shipment", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                        Gridtemp.DataSource = dt;
                        Gridtemp.DataBind();
                        cnt = dt.Columns.Count;
                        SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                        SB.Append("</table>");
                        Gridtemp.GridLines = GridLines.Both;
                        Gridtemp.HeaderStyle.Font.Bold = true;
                        Gridtemp.RenderControl(HtmlTextWriter);
                    }
                    //}
                }


                else if (grd_Agent.Visible == true)
                {
                    grd_Agent.Columns[8].Visible = false;
                    grd_Agent.Columns[9].Visible = false;
                    cnt = grd_Agent.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_Agent.GridLines = GridLines.Both;
                    grd_Agent.HeaderStyle.Font.Bold = true;
                    grd_Agent.RenderControl(HtmlTextWriter);


                }
                else if (grd_Consignee.Visible == true)
                {
                    grd_Consignee.Columns[8].Visible = false;
                    grd_Consignee.Columns[9].Visible = false;
                    cnt = grd_Consignee.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_Consignee.GridLines = GridLines.Both;
                    grd_Consignee.HeaderStyle.Font.Bold = true;
                    grd_Consignee.RenderControl(HtmlTextWriter);
                }

                else if (Grd_sectorwise.Visible == true)
                {

                    cnt = grd_Consignee.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_sectorwise.GridLines = GridLines.Both;
                    Grd_sectorwise.HeaderStyle.Font.Bold = true;
                    Grd_sectorwise.RenderControl(HtmlTextWriter);
                }
                else if (Grd_nomination.Visible == true)
                {
                    Grd_nomination.Columns[10].Visible = false;
                    cnt = Grd_nomination.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_nomination.GridLines = GridLines.Both;
                    Grd_nomination.HeaderStyle.Font.Bold = true;
                    Grd_nomination.RenderControl(HtmlTextWriter);

                }

                else if (grd_JobwiseCosting.Visible == true)
                {


                    grd_JobwiseCosting.Columns[9].Visible = false;
                    cnt = grd_JobwiseCosting.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    //grd_JobwiseCosting.Columns[10].Visible = false;
                    grd_JobwiseCosting.GridLines = GridLines.Both;
                    grd_JobwiseCosting.HeaderStyle.Font.Bold = true;
                    grd_JobwiseCosting.RenderControl(HtmlTextWriter);
                }
                else if (grd_jobloss.Visible == true)
                {
                    grd_jobloss.Columns[8].Visible = false;
                    cnt = grd_jobloss.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_jobloss.GridLines = GridLines.Both;
                    grd_jobloss.HeaderStyle.Font.Bold = true;
                    grd_jobloss.RenderControl(HtmlTextWriter);
                }
                else if (grd_POD.Visible == true)
                {
                    grd_POD.Columns[8].Visible = false;
                    grd_POD.Columns[9].Visible = false;
                    cnt = grd_POD.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + "Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_POD.GridLines = GridLines.Both;
                    grd_POD.HeaderStyle.Font.Bold = true;
                    grd_POD.RenderControl(HtmlTextWriter);
                }
                else if (grd_POL.Visible == true)
                {
                    grd_POL.Columns[8].Visible = false;
                    grd_POL.Columns[9].Visible = false;
                    cnt = grd_POL.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_POL.GridLines = GridLines.Both;
                    grd_POL.HeaderStyle.Font.Bold = true;
                    grd_POL.RenderControl(HtmlTextWriter);
                }
                else if (grd_operProfit.Visible == true)
                {
                    grd_operProfit.Columns[0].Visible = false;
                    grd_operProfit.Columns[2].Visible = false;
                    cnt = grd_operProfit.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");

                    grd_operProfit.GridLines = GridLines.Both;
                    grd_operProfit.HeaderStyle.Font.Bold = true;
                    grd_operProfit.RenderControl(HtmlTextWriter);
                }
                else if (grd_salesperson.Visible == true)
                {
                    grd_salesperson.Columns[8].Visible = false;
                    grd_salesperson.Columns[9].Visible = false;
                    cnt = grd_salesperson.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_salesperson.GridLines = GridLines.Both;
                    grd_salesperson.HeaderStyle.Font.Bold = true;
                    grd_salesperson.RenderControl(HtmlTextWriter);
                }
                else if (Grd_shiperconsignee.Visible == true)
                {
                    cnt = Grd_shiperconsignee.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    // Grd_shiperconsignee.Columns[2].Visible = false;
                    Grd_shiperconsignee.GridLines = GridLines.Both;
                    Grd_shiperconsignee.HeaderStyle.Font.Bold = true;
                    Grd_shiperconsignee.RenderControl(HtmlTextWriter);
                }
                else if (grd_Shipper.Visible == true)
                {
                    grd_Shipper.Columns[9].Visible = false;
                    grd_Shipper.Columns[10].Visible = false;
                    cnt = grd_Shipper.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_Shipper.GridLines = GridLines.Both;
                    grd_Shipper.HeaderStyle.Font.Bold = true;
                    grd_Shipper.RenderControl(HtmlTextWriter);
                }



                //else if (grd_operProfit.Visible == true)
                //{
                //    grd_Shipper.Columns[9].Visible = false;
                //    grd_Shipper.Columns[10].Visible = false;
                //    cnt = grd_operProfit.Columns.Count;

                //    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                //    SB.Append("</table>");
                //    grd_operProfit.GridLines = GridLines.Both;
                //    grd_operProfit.HeaderStyle.Font.Bold = true;
                //    grd_operProfit.RenderControl(HtmlTextWriter);
                //}

                else if (Grd_quotation.Visible == true)
                {
                    grd_Shipper.Columns[9].Visible = false;
                    grd_Shipper.Columns[10].Visible = false;
                    grd_Shipper.Columns[11].Visible = false;
                    cnt = Grd_quotation.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_quotation.GridLines = GridLines.Both;
                    Grd_quotation.HeaderStyle.Font.Bold = true;
                    Grd_quotation.RenderControl(HtmlTextWriter);
                }

                else if (Grd_freeVsnomi.Visible == true)
                {
                    cnt = Grd_freeVsnomi.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_freeVsnomi.GridLines = GridLines.Both;
                    Grd_freeVsnomi.HeaderStyle.Font.Bold = true;
                    Grd_freeVsnomi.RenderControl(HtmlTextWriter);
                }

                else if (grd_trendanalysis.Visible == true)
                {
                    cnt = grd_trendanalysis.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_trendanalysis.GridLines = GridLines.Both;
                    grd_trendanalysis.HeaderStyle.Font.Bold = true;
                    grd_trendanalysis.RenderControl(HtmlTextWriter);
                }
                else if (Grd_Retention.Visible == true)
                {
                    cnt = Grd_Retention.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_Retention.GridLines = GridLines.Both;
                    Grd_Retention.HeaderStyle.Font.Bold = true;
                    Grd_Retention.RenderControl(HtmlTextWriter);
                }

                else if (GRD_Common.Visible == true)
                {
                    cnt = GRD_Common.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    GRD_Common.GridLines = GridLines.Both;
                    GRD_Common.HeaderStyle.Font.Bold = true;
                    GRD_Common.RenderControl(HtmlTextWriter);
                }


                else if (Gridliner.Visible == true)
                {
                    cnt = Gridliner.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Gridliner.GridLines = GridLines.Both;
                    Gridliner.HeaderStyle.Font.Bold = true;
                    Gridliner.RenderControl(HtmlTextWriter);
                }


                else if (grd_YearMIS.Visible == true)
                {
                    cnt = Gridliner.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_YearMIS.GridLines = GridLines.Both;
                    grd_YearMIS.HeaderStyle.Font.Bold = true;
                    grd_YearMIS.RenderControl(HtmlTextWriter);
                }

                /*   else if (grd_YearMIS.Visible == true)
                   {
                       cnt = grd_YearMIS.Columns.Count;
                       SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_From.Text + " To " + txt_To.Text + "</B></font></td></tr>");
                       SB.Append("</table>");
                       grd_YearMIS.GridLines = GridLines.Both;
                       grd_YearMIS.HeaderStyle.Font.Bold = true;
                       grd_YearMIS.RenderControl(HtmlTextWriter);
                   }*/
            }
            else
            {

                if (grd_Shipment.Visible == true)
                {
                    costtempobj.DelCostingTemp(Convert.ToInt32(Session["LoginEmpId"]));
                    if (str_TranType == "FI" || str_TranType == "FE" || str_TranType == "AE" || str_TranType == "AI" || str_TranType == "CH" || str_TranType == "AC" || str_TranType == "CO")
                    {
                        if (ddl_Report.SelectedItem.Text == "By BL /AWB")
                        {
                            //dt = costtempobj.SelExcelShipmentFCostingDts(Convert.ToInt32(Session["LoginBranchid"]), Session["StrTranType"].ToString(), "shipment", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionId"].ToString()));

                            strtrantype = "AC";
                            dt = costtempobj.SelExcelShipmentFCostingDts(bid, "AC", "shipment", "0", Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), Convert.ToInt32(Session["LoginDivisionid"]));
                            Gridtemp.DataSource = dt;
                            Gridtemp.DataBind();
                            cnt = dt.Columns.Count;
                            SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                            SB.Append("</table>");
                            Gridtemp.GridLines = GridLines.Both;
                            Gridtemp.HeaderStyle.Font.Bold = true;
                            Gridtemp.RenderControl(HtmlTextWriter);
                        }
                    }
                }


                if (grd_Agent.Visible == true)
                {
                    grd_Agent.Columns[8].Visible = false;
                    grd_Agent.Columns[9].Visible = false;

                    cnt = grd_Agent.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_Agent.GridLines = GridLines.Both;
                    grd_Agent.HeaderStyle.Font.Bold = true;
                    grd_Agent.RenderControl(HtmlTextWriter);


                }

                else if (Grd_sectorwise.Visible == true)
                {

                    cnt = grd_Consignee.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_sectorwise.GridLines = GridLines.Both;
                    Grd_sectorwise.HeaderStyle.Font.Bold = true;
                    Grd_sectorwise.RenderControl(HtmlTextWriter);
                }
                else if (grd_Consignee.Visible == true)
                {
                    grd_Consignee.Columns[8].Visible = false;
                    grd_Consignee.Columns[9].Visible = false;
                    cnt = grd_Consignee.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_Consignee.GridLines = GridLines.Both;
                    grd_Consignee.HeaderStyle.Font.Bold = true;
                    grd_Consignee.RenderControl(HtmlTextWriter);
                }
                else if (Grd_nomination.Visible == true)
                {
                    Grd_nomination.Columns[10].Visible = false;
                    cnt = Grd_nomination.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_nomination.GridLines = GridLines.Both;
                    Grd_nomination.HeaderStyle.Font.Bold = true;
                    Grd_nomination.RenderControl(HtmlTextWriter);

                }

                else if (grd_JobwiseCosting.Visible == true)
                {


                    grd_JobwiseCosting.Columns[9].Visible = false;
                    cnt = grd_JobwiseCosting.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    //grd_JobwiseCosting.Columns[10].Visible = false;
                    grd_JobwiseCosting.GridLines = GridLines.Both;
                    grd_JobwiseCosting.HeaderStyle.Font.Bold = true;
                    grd_JobwiseCosting.RenderControl(HtmlTextWriter);
                }
                else if (grd_jobloss.Visible == true)
                {
                    grd_jobloss.Columns[8].Visible = false;
                    cnt = grd_jobloss.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_jobloss.GridLines = GridLines.Both;
                    grd_jobloss.HeaderStyle.Font.Bold = true;
                    grd_jobloss.RenderControl(HtmlTextWriter);
                }
                else if (grd_POD.Visible == true)
                {
                    grd_POD.Columns[8].Visible = false;
                    grd_POD.Columns[9].Visible = false;
                    cnt = grd_POD.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + "Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_POD.GridLines = GridLines.Both;
                    grd_POD.HeaderStyle.Font.Bold = true;
                    grd_POD.RenderControl(HtmlTextWriter);
                }
                else if (grd_POL.Visible == true)
                {
                    grd_POL.Columns[8].Visible = false;
                    grd_POL.Columns[9].Visible = false;
                    cnt = grd_POL.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_POL.GridLines = GridLines.Both;
                    grd_POL.HeaderStyle.Font.Bold = true;
                    grd_POL.RenderControl(HtmlTextWriter);
                }
                //else if (grd_operProfit.Visible == true)
                //{
                //    grd_operProfit.Columns[0].Visible = false;
                //    grd_operProfit.Columns[2].Visible = false;
                //    cnt = grd_operProfit.Columns.Count;
                //    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                //    SB.Append("</table>");

                //    grd_operProfit.GridLines = GridLines.Both;
                //    grd_operProfit.HeaderStyle.Font.Bold = true;
                //    grd_operProfit.RenderControl(HtmlTextWriter);
                //}
                else if (grd_salesperson.Visible == true)
                {
                    grd_salesperson.Columns[9].Visible = false;
                    grd_salesperson.Columns[10].Visible = false;
                    cnt = grd_salesperson.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_salesperson.GridLines = GridLines.Both;
                    grd_salesperson.HeaderStyle.Font.Bold = true;
                    grd_salesperson.RenderControl(HtmlTextWriter);
                }
                else if (Grd_shiperconsignee.Visible == true)
                {
                    cnt = Grd_shiperconsignee.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    // Grd_shiperconsignee.Columns[2].Visible = false;
                    Grd_shiperconsignee.GridLines = GridLines.Both;
                    Grd_shiperconsignee.HeaderStyle.Font.Bold = true;
                    Grd_shiperconsignee.RenderControl(HtmlTextWriter);
                }
                else if (grd_Shipper.Visible == true)
                {
                    grd_Shipper.Columns[9].Visible = false;
                    grd_Shipper.Columns[10].Visible = false;
                    grd_Shipper.Columns[8].Visible = false;
                    cnt = grd_Shipper.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_Shipper.GridLines = GridLines.Both;
                    grd_Shipper.HeaderStyle.Font.Bold = true;
                    grd_Shipper.RenderControl(HtmlTextWriter);
                }



                else if (grd_operProfit.Visible == true)
                {
                    //grd_Shipper.Columns[2].Visible = false;
                    grd_Shipper.Columns[9].Visible = false;
                    grd_Shipper.Columns[10].Visible = false;
                    cnt = grd_operProfit.Columns.Count;

                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_operProfit.GridLines = GridLines.Both;
                    grd_operProfit.HeaderStyle.Font.Bold = true;
                    grd_operProfit.RenderControl(HtmlTextWriter);
                }

                else if (Grd_quotation.Visible == true)
                {
                    grd_Shipper.Columns[9].Visible = false;
                    grd_Shipper.Columns[10].Visible = false;
                    grd_Shipper.Columns[11].Visible = false;
                    cnt = Grd_quotation.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_quotation.GridLines = GridLines.Both;
                    Grd_quotation.HeaderStyle.Font.Bold = true;
                    Grd_quotation.RenderControl(HtmlTextWriter);
                }

                else if (Grd_freeVsnomi.Visible == true)
                {
                    cnt = Grd_freeVsnomi.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_freeVsnomi.GridLines = GridLines.Both;
                    Grd_freeVsnomi.HeaderStyle.Font.Bold = true;
                    Grd_freeVsnomi.RenderControl(HtmlTextWriter);
                }

                else if (grd_trendanalysis.Visible == true)
                {
                    cnt = grd_trendanalysis.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_trendanalysis.GridLines = GridLines.Both;
                    grd_trendanalysis.HeaderStyle.Font.Bold = true;
                    grd_trendanalysis.RenderControl(HtmlTextWriter);
                }
                else if (Grd_Retention.Visible == true)
                {
                    cnt = Grd_Retention.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Grd_Retention.GridLines = GridLines.Both;
                    Grd_Retention.HeaderStyle.Font.Bold = true;
                    Grd_Retention.RenderControl(HtmlTextWriter);
                }
                else if (GRD_Common.Visible == true)
                {
                    cnt = GRD_Common.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    GRD_Common.GridLines = GridLines.Both;
                    GRD_Common.HeaderStyle.Font.Bold = true;
                    GRD_Common.RenderControl(HtmlTextWriter);
                }

                else if (Gridliner.Visible == true)
                {
                    cnt = Gridliner.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    Gridliner.GridLines = GridLines.Both;
                    Gridliner.HeaderStyle.Font.Bold = true;
                    Gridliner.RenderControl(HtmlTextWriter);
                }
                else if (grd_YearMIS.Visible == true)
                {
                    cnt = Gridliner.Columns.Count;
                    SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>" + ddl_Report.Text + " Details for the period of " + txt_from.Text + " To " + txt_to.Text + "</B></font></td></tr>");
                    SB.Append("</table>");
                    grd_YearMIS.GridLines = GridLines.Both;
                    grd_YearMIS.HeaderStyle.Font.Bold = true;
                    grd_YearMIS.RenderControl(HtmlTextWriter);
                }


            }
            Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 263, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "Export");
            Response.Write(StringWriter.ToString());
            Response.End();
        }





        //MIS COPR END



        //Retentions

        protected void btnview_Click(object sender, EventArgs e)
        {
            Label4.Text = "By Margin";

            div_mis.Visible = false;

            div_bar.Visible = false;
            div_line.Visible = false;
            penBlRelase.Visible = false;
            GridView1.Visible = false;
            outstanding.Visible = false;
            GridView2.Visible = false;
            lbl_cut.Visible = false;
            div2_Bookchart.Visible = false;
            excportexc.Visible = false;

            GrdAI.Visible = false;
            PanelAI.Visible = false;

            PanelOE.Visible = false;
            GrdOE.Visible = false;
            PanelOI.Visible = false;
            GrdOI.Visible = false;


           // DataAccess.LogDetails obj_da_Log = new DataAccess.LogDetails();
            if (txt_retention.Text.Trim().Length > 0)
            {

                int_bid = Convert.ToInt32(Session["LoginBranchid"].ToString());
                int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                int_Empid = Convert.ToInt32(Session["LoginEmpId"].ToString());
                DataTable dt = new DataTable();
                DateTime frmdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text.ToString()));
                DateTime todate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text.ToString()));
                dt = da_obj_CostTemp.GetCustomerRetention(int_Empid, Convert.ToDouble(txt_retention.Text), int_divid, frmdate, todate);

                if (dt.Rows.Count > 0)
                {
                    grdcustomer.DataSource = dt;
                    grdcustomer.DataBind();
                    btnExport.Enabled = true;
                }

                int i;
                string str_division, str_branch;
                str_division = "";
                str_branch = "";
                div_retention.Visible = true;
                for (i = 0; i <= grdcustomer.Rows.Count - 1; i++)
                {
                    if (grdcustomer.Rows[i].Cells[0].Text != str_division)
                    {
                        str_division = grdcustomer.Rows[i].Cells[0].Text;
                    }
                    else
                    {
                        grdcustomer.Rows[i].Cells[0].Text = "";
                    }

                    if (grdcustomer.Rows[i].Cells[1].Text != str_branch)
                    {
                        str_branch = grdcustomer.Rows[i].Cells[1].Text;
                    }
                    else
                    {
                        grdcustomer.Rows[i].Cells[1].Text = "";
                    }

                    obj_da_Log.InsLogDetail(int.Parse(Session["LoginEmpId"].ToString()), 543, 3, int.Parse(Session["LoginBranchid"].ToString()), "Trantype: " + txt_retention.Text);
                }
            }
        }

        protected void btnExport_Click(object sender, EventArgs e)
        {
           // DataAccess.LogDetails obj_da_Log = new DataAccess.LogDetails();

            //if (grdcustomer.Rows.Count > 0)
            //{
            //    string Filename, strtemp;
            //    Filename = Session["LoginDivisionName"] + " - " + Session["LoginBranchName"];
            //    strtemp = Utility.Fn_ExportExcel(grdcustomer, "<tr><td><td><td></td><td><font face=arial size=2>" + Filename + "</td></tr>");
            //    Response.Clear();
            //    Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
            //    Response.Buffer = true;
            //    Response.Charset = "UTF-8";
            //    Response.ContentType = "application/vnd.ms-excel";
            //    Response.Write(strtemp);
            //    Response.End();
            //}

            string Filename = Session["LoginDivisionName"] + " - " + Session["LoginBranchName"];
            Response.Clear();
            Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
            Response.Buffer = true;
            Response.ContentType = "application/vnd.xls";
            Response.Charset = "";

            StringBuilder SB = new StringBuilder();
            StringWriter SW = new StringWriter(SB);
            HtmlTextWriter HW = new HtmlTextWriter(SW);
            GridView GVExcel = new GridView();

            SB.Append("<table width='100%' cellspacing='0' cellpadding='2'>");
            SB.Append("<tr><td></td><td align='center' font face=arial size=2><b><bold>" + Filename + "</bold></b></td></tr>");
            SB.Append("<tr><td></td><td></td></tr>");
            SB.Append("</table>");

            if (grdcustomer.Rows.Count > 0)
            {
                grdcustomer.RenderControl(HW);
                Response.Write(SW.ToString());
                Response.Flush();
                Response.End();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), Guid.NewGuid().ToString(), "alertify.alert('Excel Not Found')", true);
            }
            obj_da_Log.InsLogDetail(int.Parse(Session["LoginEmpId"].ToString()), 543, 3, int.Parse(Session["LoginBranchid"].ToString()), "Trantype: " + txt_retention.Text);
        }



        //STATISTICS






        public void BindBranchDLL()
        {
            try
            {
                int int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                DataTable obj_dtTemp = new DataTable();
                obj_dtTemp = da_obj_Branch.GetBranchByDivID(int_divid);
                int i;
                ddl_branch.Items.Add(new System.Web.UI.WebControls.ListItem("ALL", "0"));
                for (i = 0; i <= obj_dtTemp.Rows.Count - 1; i++)
                {
                    if (obj_dtTemp.Rows[i]["branch"].ToString() != "CORPORATE")
                    {
                        ddl_branch.Items.Add(new System.Web.UI.WebControls.ListItem(obj_dtTemp.Rows[i]["branch"].ToString(), obj_dtTemp.Rows[i]["branchid"].ToString()));
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
                //ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "Master", "alertify.alert('Session TimeOut');window.open('../Login.aspx','_top');", true);
            }

        }




        protected void ddl_product_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (ddl_Report.Text == "Income Statement")
            {
                if (ddl_product.Text == "Air Exports")
                {
                    trantype = "AE";
                    hid_trantypeid.Value = trantype;
                    // Session["trantype"] = trantype;
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Flight Date");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "Air Imports")
                {
                    trantype = "AI";
                    hid_trantypeid.Value = trantype;
                    // Session["trantype"] = trantype;
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Flight Date");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "Ocean Exports")
                {
                    trantype = "FE";
                    hid_trantypeid.Value = trantype;
                    //   Session["trantype"] = trantype;
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("ETD");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "Ocean Imports")
                {
                    trantype = "FI";
                    hid_trantypeid.Value = trantype;
                    //  Session["trantype"] = trantype;
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("ETA");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "Custom House Agent")
                {
                    trantype = "CH";
                    hid_trantypeid.Value = trantype;
                    // Session["trantype"] = trantype;
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "All")
                {
                    trantype = "AL";
                    hid_trantypeid.Value = trantype;
                    // Session["trantype"] = trantype;
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("ETA/ETD");
                    ddl_by.Items.Add("Job Close Date");
                }
                grdJobDtls.DataSource = Utility.Fn_GetEmptyDataTable();
                grdJobDtls.DataBind();

            }
            else
            {

                if (ddl_product.Text == "Air Exports")
                {
                    Str_Trantype = "AE";
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Job Open Date");
                    ddl_by.Items.Add("Flight Date");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "Air Imports")
                {
                    Str_Trantype = "AI";
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Job Open Date");
                    ddl_by.Items.Add("Flight Date");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "Ocean Exports")
                {
                    Str_Trantype = "FE";
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Job Open Date");
                    ddl_by.Items.Add("ETD");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "Ocean Imports")
                {
                    Str_Trantype = "FI";
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Job Open Date");
                    ddl_by.Items.Add("ETA");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "Custom House Agent")
                {
                    Str_Trantype = "CH";
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Job Open Date");
                    ddl_by.Items.Add("Job Close Date");
                }
                else if (ddl_product.Text == "ALL")
                {
                    Str_Trantype = "AL";
                    ddl_by.Items.Clear();
                    ddl_by.Items.Add("");
                    ddl_by.Items.Add("Job Open Date");
                    ddl_by.Items.Add("ETA/ETD");
                    ddl_by.Items.Add("Job Close Date");
                }
            }
        }

        protected void btnget_Click(object sender, EventArgs e)
        {
            try
            {
                if (ddl_product.SelectedItem.Text.Trim().Length <= 0)
                {
                    ScriptManager.RegisterStartupScript(btnget, typeof(Button), "Shipment", "alertify.alert('Select Product Name');", true);
                    return;
                }
                else if (ddl_by.SelectedItem.Text.Trim().Length <= 0)
                {
                    ScriptManager.RegisterStartupScript(btnget, typeof(Button), "Shipment", "alertify.alert('Select By Name');", true);
                    return;
                }

                GrdJob.Visible = true;
                GrdBL.Visible = false;
                int int_bid, int_divid, i;
                // int_bid = Convert.ToInt32(ddl_branch.SelectedValue.ToString());
                int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                ddl_product_SelectedIndexChanged(sender, e);
                ddl_by_SelectedIndexChanged(sender, e);

              //  DataAccess.HR.Employee da_obj_HrEmp = new DataAccess.HR.Employee();
                int_bid = da_obj_HrEmp.GetBranchId(int_divid, ddl_branch.SelectedItem.Text);

                DataSet obj_ds = new DataSet();
                DataSet obj_dstemp = new DataSet();
                string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                string str_todate = Utility.fn_ConvertDate(txt_to.Text);
                obj_ds = da_obj_Totalship.GetTotalNoOfJobs(int_bid, int_divid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate), Str_Trantype, Str_by);
                obj_dstemp = da_obj_Totalship.GetTotalContDtls(int_bid, int_divid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate), Str_Trantype, Str_by);
                DataTable obj_DtGrd = new DataTable();
                obj_DtGrd.Columns.Add("Product", typeof(string));
                obj_DtGrd.Columns.Add("AgentBL", typeof(double));
                obj_DtGrd.Columns.Add("OurBL", typeof(double));
                if (obj_ds.Tables.Count > 0)
                {
                    if (Str_Trantype != "CH")
                    {
                        for (i = 0; i <= obj_ds.Tables[obj_ds.Tables.Count - 1].Rows.Count - 1; i++)
                        {
                            DataRow Dr = obj_DtGrd.NewRow();
                            obj_DtGrd.Rows.Add(Dr);

                            Dr[0] = obj_ds.Tables[obj_ds.Tables.Count - 1].Rows[i]["product"];
                            Dr[1] = obj_ds.Tables[obj_ds.Tables.Count - 1].Rows[i]["AgentControl"];
                            Dr[2] = obj_ds.Tables[obj_ds.Tables.Count - 1].Rows[i]["OurControl"];

                        }
                        var sum_agent = obj_DtGrd.Compute("sum(AgentBL)", "");
                        var sum_BL = obj_DtGrd.Compute("sum(OurBL)", "");
                        DataRow Dr1 = obj_DtGrd.NewRow();
                        Dr1 = obj_DtGrd.NewRow();
                        obj_DtGrd.Rows.Add(Dr1);

                        Dr1[0] = "Total"; ;
                        Dr1[1] = sum_agent;
                        Dr1[2] = sum_BL;

                        grdbudget.DataSource = obj_DtGrd;
                        grdbudget.DataBind();
                    }
                    if (Str_Trantype == "AL")
                    {
                        txt_linkjob.Text = obj_ds.Tables[0].Rows[0]["JobCount"].ToString();
                        txt_linkhbl.Text = obj_ds.Tables[0].Rows[0]["BLCount"].ToString();
                        txt_splitbl.Text = obj_ds.Tables[0].Rows[0]["SBLCount"].ToString();
                        if (Str_by != "ETA")
                        {
                            txt_Shpts.Text = obj_ds.Tables[1].Rows[0]["JobCount"].ToString();
                        }
                        txt_consol20.Text = obj_dstemp.Tables[0].Rows[0]["cont20"].ToString();
                        txt_consol40.Text = obj_dstemp.Tables[0].Rows[0]["cont40"].ToString();
                        txt_consolcbm.Text = string.Format("{0:0.00}", obj_dstemp.Tables[0].Rows[0]["Tues"]);
                        txt_cbm.Text = string.Format("{0:0.00}", obj_dstemp.Tables[1].Rows[0]["cbm"]);

                        txt_fcl20.Text = obj_dstemp.Tables[2].Rows[0]["cont20"].ToString();
                        txt_fcl40.Text = obj_dstemp.Tables[2].Rows[0]["cont40"].ToString();
                        txt_fcltues.Text = obj_dstemp.Tables[2].Rows[0]["Tues"].ToString();

                        txt_GW.Text = string.Format("{0:0.00}", obj_dstemp.Tables[3].Rows[0]["GrossWt"]);
                        return;

                    }
                    txt_linkjob.Text = obj_ds.Tables[0].Rows[0]["JobCount"].ToString();
                    if (Str_Trantype != "CH")
                    {
                        txt_linkhbl.Text = obj_ds.Tables[0].Rows[0]["BLCount"].ToString();
                    }
                    if (Str_Trantype == "CH")
                    {
                        txt_Shpts.Text = txt_linkjob.Text;
                    }
                    if (Str_Trantype == "FI")
                    {
                        txt_splitbl.Text = obj_ds.Tables[0].Rows[0]["SBLCount"].ToString();
                    }

                    if (Str_Trantype == "FE" || Str_Trantype == "FI")
                    {
                        txt_consol20.Text = obj_dstemp.Tables[0].Rows[0]["cont20"].ToString();
                        txt_consol40.Text = obj_dstemp.Tables[0].Rows[0]["cont40"].ToString();
                        txt_consolcbm.Text = string.Format("{0:0.00}", obj_dstemp.Tables[0].Rows[0]["Tues"]);
                        txt_cbm.Text = string.Format("{0:0.00}", obj_dstemp.Tables[1].Rows[0]["cbm"]);

                        txt_fcl20.Text = obj_dstemp.Tables[2].Rows[0]["cont20"].ToString();
                        txt_fcl40.Text = obj_dstemp.Tables[2].Rows[0]["cont40"].ToString();
                        txt_fcltues.Text = obj_dstemp.Tables[2].Rows[0]["Tues"].ToString();
                    }
                    if (Str_Trantype == "AE")
                    {
                        lbl_AE.Text = "Air Exports";
                        txt_GW.Text = string.Format("{0:0.00}", obj_dstemp.Tables[0].Rows[0]["GrossWt"]);

                    }
                    if (Str_Trantype == "AI")
                    {
                        lbl_AE.Text = "Air Imports";
                        txt_GW.Text = string.Format("{0:0.00}", obj_dstemp.Tables[0].Rows[0]["GrossWt"]);
                    }

                    DataTable obj_dtjobtemp = new DataTable();
                    obj_dtjobtemp.Columns.Add("shortname");
                    obj_dtjobtemp.Columns.Add("jobno");
                    obj_dtjobtemp.Columns.Add("jobdate");
                    obj_dtjobtemp.Columns.Add("vslvoy");
                    obj_dtjobtemp.Columns.Add("eta");
                    obj_dtjobtemp.Columns.Add("agent");
                    obj_dtjobtemp.Columns.Add("preparedby");
                    obj_dtjobtemp.Columns.Add("bid");
                    obj_dtjobtemp.Columns.Add("cid");

                    DataTable obj_dtjob = new DataTable();
                    obj_dtjob = da_obj_Totalship.SPGetTotalNoOfJobDtls(int_bid, int_divid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate), Str_Trantype, Str_by);

                    if (obj_dtjob.Rows.Count > 0)
                    {
                        for (i = 0; i <= obj_dtjob.Rows.Count - 1; i++)
                        {
                            DataRow dr = obj_dtjobtemp.NewRow();
                            obj_dtjobtemp.Rows.Add(dr);
                            if (Str_Trantype != "CH")
                            {
                                dr[0] = obj_dtjob.Rows[i]["shortname"].ToString();
                                dr[1] = obj_dtjob.Rows[i]["jobno"].ToString();
                                dr[2] = obj_dtjob.Rows[i]["jobdate"].ToString();
                                dr[3] = obj_dtjob.Rows[i]["vslvoy"].ToString();
                                dr[4] = obj_dtjob.Rows[i]["eta"].ToString();
                                dr[5] = obj_dtjob.Rows[i]["agent"].ToString();
                                dr[6] = obj_dtjob.Rows[i]["preparedby"].ToString();
                                dr[7] = obj_dtjob.Rows[i]["bid"].ToString();
                                dr[8] = obj_dtjob.Rows[i]["cid"].ToString();
                            }
                            else
                            {
                                dr[0] = obj_dtjob.Rows[i]["shortname"].ToString();
                                dr[1] = obj_dtjob.Rows[i]["jobno"].ToString();
                                dr[2] = obj_dtjob.Rows[i]["jobdate"].ToString();
                                dr[3] = obj_dtjob.Rows[i]["vslvoy"].ToString();
                                dr[4] = 0;
                                dr[5] = obj_dtjob.Rows[i]["agent"].ToString();
                                dr[6] = obj_dtjob.Rows[i]["preparedby"].ToString();
                                dr[7] = obj_dtjob.Rows[i]["bid"].ToString();
                                dr[8] = obj_dtjob.Rows[i]["cid"].ToString();
                            }
                        }
                        GrdJob.DataSource = obj_dtjobtemp;
                        ViewState["GrdJob"] = obj_dtjobtemp;
                        GrdJob.DataBind();
                        if (Str_Trantype == "CH")
                        {
                            GrdJob.Columns[4].HeaderText = "Vsl/Flight/Truck";
                            GrdJob.Columns[5].Visible = false;
                        }
                        if (ddl_branch.Enabled == false)
                        {
                            GrdJob.Columns[1].Visible = false;
                        }
                    }
                    switch (trantype)
                    {
                        case "AC":
                            Logobj.InsLogDetail(employeeID, 574, 3, branchID, trantype + "/Branch: " + ddl_branch.Text + "/Product: " + ddl_product.Text + "/By: " + ddl_by.Text);
                            break;
                        case "FE":
                            Logobj.InsLogDetail(employeeID, 1007, 3, branchID, trantype + "/Branch: " + ddl_branch.Text + "/Product: " + ddl_product.Text + "/By: " + ddl_by.Text);
                            break;
                        case "FI":
                            Logobj.InsLogDetail(employeeID, 1008, 3, branchID, trantype + "/Branch: " + ddl_branch.Text + "/Product: " + ddl_product.Text + "/By: " + ddl_by.Text);
                            break;
                        case "AE":
                            Logobj.InsLogDetail(employeeID, 1009, 3, branchID, trantype + "/Branch: " + ddl_branch.Text + "/Product: " + ddl_product.Text + "/By: " + ddl_by.Text);
                            break;
                        case "AI":
                            Logobj.InsLogDetail(employeeID, 1010, 3, branchID, trantype + "/Branch: " + ddl_branch.Text + "/Product: " + ddl_product.Text + "/By: " + ddl_by.Text);
                            break;
                        case "CH":
                            Logobj.InsLogDetail(employeeID, 1011, 3, branchID, trantype + "/Branch: " + ddl_branch.Text + "/Product: " + ddl_product.Text + "/By: " + ddl_by.Text);
                            break;
                        case "MI":
                            Logobj.InsLogDetail(employeeID, 576, 3, branchID, trantype + "/Branch: " + ddl_branch.Text + "/Product: " + ddl_product.Text + "/By: " + ddl_by.Text);
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }

        }

        protected void ddl_by_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_Report.Text == "Income Statement")
            {
                By();
            }

            else
            {
                if (Str_Trantype == "AL")
                {
                    if (ddl_by.SelectedItem.Text == "Job Open Date")
                    {
                        Str_by = "JOD";
                    }
                    else if (ddl_by.SelectedItem.Text == "Job Close Date")
                    {
                        Str_by = "JCD";
                    }
                    else
                    {
                        Str_by = "ETA";
                    }
                }
                else
                {
                    if (ddl_by.SelectedItem.Text == "Job Open Date")
                    {
                        Str_by = "JOD";
                    }
                    else if (ddl_by.SelectedItem.Text == "Job Close Date")
                    {
                        Str_by = "JCD";
                    }
                    else
                    {
                        Str_by = "ETA";
                    }
                }

            }
        }

        protected void link_job_Click(object sender, EventArgs e)
        {
            try
            {
                GrdBL.Visible = false;

                GrdJob.DataSource = new DataTable();
                GrdJob.DataBind();
                if (ddl_product.SelectedItem.Text != "" && ddl_by.SelectedItem.Text != "")
                {
                    int int_bid, int_divid, i;
                    int_bid = Convert.ToInt32(ddl_branch.SelectedValue.ToString());
                    int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                    string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                    string str_todate = Utility.fn_ConvertDate(txt_to.Text);
                    DataTable obj_dtjob = new DataTable();
                    DataTable obj_dtjobtemp = new DataTable();
                    obj_dtjobtemp.Columns.Add("shortname");
                    obj_dtjobtemp.Columns.Add("jobno");
                    obj_dtjobtemp.Columns.Add("jobdate");
                    obj_dtjobtemp.Columns.Add("vslvoy");
                    obj_dtjobtemp.Columns.Add("eta");
                    obj_dtjobtemp.Columns.Add("agent");
                    obj_dtjobtemp.Columns.Add("preparedby");
                    obj_dtjobtemp.Columns.Add("bid");
                    obj_dtjobtemp.Columns.Add("cid");

                    GrdBL.Visible = false;

                    obj_dtjob = da_obj_Totalship.SPGetTotalNoOfJobDtls(int_bid, int_divid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate), Str_Trantype, Str_by);

                    if (obj_dtjob.Rows.Count > 0)
                    {
                        for (i = 0; i <= obj_dtjob.Rows.Count - 1; i++)
                        {
                            DataRow dr = obj_dtjobtemp.NewRow();
                            obj_dtjobtemp.Rows.Add(dr);
                            if (Str_Trantype != "CH")
                            {
                                dr[0] = obj_dtjob.Rows[i]["shortname"].ToString();
                                dr[1] = obj_dtjob.Rows[i]["jobno"].ToString();
                                dr[2] = obj_dtjob.Rows[i]["jobdate"].ToString();
                                dr[3] = obj_dtjob.Rows[i]["vslvoy"].ToString();
                                dr[4] = obj_dtjob.Rows[i]["eta"].ToString();
                                dr[5] = obj_dtjob.Rows[i]["agent"].ToString();
                                dr[6] = obj_dtjob.Rows[i]["preparedby"].ToString();
                                dr[7] = obj_dtjob.Rows[i]["bid"].ToString();
                                dr[8] = obj_dtjob.Rows[i]["cid"].ToString();
                            }
                            else
                            {
                                dr[0] = obj_dtjob.Rows[i]["shortname"].ToString();
                                dr[1] = obj_dtjob.Rows[i]["jobno"].ToString();
                                dr[2] = obj_dtjob.Rows[i]["jobdate"].ToString();
                                dr[3] = obj_dtjob.Rows[i]["vslvoy"].ToString();
                                dr[4] = 0;
                                dr[5] = obj_dtjob.Rows[i]["agent"].ToString();
                                dr[6] = obj_dtjob.Rows[i]["preparedby"].ToString();
                                dr[7] = obj_dtjob.Rows[i]["bid"].ToString();
                                dr[8] = obj_dtjob.Rows[i]["cid"].ToString();
                            }
                        }
                        GrdJob.DataSource = obj_dtjobtemp;
                        GrdJob.DataBind();
                        GrdJob.Visible = true;
                        if (Str_Trantype == "CH")
                        {
                            GrdJob.Columns[4].HeaderText = "Vsl/Flight/Truck";
                            GrdJob.Columns[5].Visible = false;
                        }
                        if (ddl_branch.Enabled == false)
                        {
                            GrdJob.Columns[1].Visible = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }

        }

        protected void link_hbl_Click(object sender, EventArgs e)
        {
            try
            {
                GrdJob.Visible = false;
                GrdBL.DataSource = new DataTable();
                GrdBL.DataBind();
                if (ddl_product.SelectedItem.Text != "" && ddl_by.SelectedItem.Text != "")
                {
                    int int_bid, int_divid, i;
                    int_bid = Convert.ToInt32(ddl_branch.SelectedValue.ToString());
                    int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                    string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                    string str_todate = Utility.fn_ConvertDate(txt_to.Text);
                    DataTable obj_dtbl = new DataTable();
                    DataTable obj_dtbltemp = new DataTable();
                    //GrdBL.Visible = true;

                    obj_dtbltemp.Columns.Add("shortname");
                    obj_dtbltemp.Columns.Add("jobno");
                    obj_dtbltemp.Columns.Add("nomination");
                    obj_dtbltemp.Columns.Add("blno");
                    obj_dtbltemp.Columns.Add("shipper");
                    obj_dtbltemp.Columns.Add("pol");
                    obj_dtbltemp.Columns.Add("fd");
                    obj_dtbltemp.Columns.Add("cbm");
                    obj_dtbltemp.Columns.Add("agent");
                    obj_dtbltemp.Columns.Add("preparedby");

                    obj_dtbl = da_obj_Totalship.SPGetTotalNoOfBLDetails(int_bid, int_divid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate), Str_Trantype, Str_by);

                    if (obj_dtbl.Rows.Count > 0)
                    {
                        for (i = 0; i <= obj_dtbl.Rows.Count - 1; i++)
                        {
                            DataRow dr = obj_dtbltemp.NewRow();
                            obj_dtbltemp.Rows.Add(dr);
                            dr[0] = obj_dtbl.Rows[i]["shortname"].ToString();
                            dr[1] = obj_dtbl.Rows[i]["jobno"].ToString();
                            if (Str_Trantype == "FE" || Str_Trantype == "AE")
                            {
                                if (obj_dtbl.Rows[i]["nomination"].ToString() == "N")
                                {
                                    dr[2] = "Nomination";
                                }
                                else
                                {
                                    dr[2] = "Controlled By Us";
                                }
                            }
                            else if (Str_Trantype == "FI" || Str_Trantype == "AI")
                            {
                                if (obj_dtbl.Rows[i]["nomination"].ToString() == "N")
                                {
                                    dr[2] = "Controlled By Us";
                                }
                                else
                                {
                                    dr[2] = "Nomination";
                                }
                            }
                            else if (Str_Trantype == "AL")
                            {
                                string Str_jobno = obj_dtbl.Rows[i]["jobno"].ToString();
                                if (Str_jobno.Trim().Length > 0)
                                {
                                    string[] Str_jobarray = Str_jobno.Split('-');
                                    if (Str_jobarray.Length > 0)
                                    {
                                        string Str_temp = Str_jobarray[0].ToString();
                                        if (Str_temp == "FE" || Str_temp == "AE")
                                        {
                                            if (obj_dtbl.Rows[i]["nomination"].ToString() == "N")
                                            {
                                                dr[2] = "Nomination";
                                            }
                                            else
                                            {
                                                dr[2] = "Controlled By Us";
                                            }
                                        }
                                        else if (Str_temp == "FI" || Str_temp == "AI")
                                        {
                                            if (obj_dtbl.Rows[i]["nomination"].ToString() == "N")
                                            {
                                                dr[2] = "Controlled By Us";
                                            }
                                            else
                                            {
                                                dr[2] = "Nomination";
                                            }
                                        }
                                    }
                                }
                            }
                            dr[3] = obj_dtbl.Rows[i]["blno"].ToString();
                            dr[4] = obj_dtbl.Rows[i]["shipper"].ToString();
                            dr[5] = obj_dtbl.Rows[i]["pol"].ToString();
                            dr[6] = obj_dtbl.Rows[i]["fd"].ToString();
                            dr[7] = obj_dtbl.Rows[i]["cbm"].ToString();
                            dr[8] = obj_dtbl.Rows[i]["agent"].ToString();
                            dr[9] = obj_dtbl.Rows[i]["preparedby"].ToString();
                        }

                        GrdBL.DataSource = obj_dtbltemp;
                        ViewState["GrdBL"] = obj_dtbltemp;
                        GrdBL.DataBind();
                        GrdBL.Visible = true;
                        if (Str_Trantype == "FE" || Str_Trantype == "AE")
                        {
                            GrdBL.Columns[5].HeaderText = "Shipper";
                        }
                        else if (Str_Trantype == "FI" || Str_Trantype == "AI")
                        {
                            GrdBL.Columns[5].HeaderText = "Consignee";
                        }
                        else if (Str_Trantype == "AL")
                        {
                            GrdBL.Columns[5].HeaderText = "Shipper/Consignee";
                        }
                        if (ddl_branch.Enabled == false)
                        {
                            GrdBL.Columns[1].Visible = false;
                        }
                        GrdBL.Columns[11].Visible = false;
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
                // ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "Master", "alertify.alert('Session TimeOut');window.open('../Login.aspx','_top');", true);
            }


        }

        protected void btncancel_Click(object sender, EventArgs e)
        {
            if (btncancel.ToolTip == "Cancel")
            {
                string Str_CurrrentDate = DateTime.Now.ToString("dd/MM/yyyy");
                txt_from.Text = Str_CurrrentDate;
                txt_to.Text = Str_CurrrentDate;
                grdbudget.DataSource = new DataTable();
                grdbudget.DataBind();
                GrdJob.DataSource = new DataTable();
                GrdJob.DataBind();
                GrdBL.DataSource = new DataTable();
                GrdBL.DataBind();
                GrdBL.Visible = false;
                txt_linkjob.Text = "";
                txt_cbm.Text = "";
                txt_consol20.Text = "";
                txt_consol40.Text = "";
                txt_consolcbm.Text = "";
                txt_fcl20.Text = "";
                txt_fcl40.Text = "";
                txt_fcltues.Text = "";
                txt_GW.Text = "";
                txt_linkhbl.Text = "";
                txt_Shpts.Text = "";
                txt_splitbl.Text = "";
                //ddl_branch.SelectedIndex = 0;
                //ddl_product.SelectedIndex = 0;
                //ddl_by.SelectedIndex = 0;
                btncancel.Text = "Back";

                Gridliner.DataSource = new DataTable();
                Gridliner.DataBind();


                btncancel.ToolTip = "Back"; ;
                btncancel1.Attributes["class"] = "btn ico-back";
            }
            else
            {
                /*if (Session["home"] != null)
                {
                    //if (Session["home"].ToString() == "MIS")
                    //{
                        Response.Redirect("../Home/CORHomeMIS.aspx");
                    //}
                }
                else
                {
                    this.Response.End();
                }*/

                Response.Redirect("../Home/CORHomeMIS.aspx");
            }
        }




        protected void GrdJob_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (GrdJob.Rows.Count > 0)
                {
                    int index = GrdJob.SelectedRow.RowIndex;
                    string str_jobno;
                    int int_bid, int_divid, i;
                    DataTable obj_temp = new DataTable();
                    int_bid = Convert.ToInt32(GrdJob.SelectedDataKey["bid"].ToString());
                    int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());

                    if (Str_Trantype == "AL")
                    {
                        str_jobno = GrdJob.SelectedRow.Cells[2].Text;

                        if (str_jobno.Trim().Length > 0)
                        {
                            String[] str_jobarray = str_jobno.Split('-');
                            if (str_jobarray.Length > 0)
                            {
                                obj_temp = da_obj_Totalship.SPGetTotalNoOfBLDetails4Job(int_bid, int_divid, Convert.ToInt32(str_jobarray[1].ToString()), str_jobarray[0].ToString());
                            }
                        }
                    }

                    else
                    {
                        int int_jobno = Convert.ToInt32(GrdJob.SelectedRow.Cells[2].Text);
                        obj_temp = da_obj_Totalship.SPGetTotalNoOfBLDetails4Job(int_bid, int_divid, int_jobno, Str_Trantype);
                    }

                    DataTable obj_dtbltemp = new DataTable();
                    GrdBL.Visible = true;
                    GrdJob.Visible = false;
                    obj_dtbltemp.Columns.Add("shortname");
                    obj_dtbltemp.Columns.Add("jobno");
                    obj_dtbltemp.Columns.Add("nomination");
                    obj_dtbltemp.Columns.Add("blno");
                    obj_dtbltemp.Columns.Add("shipper");
                    obj_dtbltemp.Columns.Add("pol");
                    obj_dtbltemp.Columns.Add("fd");
                    obj_dtbltemp.Columns.Add("cbm");
                    obj_dtbltemp.Columns.Add("agent");
                    obj_dtbltemp.Columns.Add("preparedby");

                    if (obj_temp.Rows.Count > 0)
                    {
                        for (i = 0; i <= obj_temp.Rows.Count - 1; i++)
                        {
                            DataRow dr = obj_dtbltemp.NewRow();
                            obj_dtbltemp.Rows.Add(dr);
                            dr[0] = obj_temp.Rows[i]["shortname"].ToString();
                            dr[1] = obj_temp.Rows[i]["jobno"].ToString();
                            if (Str_Trantype == "FE" || Str_Trantype == "AE")
                            {
                                if (obj_temp.Rows[i]["nomination"].ToString() == "N")
                                {
                                    dr[2] = "Nomination";
                                }
                                else
                                {
                                    dr[2] = "Controlled By Us";
                                }
                            }
                            else if (Str_Trantype == "FI" || Str_Trantype == "AI")
                            {
                                if (obj_temp.Rows[i]["nomination"].ToString() == "N")
                                {
                                    dr[2] = "Controlled By Us";
                                }
                                else
                                {
                                    dr[2] = "Nomination";
                                }
                            }
                            else if (Str_Trantype == "AL")
                            {
                                string Str_jobno = obj_temp.Rows[i]["jobno"].ToString();
                                if (Str_jobno.Trim().Length > 0)
                                {
                                    string[] Str_jobarray = Str_jobno.Split('-');
                                    if (Str_jobarray.Length > 0)
                                    {
                                        string Str_temp = Str_jobarray[0].ToString();
                                        if (Str_temp == "FE" || Str_temp == "AE")
                                        {
                                            if (obj_temp.Rows[i]["nomination"].ToString() == "N")
                                            {
                                                dr[2] = "Nomination";
                                            }
                                            else
                                            {
                                                dr[2] = "Controlled By Us";
                                            }
                                        }
                                        else if (Str_temp == "FI" || Str_temp == "AI")
                                        {
                                            if (obj_temp.Rows[i]["nomination"].ToString() == "N")
                                            {
                                                dr[2] = "Controlled By Us";
                                            }
                                            else
                                            {
                                                dr[2] = "Nomination";
                                            }
                                        }
                                    }
                                }
                            }
                            dr[3] = obj_temp.Rows[i]["blno"].ToString();
                            dr[4] = obj_temp.Rows[i]["shipper"].ToString();
                            dr[5] = obj_temp.Rows[i]["pol"].ToString();
                            dr[6] = obj_temp.Rows[i]["fd"].ToString();
                            dr[7] = obj_temp.Rows[i]["cbm"].ToString();
                            dr[8] = obj_temp.Rows[i]["agent"].ToString();
                            dr[9] = obj_temp.Rows[i]["preparedby"].ToString();
                        }

                        GrdBL.DataSource = obj_dtbltemp;
                        GrdBL.DataBind();
                        if (Str_Trantype == "FE" || Str_Trantype == "AE")
                        {
                            GrdBL.Columns[5].HeaderText = "Shipper";
                        }
                        else if (Str_Trantype == "FI" || Str_Trantype == "AI")
                        {
                            GrdBL.Columns[5].HeaderText = "Consignee";
                        }
                        else if (Str_Trantype == "AL")
                        {
                            GrdBL.Columns[5].HeaderText = "Shipper/Consignee";
                        }
                        if (ddl_branch.Enabled == false)
                        {
                            GrdBL.Columns[1].Visible = false;
                        }
                        GrdBL.Columns[11].Visible = true;
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
                // ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "Master", "alertify.alert('Session TimeOut');window.open('../Login.aspx','_top');", true);
            }

        }

        protected void GrdBL_SelectedIndexChanged(object sender, EventArgs e)
        {
            GrdBL.Visible = false;
            GrdJob.Visible = true;
        }

        protected void grdbudget_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                if (e.Row.Cells[0].Text == "Total")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;


                }

            }
        }

        protected void GrdJob_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                }

                Label lbl_vessel = (Label)e.Row.FindControl("lbl_vessel");
                string tooltip = lbl_vessel.Text;
                e.Row.Cells[4].Attributes.Add("title", tooltip);
                Label lbl_Agent = (Label)e.Row.FindControl("lbl_Agent");
                string tooltip1 = lbl_Agent.Text;
                e.Row.Cells[6].Attributes.Add("title", tooltip1);



                e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(GrdJob, "Select$" + e.Row.RowIndex);
                e.Row.Attributes["style"] = "cursor:pointer";
                e.Row.Attributes.Add("onmouseover", "this.originalcolor=this.style.backgroundColor;" + " this.style.backgroundColor='#FDCB0A';");
                e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor=this.originalcolor;");
            }
        }

        protected void GrdBL_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                }
                Label shipper = (Label)e.Row.FindControl("shipper");
                string tooltip = shipper.Text;
                e.Row.Cells[5].Attributes.Add("title", tooltip);
                Label agent = (Label)e.Row.FindControl("agent");
                string tooltip1 = agent.Text;
                e.Row.Cells[9].Attributes.Add("title", tooltip1);
                Label pol = (Label)e.Row.FindControl("pol");
                string tooltip2 = pol.Text;
                e.Row.Cells[6].Attributes.Add("title", tooltip2);

                Label lblblno = (Label)e.Row.FindControl("blno");
                string tooltip3 = lblblno.Text;
                e.Row.Cells[3].Attributes.Add("title", tooltip3);

                Label lblfd = (Label)e.Row.FindControl("fd");
                string tooltip4 = lblfd.Text;
                e.Row.Cells[7].Attributes.Add("title", tooltip4);

                Label lblpreparedby = (Label)e.Row.FindControl("preparedby");
                string tooltip5 = lblpreparedby.Text;
                e.Row.Cells[10].Attributes.Add("title", tooltip5);

                e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(GrdBL, "Select$" + e.Row.RowIndex);
                e.Row.Attributes["style"] = "cursor:pointer";
                e.Row.Attributes.Add("onmouseover", "this.originalcolor=this.style.backgroundColor;" + " this.style.backgroundColor='#FDCB0A';");
                e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor=this.originalcolor;");
            }
        }

        protected void GrdJob_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            GrdJob.PageIndex = e.NewPageIndex;
            GrdJob.Visible = true;
            GrdJob.DataSource = (DataTable)ViewState["GrdJob"];
            GrdJob.DataBind();
        }

        protected void GrdBL_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            GrdBL.PageIndex = e.NewPageIndex;
            GrdBL.Visible = true;
            GrdBL.DataSource = (DataTable)ViewState["GrdBL"];
            GrdBL.DataBind();
        }




        //STATISTICS END 



        //INBOUND START



        protected void btn_exportinb_Click(object sender, EventArgs e)
        {
            if (ddl_reportname.SelectedItem.Text == "Revenue - Branch wise")
            {
                GetBranchwiseVolume();
            }
            else if (ddl_reportname.SelectedItem.Text == "Revenue - Product wise" || ddl_reportname.SelectedItem.Text == "Volume - Product wise")
            {
                GetProdoct();
            }
            else
            {
                GetVolume();
            }
        }

        protected void btn_cancelinb_Click(object sender, EventArgs e)
        {
            if (btncancel.ToolTip == "Cancel")
            {
                DateTime dtdate = DateTime.Now;
                ddlmonth.Text = dtdate.Month.ToString();
                ddltomonth.Text = dtdate.Month.ToString();
                ddlyear.Text = dtdate.Year.ToString();
                ddltoyear.Text = dtdate.Year.ToString();
                ddl_reportname.SelectedIndex = 0;
                btncancel.Text = "Back";

                btncancel.ToolTip = "Back"; ;
                btncancel1.Attributes["class"] = "btn ico-back";
            }
            else
            {
                //this.Response.End();


                //if (Session["home"] != null)
                //{
                //    //if (Session["home"].ToString() == "MIS")
                //{
                Response.Redirect("../Home/CORHomeMIS.aspx");
                //}
                //}
                //else
                //{
                //    this.Response.End();
                //}
            }
        }

        private void GetBranchwiseVolume()
        {
            int i, j, k, int_divid, int_bid, int_frmyear, int_toyear, int_frmmonth, int_tomonth;
            double value1, value2;
            int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
            DataTable obj_dt = new DataTable();
            DataTable obj_dttemp = new DataTable();
            obj_dttemp.Columns.Add("Intmonth", typeof(int));
            obj_dttemp.Columns.Add("Strmonth", typeof(string));
            int_frmyear = Convert.ToInt32(ddlyear.SelectedItem.Text);
            int_toyear = Convert.ToInt32(ddltoyear.SelectedItem.Text);
            int_frmmonth = ddlmonth.SelectedIndex + 1;
            int_tomonth = ddltomonth.SelectedIndex + 1;

            DateTime dt1 = new DateTime(int_frmyear, int_frmmonth, 1);
            DateTime dt2 = new DateTime(int_toyear, int_tomonth, 1);

            TimeSpan ts = dt2.Subtract(dt1);
            int month = (ts.Days) / 30;
            if (month.ToString().Contains("-"))
            {
                return;
            }
            int int_month = month + int_frmmonth;
            for (i = int_frmmonth; i <= int_month; i++)
            {
                j = i % 12;
                if (j == 0)
                {
                    j = 12;
                }
                DataRow Dr = obj_dttemp.NewRow();
                obj_dttemp.Rows.Add(Dr);
                Dr[0] = j;
                Dr[1] = ddlmonth.Items[j - 1].Text;
            }


            obj_dt = da_obj_Right.GetBranchid4usg(int_divid);
            if (obj_dttemp.Rows.Count > 0)
            {

                string Filename, strHtml;
                strHtml = "";
                Filename = ddl_reportname.SelectedItem.Text + " - " + ddlmonth.SelectedItem.Text + " to " + ddltomonth.SelectedItem.Text + "( " + ddlyear.Text + " to " + ddltoyear.Text + " )";

                strHtml = strHtml + "<html  xmlns:v=\"urn:schemas-microsoft-com:vml\"xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\"xmlns=\"http://www.w3.org/TR/REC-html40\">";


                strHtml = strHtml + "<table BORDER=1 BORDERCOLOR=Black><tr><td>Month ---> </td>";


                for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                {
                    strHtml = strHtml + "<td  align=center colspan=3>" + obj_dttemp.Rows[i].ItemArray[1].ToString().Substring(0, 3) + "</td>";
                }
                strHtml = strHtml + "</tr>";
                strHtml = strHtml + "<tr><td>Branch</td>";
                for (i = 0; i <= obj_dttemp.Rows.Count - 1; i++)
                {
                    strHtml = strHtml + "<td  align=center>Budget</td><td  align=center>Actual</td><td  align=center>%</td>";
                }
                strHtml = strHtml + "</tr>";

                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {
                    strHtml = strHtml + "<tr><td>" + obj_dt.Rows[j].ItemArray[0].ToString() + "</td>";
                    int_bid = Convert.ToInt32(Session["LoginBranchid"].ToString());
                    for (k = 0; k <= obj_dttemp.Rows.Count - 1; k++)
                    {
                        DataTable obj_DtVolume = new DataTable();
                        obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dttemp.Rows[k].ItemArray[0].ToString()), int_tomonth, int_frmyear, "FEFCL", ddl_reportname.SelectedItem.Text, int_toyear);

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {
                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                    strHtml = strHtml + "</tr>";
                }
                strHtml = strHtml + "</table><br><br>";

                strHtml = strHtml + "<table BORDER=1 BORDERCOLOR=Black><tr><td></td>";
                strHtml = strHtml + "<td  align=center colspan=3>Cumulative " + ddlmonth.SelectedItem.Text.ToUpper() + " to " + ddltomonth.SelectedItem.Text.ToUpper() + "( " + ddlyear.Text + " to " + ddltoyear.Text + " ) </td>";
                strHtml = strHtml + "</tr>";
                strHtml = strHtml + "<tr><td>Branch</td>";
                strHtml = strHtml + "<td  align=center>Budget</td><td  align=center>Actual</td><td  align=center>%</td>";
                strHtml = strHtml + "</tr>";

                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {
                    strHtml = strHtml + "<tr><td>" + obj_dt.Rows[j].ItemArray[0].ToString() + "</td>";
                    int_bid = Convert.ToInt32(Session["LoginBranchid"].ToString());
                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FEFCL", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {
                                    //strHtml = strHtml + "<td>" + String.Format("{0.000}", obj_DtVolume.Rows[0].ItemArray[0]) + "</td><td>" + String.Format("{0.000}", obj_DtVolume.Rows[0].ItemArray[1]) + "</td><td>" + (Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) - Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) / (Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) * 100)) + "</td>";
                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                    strHtml = strHtml + "</tr>";
                }
                strHtml = strHtml + "</table><br><br>";
                logDetails.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 634, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "Export");
                strHtml = strHtml + "</html>";
                Response.Clear();
                Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
                Response.Buffer = true;
                Response.Charset = "UTF-8";
                Response.ContentType = "application/vnd.ms-excel";
                Response.Write(strHtml);
                Response.End();
            }
        }

        private void GetProdoct()
        {
            int i, j, k, int_divid, int_frmyear, int_toyear, int_frmmonth, int_tomonth;
            double value1, value2;
            int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
            DataTable obj_dt = new DataTable();
            obj_dt.Columns.Add("Strmonth", typeof(string));
            obj_dt.Columns.Add("Intmonth", typeof(int));
            obj_dt.Columns.Add("Intyear", typeof(int));
            int_frmyear = Convert.ToInt32(ddlyear.SelectedItem.Text);
            int_toyear = Convert.ToInt32(ddltoyear.SelectedItem.Text);
            int_frmmonth = ddlmonth.SelectedIndex + 1;
            int_tomonth = ddltomonth.SelectedIndex + 1;

            DateTime dt1 = new DateTime(int_frmyear, int_frmmonth, 1);
            DateTime dt2 = new DateTime(int_toyear, int_tomonth, 1);

            TimeSpan ts = dt2.Subtract(dt1);
            int month = (ts.Days) / 30;
            if (month.ToString().Contains("-"))
            {
                return;
            }
            int int_month = month + int_frmmonth;
            k = int_frmyear;
            for (i = int_frmmonth; i <= int_month; i++)
            {
                j = i % 12;

                if (j == 0)
                {
                    j = 12;
                }

                DataRow Dr = obj_dt.NewRow();
                obj_dt.Rows.Add(Dr);
                Dr[0] = ddlmonth.Items[j - 1].Text;
                Dr[1] = j;
                Dr[2] = k;
                if (j == 12)
                {
                    k++;
                }
            }
            //obj_dt = da_obj_Right.GetBranchid4usg(int_divid);
            if (obj_dt.Rows.Count > 0)
            {

                string Filename, strHtml;
                strHtml = "";
                Filename = ddl_reportname.SelectedItem.Text + " - " + ddlmonth.SelectedItem.Text + " to " + ddltomonth.SelectedItem.Text + "( " + ddlyear.Text + " to " + ddltoyear.Text + " )";


                strHtml = strHtml + "<html  xmlns:v=\"urn:schemas-microsoft-com:vml\"xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\"xmlns=\"http://www.w3.org/TR/REC-html40\">";


                strHtml = strHtml + "<table BORDER=1 BORDERCOLOR=Black><tr><td>Month ---> </td>";


                for (i = 0; i <= obj_dt.Rows.Count - 1; i++)
                {
                    strHtml = strHtml + "<td  align=center colspan=3>" + obj_dt.Rows[i].ItemArray[0].ToString().Substring(0, 3) + "</td>";
                }
                strHtml = strHtml + "</tr>";
                strHtml = strHtml + "<tr><td>Product</td>";
                for (i = 0; i <= obj_dt.Rows.Count - 1; i++)
                {
                    strHtml = strHtml + "<td  align=center>Budget</td><td  align=center>Actual</td><td  align=center>%</td>";
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp FCL//
                strHtml = strHtml + "<tr><td>Sea-Exp FCL</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FEFCL", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {
                                    //strHtml = strHtml + "<td>" + String.Format("{0.000}", obj_DtVolume.Rows[0].ItemArray[0]) + "</td><td>" + String.Format("{0.000}", obj_DtVolume.Rows[0].ItemArray[1]) + "</td><td>" + (Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) - Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) / (Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) * 100)) + "</td>";
                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp LCL//
                strHtml = strHtml + "<tr><td>Sea-Exp LCL</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FELCL", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp Consol//
                strHtml = strHtml + "<tr><td>Sea-Exp Consol</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FECON", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp MCC//
                strHtml = strHtml + "<tr><td>Sea-Exp MCC</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FEMCC", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp BCC//
                strHtml = strHtml + "<tr><td>Sea-Exp BCC</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FEBCC", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp CHA//
                strHtml = strHtml + "<tr><td>Sea-Exp CHA</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "CHSE", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Air-Export//
                strHtml = strHtml + "<tr><td>Air-Export</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "AE", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";


                //Sea-Imp FCL//
                strHtml = strHtml + "<tr><td>Sea-Imp FCL</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FIFCL", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp LCL//
                strHtml = strHtml + "<tr><td>Sea-Imp LCL</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FILCL", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp Consol//
                strHtml = strHtml + "<tr><td>Sea-Imp Consol</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FICON", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp MCC//
                strHtml = strHtml + "<tr><td>Sea-Imp MCC</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FIMCC", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp BCC//
                strHtml = strHtml + "<tr><td>Sea-Imp BCC</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "FIBCC", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp CHA//
                strHtml = strHtml + "<tr><td>Sea-Imp CHA</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "CHSI", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Air-Import//
                strHtml = strHtml + "<tr><td>Air-Import</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "AI", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Air-Exp CHA//
                strHtml = strHtml + "<tr><td>Air-Exp CHA</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "CHAE", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";


                //Air-Imp CHA//
                strHtml = strHtml + "<tr><td>Air-Imp CHA</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()) + 1, Convert.ToInt32(obj_dt.Rows[j].ItemArray[2].ToString()), "CHAI", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";
                strHtml = strHtml + "</table><br><br>";
                strHtml = strHtml + Cumulative();
                strHtml = strHtml + "</html>";
                logDetails.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 634, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "Export");
                Response.Clear();
                Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
                Response.Buffer = true;
                Response.Charset = "UTF-8";
                Response.ContentType = "application/vnd.ms-excel";
                Response.Write(strHtml);
                Response.End();
            }

        }

        private string Cumulative()
        {
            int int_frmyear, int_toyear, int_frmmonth, int_tomonth;
            double value1, value2;
            DataTable obj_dt = new DataTable();
            int_frmyear = Convert.ToInt32(ddlyear.SelectedItem.Text);
            int_toyear = Convert.ToInt32(ddltoyear.SelectedItem.Text);
            int_frmmonth = ddlmonth.SelectedIndex + 1;
            int_tomonth = ddltomonth.SelectedIndex + 1;
            string strHtml;
            strHtml = "";
            strHtml = strHtml + "<table BORDER=1 BORDERCOLOR=Black><tr><td></td>";
            strHtml = strHtml + "<td  align=center colspan=3>" + "Cumulative " + ddlmonth.SelectedItem.Text.ToUpper() + " to " + ddltomonth.SelectedItem.Text.ToUpper() + "( " + ddlyear.Text + " to " + ddltoyear.Text + " )" + "</td>";
            strHtml = strHtml + "</tr>";
            strHtml = strHtml + "<tr><td>Product</td>";
            strHtml = strHtml + "<td  align=center>Budget</td><td  align=center>Actual</td><td  align=center>%</td>";
            strHtml = strHtml + "</tr>";

            strHtml = strHtml + "<tr><td>Sea-Exp FCL</td>";
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FEFCL", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";


            //Sea-Exp LCL//
            strHtml = strHtml + "<tr><td>Sea-Exp LCL</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FELCL", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Exp Consol//
            strHtml = strHtml + "<tr><td>Sea-Exp Consol</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FECON", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Exp MCC//
            strHtml = strHtml + "<tr><td>Sea-Exp MCC</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FEMCC", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Exp BCC//
            strHtml = strHtml + "<tr><td>Sea-Exp BCC</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FEBCC", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Exp CHA//
            strHtml = strHtml + "<tr><td>Sea-Exp CHA</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "CHSE", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";


            //Air-Export//
            strHtml = strHtml + "<tr><td>Air-Export</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "AE", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Imp FCL//
            strHtml = strHtml + "<tr><td>Sea-Imp FCL</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FIFCL", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Imp LCL//
            strHtml = strHtml + "<tr><td>Sea-Imp LCL</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FILCL", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Imp Consol//
            strHtml = strHtml + "<tr><td>Sea-Imp Consol</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FICON", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Imp MCC//
            strHtml = strHtml + "<tr><td>Sea-Imp MCC</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FIMCC", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";


            //Sea-Imp BCC//
            strHtml = strHtml + "<tr><td>Sea-Imp BCC</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "FIBCC", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Sea-Imp CHA//
            strHtml = strHtml + "<tr><td>Sea-Imp CHA</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "CHSI", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Air-Import//
            strHtml = strHtml + "<tr><td>Air-Import</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "AI", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";


            //Air-Exp CHA//
            strHtml = strHtml + "<tr><td>Air-Exp CHA</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "CHAE", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";

            //Air-Imp CHA//
            strHtml = strHtml + "<tr><td>Air-Imp CHA</td>";
            obj_dt.Reset();
            obj_dt = da_obj_Corp.SelInboundMISinBudgetVActualVolume(0, int_frmmonth, int_tomonth, int_frmyear, "CHAI", ddl_reportname.SelectedItem.Text + " Cumulative", int_toyear);

            if (obj_dt.Rows.Count > 0)
            {

                if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0])
                {
                    if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString()) != 0)
                    {
                        value1 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[0].ToString());
                        value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());

                        strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                    }
                    else
                    {
                        if (DBNull.Value != obj_dt.Rows[0].ItemArray[1] && DBNull.Value != obj_dt.Rows[0].ItemArray[0] && Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString()) != 0)
                        {
                            value2 = Convert.ToDouble(obj_dt.Rows[0].ItemArray[1].ToString());
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }
                    }
                }

            }
            else
            {
                strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
            }
            strHtml = strHtml + "</tr>";
            strHtml = strHtml + "</table>";

            return strHtml;
        }

        private void GetVolume()
        {
            int i, j, k, int_divid, int_frmyear, int_toyear, int_frmmonth, int_tomonth;
            double value1, value2;
            int_divid = Convert.ToInt32(Session["LoginDivisionId"].ToString());
            DataTable obj_dt = new DataTable();

            int_frmyear = Convert.ToInt32(ddlyear.SelectedItem.Text);
            int_toyear = Convert.ToInt32(ddltoyear.SelectedItem.Text);
            int_frmmonth = ddlmonth.SelectedIndex + 1;
            int_tomonth = ddltomonth.SelectedIndex + 1;

            obj_dt = da_obj_Right.GetBranchid4usg(int_divid);

            if (obj_dt.Rows.Count > 0)
            {
                string Filename, strHtml;
                strHtml = "";
                Filename = ddl_reportname.SelectedItem.Text + " - " + ddlmonth.SelectedItem.Text + " to " + ddltomonth.SelectedItem.Text + "( " + ddlyear.Text + " to " + ddltoyear.Text + " )";


                strHtml = strHtml + "<html  xmlns:v=\"urn:schemas-microsoft-com:vml\"xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\"xmlns=\"http://www.w3.org/TR/REC-html40\">";


                strHtml = strHtml + "<table BORDER=1 BORDERCOLOR=Black><tr><td>Region / Branch ---> </td>";


                for (i = 0; i <= obj_dt.Rows.Count - 1; i++)
                {
                    strHtml = strHtml + "<td  align=center colspan=3>" + obj_dt.Rows[i].ItemArray[0].ToString() + "</td>";
                }
                strHtml = strHtml + "</tr>";
                strHtml = strHtml + "<tr><td>Product</td>";
                for (i = 0; i <= obj_dt.Rows.Count - 1; i++)
                {
                    strHtml = strHtml + "<td  align=center>Budget</td><td  align=center>Actual</td><td  align=center>%</td>";
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp FCL//
                strHtml = strHtml + "<tr><td>Sea-Exp FCL</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FEFCL", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {
                                    //strHtml = strHtml + "<td>" + String.Format("{0.000}", obj_DtVolume.Rows[0].ItemArray[0]) + "</td><td>" + String.Format("{0.000}", obj_DtVolume.Rows[0].ItemArray[1]) + "</td><td>" + (Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) - Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) / (Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) * 100)) + "</td>";
                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp LCL//
                strHtml = strHtml + "<tr><td>Sea-Exp LCL</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FELCL", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp Consol//
                strHtml = strHtml + "<tr><td>Sea-Exp Consol</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FECON", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp MCC//
                strHtml = strHtml + "<tr><td>Sea-Exp MCC</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FEMCC", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp BCC//
                strHtml = strHtml + "<tr><td>Sea-Exp BCC</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FEBCC", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Exp CHA//
                strHtml = strHtml + "<tr><td>Sea-Exp CHA</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "CHSE", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Air-Export//
                strHtml = strHtml + "<tr><td>Air-Export</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "AE", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";


                //Sea-Imp FCL//
                strHtml = strHtml + "<tr><td>Sea-Imp FCL</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FIFCL", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp LCL//
                strHtml = strHtml + "<tr><td>Sea-Imp LCL</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FILCL", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp Consol//
                strHtml = strHtml + "<tr><td>Sea-Imp Consol</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FICON", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp MCC//
                strHtml = strHtml + "<tr><td>Sea-Imp MCC</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FIMCC", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp BCC//
                strHtml = strHtml + "<tr><td>Sea-Imp BCC</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "FIBCC", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Sea-Imp CHA//
                strHtml = strHtml + "<tr><td>Sea-Imp CHA</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "CHSI", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Air-Import//
                strHtml = strHtml + "<tr><td>Air-Import</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "AI", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";

                //Air-Exp CHA//
                strHtml = strHtml + "<tr><td>Air-Exp CHA</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "CHAE", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";


                //Air-Imp CHA//
                strHtml = strHtml + "<tr><td>Air-Imp CHA</td>";
                for (j = 0; j <= obj_dt.Rows.Count - 1; j++)
                {

                    DataTable obj_DtVolume = new DataTable();
                    obj_DtVolume = da_obj_Corp.SelInboundMISinBudgetVActualVolume(Convert.ToInt32(obj_dt.Rows[j].ItemArray[1].ToString()), int_frmmonth, int_tomonth, int_frmyear, "CHAI", ddl_reportname.SelectedItem.Text, int_toyear);

                    for (k = 0; k <= obj_DtVolume.Rows.Count - 1; k++)
                    {

                        if (obj_DtVolume.Rows.Count > 0)
                        {
                            if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0])
                            {
                                if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString()) != 0)
                                {

                                    value1 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[0].ToString());
                                    value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());

                                    strHtml = strHtml + "<td>" + String.Format("{0:0.000}", value1) + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + String.Format("{0:0.000}", (value2 - value1) / (value1 * 100)) + "</td>";
                                }
                                else
                                {
                                    if (DBNull.Value != obj_DtVolume.Rows[0].ItemArray[1] && DBNull.Value != obj_DtVolume.Rows[0].ItemArray[0] && Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString()) != 0)
                                    {
                                        value2 = Convert.ToDouble(obj_DtVolume.Rows[0].ItemArray[1].ToString());
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + String.Format("{0:0.000}", value2) + "</td><td>" + 0 + "</td>";
                                    }
                                    else
                                    {
                                        strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                                    }
                                }
                            }
                        }
                        else
                        {
                            strHtml = strHtml + "<td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td>";
                        }

                    }
                }
                strHtml = strHtml + "</tr>";
                strHtml = strHtml + "</table><br><br>";
                strHtml = strHtml + "</html>";
                logDetails.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 634, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "Export");
                Response.Clear();
                Response.AddHeader("Content-Disposition", "Attachment;Filename=" + Filename + ".xls");
                Response.Buffer = true;
                Response.Charset = "UTF-8";
                Response.ContentType = "application/vnd.ms-excel";
                Response.Write(strHtml);
                Response.End();
            }
        }

        //INBOUND END


        //BLVOUCHERWISE

        protected void grdvoucher_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                e.Row.Attributes.Add("onmouseover", "this.style.cursor='pointer'");
                e.Row.Attributes.Add("onmouseout", "this.style.cursor='default'");
                GridView Grd = (GridView)e.Row.FindControl("gvChildGrid");
                int_divid = Convert.ToInt32(grdvoucher.DataKeys[e.Row.RowIndex].Values[0].ToString());
                string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                string str_todate = Utility.fn_ConvertDate(txt_to.Text);
                DataTable obj_Grddt = new DataTable();
                obj_Grddt = da_obj_CostTemp.GetBranchProfit(int_divid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate));
                if (obj_Grddt.Rows.Count > 0 && Grd.Rows.Count == 0)
                {

                    Grd.DataSource = obj_Grddt;
                    Grd.DataBind();

                }
                //GridView GrdBranch = (GridView)e.Row.FindControl("Grdbranch");
                //int_bid = Convert.ToInt32(Grd.DataKeys[e.Row.RowIndex].Values[0].ToString());
                //DataTable obj_Grddt1 = new DataTable();
                //obj_Grddt1 = da_obj_CostTemp.GetTrantypeProfit(int_bid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate));
                //if (obj_Grddt1.Rows.Count > 0)
                //{
                //    GrdBranch.DataSource = obj_Grddt1;
                //    GrdBranch.DataBind();

                //}

            }
        }

        protected void gvChildGrid_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                e.Row.Attributes.Add("onmouseover", "this.style.cursor='pointer'");
                e.Row.Attributes.Add("onmouseout", "this.style.cursor='default'");
                GridView b = sender as GridView;
                if (b != null)
                {
                    GridView g = (GridView)e.Row.FindControl("Grdbranch");
                    if (g != null)
                    {
                        int_bid = Convert.ToInt32(b.DataKeys[e.Row.RowIndex].Values[0].ToString());
                        string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                        string str_todate = Utility.fn_ConvertDate(txt_to.Text);
                        DataTable obj_Grddt1 = new DataTable();
                        obj_Grddt1 = da_obj_CostTemp.GetTrantypeProfit(int_bid, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate));
                        if (obj_Grddt1.Rows.Count > 0)
                        {
                            g.DataSource = obj_Grddt1;
                            g.DataBind();

                        }
                    }
                }
            }
        }
        protected void Grdbranch_SelectedIndexChanged(object sender, EventArgs e)
        {
            GridView b = sender as GridView;
            string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
            string str_todate = Utility.fn_ConvertDate(txt_to.Text);
            int int_bid = Convert.ToInt32(b.SelectedDataKey.Values[0].ToString());
            int int_did = Convert.ToInt32(b.SelectedDataKey.Values[2].ToString());
            string trantype = b.SelectedDataKey.Values[1].ToString();
            DataTable obj_dtjob = new DataTable();
            obj_dtjob = da_obj_CostTemp.GetTrantypeJobProfit(int_bid, trantype, DateTime.Parse(str_fromdate), DateTime.Parse(str_todate));
            if (obj_dtjob.Rows.Count > 0)
            {
                Grdjob_BL.Visible = true;
                Grdjob_BL.DataSource = obj_dtjob;
                Grdjob_BL.DataBind();

            }
            ScriptManager.RegisterStartupScript(btnget, typeof(Button), "Testing", "divexpandcollapse('div" + int_did.ToString() + "'); divbranch('divbranch" + int_bid.ToString() + "');", true);
            hid_branch.Value = int_bid.ToString();
            hid_trantype.Value = trantype;
            hid_division.Value = int_did.ToString();
        }

        protected void Grdjob_BL_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            int int_bid = Convert.ToInt32(hid_branch.Value.ToString());
            int int_did = Convert.ToInt32(hid_division.Value.ToString()); ;
            if (e.CommandName == "BL" && e.CommandArgument != null)
            {

                ModalPopupExtender1.Show();
                if (hid_branch.Value != "" && hid_trantype.Value != "")
                {
                    DataTable obj_dtbl = new DataTable();
                    obj_dtbl = da_obj_CostTemp.GetJobProfit(Convert.ToInt32(hid_branch.Value.ToString()), hid_trantype.Value.ToString(), Convert.ToInt32(e.CommandArgument.ToString()));

                    Grd_BL.DataSource = obj_dtbl;
                    Grd_BL.DataBind();
                }
            }
            else if (e.CommandName == "Select" && e.CommandArgument != null)
            {
                if (hid_branch.Value != "" && hid_trantype.Value != "")
                {
                    iframecost.Attributes["src"] = "../ForwardExports/Costing.aspx?type=PreAlert&jobno=" + e.CommandArgument.ToString() + "&branchid=" + int_bid.ToString() + "&divisionid=" + int_did.ToString() + "&trantype=" + hid_trantype.Value;
                    pln_voucher.Visible = true;
                    ModalPopupExtender2.Show();
                }

            }
            ScriptManager.RegisterStartupScript(btnget, typeof(Button), "Testing", "divexpandcollapse('div" + int_did.ToString() + "'); divbranch('divbranch" + int_bid.ToString() + "');", true);
        }





        //BLVOUCHERWISEEND


        //Job details 

        protected void btnprint_Click(object sender, EventArgs e)
        {
            string Str_RptName, Str_SF, Str_SP, Str_Script;
            //DateTime dtfrom = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text.ToString()));
            //DateTime dtto = Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text.ToString()));
            //Str_RptName = "AllShipmentDetailsTemp.rpt";
            //Str_SF = "{CostingDetails.closeddate}>=date(" + dtfrom.Year + "," + dtfrom.Month + "," + dtfrom.Day + ") and {CostingDetails.closeddate}<=date(" + dtto.Year + "," + dtto.Month + "," + dtto.Day + ") and {CostingDetails.division}=" + int.Parse(Session["LoginDivisionId"].ToString());
            //Str_SP = "Title=Shipment Details from " + txt_from.Text + " To " + txt_to.Text;
            //Str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + Str_SF + "&Parameter=" + Str_SP + "&RFName=" + Str_RptName + "&" + this.Page.ClientQueryString + "','','');";
            //ScriptManager.RegisterStartupScript(btnprint, typeof(Button), "Shipment Details", Str_Script, true);


            int_Empid = Convert.ToInt32(Session["LoginEmpId"].ToString());

            Str_RptName = "ClosedJobs.rpt";
            Str_SF = "{TempClosedJob.empid}=" + int_Empid;
            Str_SP = "title=Shipment Count for the Period of  " + txt_from.Text + "  to  " + txt_to.Text;
            Str_Script = "window.open('../Tools/ReportView.aspx?SFormula=" + Str_SF + "&Parameter=" + Str_SP + "&RFName=" + Str_RptName + "&" + this.Page.ClientQueryString + "','','');";
            da_obj_Log.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 790, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
            ScriptManager.RegisterStartupScript(btnprint, typeof(Button), "Jobdetails", Str_Script, true);
        }

        protected void btncanceljobdetails_Click(object sender, EventArgs e)
        {
            if (btncanceljobdetails.ToolTip == "Cancel")
            {
                txt_to.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_from.Text = DateTime.Now.AddDays(-1).ToString("dd/MM/yyyy");
                Grdjobdetails.DataSource = null;
                Grdjobdetails.DataBind();
                btncanceljobdetails.Text = "Back";


                btncanceljobdetails.ToolTip = "Back"; ;
                btncanceljobdetails1.Attributes["class"] = "btn ico-back";
            }
            else
            {
                Response.Redirect("../Home/CORHomeMIS.aspx");
            }
        }

        //Job details end


        //Exemption list


        public void emptygrd()
        {
            for (i = 0; i <= grdExcmption.Rows.Count - 1; i++)
            {
                grdExcmption.DataSource = Utility.Fn_GetEmptyDataTable();
                grdExcmption.DataBind();
            }


            //else
            //{
            //    string message = "empty grid";
            //    ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            //}
        }


        protected void grdExcmption_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                grdExcmption.PageIndex = e.NewPageIndex;
                intdiv = Convert.ToInt32(Session["LoginDivisionId"].ToString());

                for (i = 0; i <= grdExcmption.Rows.Count - 1; i++)
                {
                    grdExcmption.DataSource = Utility.Fn_GetEmptyDataTable();
                }

                intBranchId = objHr.GetBranchId(Convert.ToInt32(Session["LoginDivisionId"].ToString()), ddl_branch.Text);

                dt = objiExcm.GridFillJobdtls(Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), intBranchId, intdiv);

                if (dt.Rows.Count > 0)
                {
                    grdExcmption.DataSource = dt;

                    grdExcmption.DataBind();
                }

                else
                {
                    ScriptManager.RegisterStartupScript(btn_get, typeof(Button), "logix", "alertify.alert('No Data Exits');", true);
                }

            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }
        protected void grdExcmption_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            try
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    Label lblCustomer = (Label)e.Row.FindControl("branch");
                    string tooltip = lblCustomer.Text;
                    e.Row.Cells[0].Attributes.Add("title", tooltip);
                    Label lblCustomer1 = (Label)e.Row.FindControl("empname");
                    string tooltip1 = lblCustomer1.Text;
                    e.Row.Cells[2].Attributes.Add("title", tooltip1);

                    Label lblCustomer2 = (Label)e.Row.FindControl("customername");
                    string tooltip2 = lblCustomer2.Text;
                    e.Row.Cells[4].Attributes.Add("title", tooltip2);
                    Label lblCustomer3 = (Label)e.Row.FindControl("reqremarks");
                    string tooltip3 = lblCustomer3.Text;
                    e.Row.Cells[6].Attributes.Add("title", tooltip3);

                    Label lblCustomer4 = (Label)e.Row.FindControl("docno");
                    string tooltip4 = lblCustomer4.Text;
                    e.Row.Cells[5].Attributes.Add("title", tooltip4);

                    Label lblCustomer5 = (Label)e.Row.FindControl("trantype");
                    string tooltip5 = lblCustomer5.Text;
                    e.Row.Cells[1].Attributes.Add("title", tooltip5);

                    Label lblCustomer6 = (Label)e.Row.FindControl("reqon");
                    string tooltip6 = lblCustomer6.Text;
                    e.Row.Cells[3].Attributes.Add("title", tooltip6);

                    //e.Row.Attributes.Add("onmouseover", "this.originalcolor=this.style.backgroundColor;" + " this.style.backgroundColor='#FDCB0A';");
                    //e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor=this.originalcolor;");

                    //e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grdExcmption, "Select$" + e.Row.RowIndex);
                    //e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }
        protected void btnExporttoexcel_Click(object sender, EventArgs e)
        {

            try
            {
                Response.Clear();
                Response.Buffer = true;
                Response.ClearContent();
                Response.ClearHeaders();
                Response.Charset = "";
                string FileName = "ExemptionList" + DateTime.Now + ".xls";
                StringWriter strwritter = new StringWriter();
                HtmlTextWriter htmltextwrtter = new HtmlTextWriter(strwritter);
                intdiv = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                //for (i = 0; i <= grdExcmption.Rows.Count - 1; i++)
                //{
                //    grdExcmption.DataSource = Utility.Fn_GetEmptyDataTable();
                //}
                intBranchId = objHr.GetBranchId(Convert.ToInt32(Session["LoginDivisionId"].ToString()), ddl_branch.Text);

                grdExcmption.AllowPaging = false;
                dt = objiExcm.GridFillJobdtls(Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text)), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text)), intBranchId, intdiv);
                grdExcmption.DataSource = dt;
                grdExcmption.DataBind();
                logDetails.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"]), 1309, 3, Convert.ToInt32(Session["LoginBranchid"]), " From: " + txt_from.Text + "/To: " + txt_to.Text + "/Excel");

                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.ContentType = "application/vnd.ms-excel";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + FileName);
                grdExcmption.GridLines = GridLines.Both;
                grdExcmption.HeaderStyle.Font.Bold = true;
                grdExcmption.RenderControl(htmltextwrtter);
                Response.Write(strwritter.ToString());
                Response.End();
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }
        protected void btnBack_Click(object sender, EventArgs e)
        {
            if (btnBack.ToolTip == "Cancel")
            {
                hf_date.Value = Utility.fn_ConvertDate(logDetails.GetDate().ToShortDateString());
                txt_from.Text = hf_date.Value;
                txt_to.Text = hf_date.Value;
                emptygrd();
                   btnBack.Text = "Back";

                btnBack.ToolTip = "Back"; ;
                btnBack1.Attributes["class"] = "btn ico-back";
            }

            else
            {
                //if (Session["home"] != null)
                //{
                //if (Session["home"].ToString() == "MIS")
                //{
                Response.Redirect("../Home/CORHomeMIS.aspx");
                //    //}
                //}
                //else
                //{
                //    this.Response.End();
                //}
            }
        }


        //Exemption list end




        //BillingReports


        public void FillBranch()
        {
            try
            {
                ddl_branch.Items.Clear();
                Dt = bobj.GetBranchByDivID(intDivID);
                ddl_branch.Items.Add("");
                ddl_branch.Items.Add("ALL");
                if (Dt.Rows.Count > 0)
                {
                    for (int i = 0; i <= Dt.Rows.Count - 1; i++)
                    {
                        if (Dt.Rows[i]["branch"].ToString() != "CORPORATE")
                        {
                            ddl_branch.Items.Add(Dt.Rows[i]["branch"].ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }

        }

        public void FillModule()
        {
            ddl_product.Items.Clear();
            ddl_product.Items.Add("");
            ddl_product.Items.Add("Air Exports");
            ddl_product.Items.Add("Air Imports");
            ddl_product.Items.Add("Ocean Exports");
            ddl_product.Items.Add("Ocean Imports");
            ddl_product.Items.Add("Custom House Agent");
        }


        public void bind()
        {
            try
            {

                Panel3.Visible = false;
                GridView1.Visible = false;
                excportexc.Visible = false;

                PanelOE.Visible = false;
                GrdOE.Visible = false;

                PanelAI.Visible = false;
                GrdAI.Visible = false;
                excportexc.Visible = false;


                PanelOE.Visible = false;
                GrdOE.Visible = false;
                Panel4.Visible = false;
                excportexc.Visible = false;
                PanelOI.Visible = false;
                GrdOI.Visible = false;
                lbl_cut.Visible = false;
                penBlRelase.Visible = false;
                GridView1.Visible = false;


                EmptyCheck();
                  btnBack.Text = "Cancel";
                btnBack.ToolTip = "Cancel";
                btnBack1.Attributes["class"] = "btn ico-cancel";

                if (bolerr == true)
                {
                    bolerr = false;
                    return;
                }
                string dtfrom = Utility.fn_ConvertDate(txt_from.Text.ToString());
                string dtto = Utility.fn_ConvertDate(txt_to.Text.ToString());
                intDivID = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                intBranchID = HREmpobj.GetBranchId(intDivID, ddl_branch.Text.Trim());
                //  trantype = Session["trantype"].ToString();
                if (hid_trantypeid.Value != null || hid_trantypeid.Value != "" || hid_trantypeid.Value == "0")
                {
                    trantype = hid_trantypeid.Value;
                }
                if (Session["strBy"] == null)
                {
                    By();
                }
                else
                {
                    strBy = Session["strBy"].ToString();
                }

                Dtbill = billObj.Getbillrpt(DateTime.Parse(dtfrom), DateTime.Parse(dtto), intBranchID, intDivID, trantype, strBy);
                ViewState["Dtbill"] = Dtbill;

                if (Dtbill.Rows.Count > 0)
                {
                    grdJobDtls.Visible = true;
                    grdJobDtls.DataSource = Dtbill;
                    grdJobDtls.DataBind();
                }
                else
                {
                    ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('Data Not Available');", true);
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }

        }

        public void clearAll()
        {
            if (strTran == "AC")
            {
                ddl_product.SelectedIndex = 0;
            }
            if (strTran == "CO")
            {
                ddl_branch.SelectedIndex = 0;
                ddl_product.SelectedIndex = 0;
            }
            if (strTran == "AC")
            {
                ddl_product.SelectedIndex = 0;
            }
            ddl_by.SelectedIndex = 0;
            btnBack.Text = "Back";

            btnBack.ToolTip = "Back";
            btnBack1.Attributes["class"] = "btn ico-back";
            grdJobDtls.DataSource = Utility.Fn_GetEmptyDataTable();
            grdJobDtls.DataBind();
            txt_from.Text = Utility.fn_ConvertDate(LogObj.GetDate().ToShortDateString());
            txt_to.Text = Utility.fn_ConvertDate(LogObj.GetDate().ToShortDateString());
        }

        protected void grdJobDtls_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            grdJobDtls.PageIndex = e.NewPageIndex;
            bind();
            //Panel1.Visible = true;
        }

        protected void grdJobDtls_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label lblBL = (Label)e.Row.FindControl("BL");
                string tooltip = lblBL.Text;
                e.Row.Cells[3].Attributes.Add("title", tooltip);

                Label lblVou = (Label)e.Row.FindControl("Vou");
                string tooltip1 = lblVou.Text;
                e.Row.Cells[4].Attributes.Add("title", tooltip1);

                Label lblCustomer = (Label)e.Row.FindControl("Customer");
                string tooltip2 = lblCustomer.Text;
                e.Row.Cells[6].Attributes.Add("title", tooltip2);

                double dbl_temp = 0;
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }



                    if (double.TryParse(e.Row.Cells[7].Text.ToString(), out dbl_temp))
                    {
                        e.Row.Cells[7].Text = string.Format("{0:#,##0.00}", dbl_temp);
                        e.Row.Cells[7].Attributes.CssStyle["text-align"] = "Right";
                    }
                }
            }

        }

        protected void By()
        {
            try
            {
                btnBack.Text = "Cancel";


                btnBack.ToolTip = "Cancel";
                btnBack1.Attributes["class"] = "btn ico-cancel";
                if (hid_trantypeid.Value != null || hid_trantypeid.Value != "" || hid_trantypeid.Value == "0")
                {
                    trantype = hid_trantypeid.Value;
                }
                //   trantype = Session["trantype"].ToString();
                if (trantype == "AL")
                {
                    if (ddl_by.Text == "Job Open Date")
                    {
                        strBy = "JOD";
                        Session["strBy"] = strBy;
                    }
                    else if (ddl_by.Text == "Job Close Date")
                    {
                        strBy = "JCD";
                        Session["strBy"] = strBy;
                    }
                    else
                    {
                        strBy = "ETD";
                        Session["strBy"] = strBy;
                    }
                }
                else
                {
                    if (ddl_by.Text == "Job Open Date")
                    {
                        strBy = "JOD";
                        Session["strBy"] = strBy;
                    }
                    else if (ddl_by.Text == "Job Close Date")
                    {
                        strBy = "JCD";
                        Session["strBy"] = strBy;
                    }
                    else
                    {
                        strBy = "ETD";
                        Session["strBy"] = strBy;
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }

        }

        public void EmptyCheck()
        {
            if (ddl_branch.SelectedIndex == 0)
            {
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('Please Select the Branch');", true);
                bolerr = true;
                ddl_branch.Focus();
                return;
            }
            //else if (ddl_product.SelectedIndex == 0)
            //{
            //    ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('Please Select any Module');", true);
            //    bolerr = true;
            //    ddl_product.Focus();
            //    return;
            //}
            else if (ddl_by.SelectedValue == "")
            {
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('Please Select By');", true);
                bolerr = true;
                ddl_by.Focus();
                return;
            }

        }

        protected void btn_export_billrpt_Click(object sender, EventArgs e)
        {
            if (txt_from.Text == "" || txt_to.Text == "")
            {
                ScriptManager.RegisterStartupScript(this.Page, typeof(Page), "EventTracking", "alertify.alert('Select the date');", true);
            }
            else
            {
                try
                {
                    bind();
                    if (bolerr == true)
                    {
                        return;
                    }
                    intBranchID = HREmpobj.GetBranchId(intDivID, ddl_branch.Text.Trim());
                    string dtfrom = Utility.fn_ConvertDate(txt_from.Text.ToString());
                    string dtto = Utility.fn_ConvertDate(txt_to.Text.ToString());
                    intDivID = Convert.ToInt32(Session["LoginDivisionId"].ToString());
                    intBranchID = HREmpobj.GetBranchId(intDivID, ddl_branch.Text.Trim());
                    if (hid_trantypeid.Value != null || hid_trantypeid.Value != "" || hid_trantypeid.Value == "0")
                    {
                        trantype = hid_trantypeid.Value;
                    }
                    //if (Session["trantype"] != null)
                    //{
                    //    trantype = Session["trantype"].ToString();
                    //}
                    EmptyCheck();
                    if (bolerr == true)
                    {
                        return;
                    }
                    if (Session["strBy"] == null)
                    {
                        By();
                    }
                    else
                    {
                        if (Session["strBy"] != null)
                        {
                            strBy = Session["strBy"].ToString();
                        }
                    }

                    LogObj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"]), 1309, 3, Convert.ToInt32(Session["LoginBranchid"]), " From: " + txt_from.Text + "/To: " + txt_to.Text + "/Get");

                    Response.Clear();
                    Response.Buffer = true;
                    Response.ClearContent();
                    Response.ClearHeaders();
                    Response.Charset = "";
                    string FileName = "Income Statement" + DateTime.Now + ".xls";
                    StringWriter strwritter = new StringWriter();
                    HtmlTextWriter htmltextwrtter = new HtmlTextWriter(strwritter);

                    grdJobDtls.AllowPaging = false;
                    Dtbill = billObj.Getbillrpt(DateTime.Parse(dtfrom), DateTime.Parse(dtto), intBranchID, intDivID, trantype, strBy);
                    grdJobDtls.DataSource = Dtbill;
                    grdJobDtls.DataBind();

                    Response.Cache.SetCacheability(HttpCacheability.NoCache);
                    Response.ContentType = "application/vnd.ms-excel";
                    Response.AddHeader("Content-Disposition", "attachment;filename=" + FileName);
                    grdJobDtls.GridLines = GridLines.Both;
                    grdJobDtls.HeaderStyle.Font.Bold = true;
                    grdJobDtls.RenderControl(htmltextwrtter);
                    Response.Write(strwritter.ToString());
                    Response.End();
                }
                catch (Exception ex)
                {
                    string message = ex.Message.ToString();
                    ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
                }
            }
            btnBack.Text = "Cancel";


            btnBack.ToolTip = "Cancel";
            btnBack1.Attributes["class"] = "btn ico-cancel";

        }

        protected void btncancel_billrpt_Click(object sender, EventArgs e)
        {
            if (btnBack.ToolTip == "Back")
            {
                /*if (Session["home"] != null)
                {
                    //if (Session["home"].ToString() == "MIS")
                    //{
                    Response.Redirect("../Home/CORHomeMIS.aspx");
                    //}
                }
                else
                {
                    this.Response.End();
                }*/
                Response.Redirect("../Home/CORHomeMIS.aspx");

            }
            else
            {
                clearAll();
            }
        }

        protected void btn_canc_ctoff_Click(object sender, EventArgs e)
        {

        }

        protected void btn_exp_cutoff_Click(object sender, EventArgs e)
        {

            int LoginBranchid = Convert.ToInt16(Session["LoginBranchid"]);
            int LoginDivisionId = Convert.ToInt16(Session["LoginDivisionId"]);
            int LoginEmpId = Convert.ToInt16(Session["LoginEmpId"]);
            DateTime fdate = Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text) + " " + DateTime.Now.ToLongTimeString()); //Convert.ToDateTime(Utility.fn_ConvertDate(dtFrom.Text));
            DateTime FromDate = fdate;
            DataTable dt = new DataTable();
            DataTable dta = new DataTable();
            DataTable dtb = new DataTable();
           // DataAccess.Accounts.Reversal cutobj = new DataAccess.Accounts.Reversal();
            string sp;
            GridView3.Visible = false;
            GridView4.Visible = false;
            Panel1.Visible = false;
            Panel1.Visible = false;
            int cnt = 0;
            Response.Clear();
            Response.AddHeader("content-disposition", "attachment;filename=Sailed / Arrived On After or Before Cut-offdate" + DateTime.Now + ".xls");
            Response.Charset = "";
            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            StringBuilder SB = new StringBuilder();
            StringWriter StringWriter = new System.IO.StringWriter(SB);
            HtmlTextWriter HtmlTextWriter = new HtmlTextWriter(StringWriter);


            dt = cutobj.GetCutoffBreakUpDetails(LoginDivisionId, "A", fdate, LoginEmpId);

            if (dt.Rows.Count > 0)
            {
                cnt = GridView1.Columns.Count;
                GridView3.Visible = true;
                Panel1.Visible = true;
                GridView3.DataSource = dt;
                GridView3.DataBind();
                SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>Sailed / Arrived On or After Cut-offdate</B></font></td></tr>");
                SB.Append("</table>");
                GridView3.GridLines = GridLines.Both;
                GridView3.HeaderStyle.Font.Bold = true;
                GridView3.RenderControl(HtmlTextWriter);
            }

            dta = cutobj.GetCutoffBreakUpDetails(LoginDivisionId, "B", fdate, LoginEmpId);



            if (dta.Rows.Count > 0)
            {
                //GridView2.Visible = true;
                //GridView1.Visible = false;
                //Panel1.Visible = false;
                //Panel1.Visible = true;
                GridView4.Visible = true;
                Panel2.Visible = true;

                GridView4.DataSource = dta;

                GridView4.DataBind();
                cnt = GridView2.Columns.Count;
                SB.Append("<table BORDER=1 BORDERCOLOR=Black><tr><td align=left colspan=" + cnt + "><font face=arial size=3><B>Sailed / Arrived On or Before Cut-offdate</B></font></td></tr>");
                SB.Append("</table>");
                GridView4.GridLines = GridLines.Both;
                GridView4.HeaderStyle.Font.Bold = true;
                GridView4.RenderControl(HtmlTextWriter);

            }
            obj_da_Logobj.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 1334, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "Export");
            string style = @"<style> .textmode { } </style>";
            Response.Write(style);
            Response.Output.Write(StringWriter.ToString());
            Response.Flush();
            Response.End();
        }
        //BillingReports End

        //CUTOFFDETAILS


        protected void GridView3_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                }
            }
        }

        protected void GridView4_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                }


            }

            //if (e.Row.RowType == DataControlRowType.Header)
            //{
            //    if (e.Row.Cells[0].Text == "Amount")
            //    {
            //        e.Row.ForeColor = System.Drawing.Color.Brown;
            //        for (int h = 2; h < e.Row.Cells.Count; h++)
            //        {
            //            e.Row.Cells[h].Attributes.CssStyle["text-align"] = "Right";
            //        }
            //    }
            //}

            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                double dbl_temp = 0;
                for (int h = 0; h < e.Row.Cells.Count; h++)
                {
                    if (double.TryParse(e.Row.Cells[h].Text.ToString(), out dbl_temp))
                    {
                        e.Row.Cells[h].HorizontalAlign = HorizontalAlign.Right;
                        if (h == 10)
                        {
                            e.Row.Cells[h].Text = string.Format("{0:#,##0.00}", dbl_temp);
                            e.Row.Cells[h].Attributes.CssStyle["text-align"] = "Right";
                        }
                        else
                        {
                            e.Row.Cells[h].Attributes.CssStyle["text-align"] = "left";

                        }


                        //else
                        //{
                        //    e.Row.Cells[h].Text = string.Format("{0:#,##0.00}", dbl_temp);
                        //    e.Row.Cells[h].Attributes.CssStyle["text-align"] = "Right";
                        //}
                    }
                    //e.Row.Cells[h].Attributes.CssStyle["width"] = "10%";
                }

            }

        }
        //CUTOFFDETAILS END

        //TradeLine

        public void BindDivision()
        {


            DataTable obj_dtTemp = new DataTable();
            obj_dtTemp = da_obj_HrEmp.GetDivision();
            ddl_division.DataSource = obj_dtTemp;
            ddl_division.DataTextField = "divisionname";
            ddl_division.DataValueField = "divisionid";
            ddl_division.DataBind();
        }
        public void BindSector()
        {

            DataTable obj_dtTemp = new DataTable();
            obj_dtTemp = da_obj_Sector.GetAllSectornname();
            ddl_sector.DataSource = obj_dtTemp;
            ddl_sector.DataTextField = "sectorname";
            ddl_sector.DataValueField = "sectorid";
            ddl_sector.DataBind();

        }

        public void BindDate()
        {
            int i;

            for (i = 1; i <= 12; i++)
            {
                DateTime date = new DateTime(2000, i, 1);
                ddlfrmmonth.Items.Add(new System.Web.UI.WebControls.ListItem(date.ToString("MMM"), i.ToString()));
                ddltomonthtrad.Items.Add(new System.Web.UI.WebControls.ListItem(date.ToString("MMM"), i.ToString()));
                ddlfrmmonth1.Items.Add(new System.Web.UI.WebControls.ListItem(date.ToString("MMM"), i.ToString()));
                ddltomonth1.Items.Add(new System.Web.UI.WebControls.ListItem(date.ToString("MMM"), i.ToString()));
            }
            string str_date = DateTime.Now.Year.ToString();
            txt_frmyear.Text = str_date;
            txt_toyear.Text = str_date;
            txt_frmyear1.Text = str_date;
            txt_toyear1.Text = str_date;
        }

        protected void ddl_sector_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(ddl_sector.SelectedValue.ToString()) == false)
            {
                DataTable obj_dt = new DataTable();
                obj_dt = da_obj_Sector.GetCountryname4Sector(Convert.ToInt32(ddl_sector.SelectedValue.ToString()));
                if (obj_dt.Rows.Count > 0)
                {
                    Grd_Country.DataSource = obj_dt;
                    Grd_Country.DataBind();

                }
            }
            else
            {
                Grd_Country.DataSource = null;
                Grd_Country.DataBind();
            }
        }



        private void Getdetail(int cid)
        {
            Grd_product.DataSource = null;
            Grd_product.DataBind();
            DataTable obj_dt = new DataTable();
            obj_dt.Columns.Add("product", typeof(string));
            obj_dt.Columns.Add("unit", typeof(string));

            obj_dt.Columns.Add(new DataColumn { ColumnName = "volume", DataType = typeof(double), DefaultValue = 0 });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "retention", DataType = typeof(double), DefaultValue = 0 });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "volume1", DataType = typeof(double), DefaultValue = 0 });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "retention1", DataType = typeof(double), DefaultValue = 0 });


            DataRow Dr0 = obj_dt.NewRow();
            DataRow Dr1 = obj_dt.NewRow();
            DataRow Dr2 = obj_dt.NewRow();
            DataRow Dr3 = obj_dt.NewRow();
            DataRow Dr4 = obj_dt.NewRow();
            DataRow Dr5 = obj_dt.NewRow();

            obj_dt.Rows.Add(Dr0);
            obj_dt.Rows.Add(Dr1);
            obj_dt.Rows.Add(Dr2);
            obj_dt.Rows.Add(Dr3);
            obj_dt.Rows.Add(Dr4);
            obj_dt.Rows.Add(Dr5);

            Dr0[0] = "Exports - FCL";
            Dr0[1] = "Teus";

            Dr1[0] = "Exports - LCL";
            Dr1[1] = "CBM";

            Dr2[0] = "Exports - Air";
            Dr2[1] = "Kgs";

            Dr3[0] = "Imports - FCL";
            Dr3[1] = "Teus";

            Dr4[0] = "Imports - LCL";
            Dr4[1] = "CBM";

            Dr5[0] = "Imports - Air";
            Dr5[1] = "Kgs";

            DataSet obj_ds = new DataSet();
            DataSet obj_da = new DataSet();

            int Sectorid, Countyid, divid, frmmonth, frmyear, tomonth, toyear, frm_month, frm_year, to_month, to_year, i;
            double value1 = 0, value2 = 0, value3 = 0, value4 = 0, value5 = 0, value6 = 0;
            Sectorid = Convert.ToInt32(ddl_sector.SelectedValue.ToString());
            Countyid = cid;
            divid = Convert.ToInt32(da_obj_Division.GetDivisionid(ddl_division.SelectedValue.ToString()));
            frmmonth = Convert.ToInt32(ddlfrmmonth.SelectedValue.ToString());
            tomonth = Convert.ToInt32(ddltomonthtrad.SelectedValue.ToString());
            frmyear = Convert.ToInt32(txt_frmyear.Text.ToString());
            toyear = Convert.ToInt32(txt_toyear.Text.ToString());

            frm_month = Convert.ToInt32(ddlfrmmonth1.SelectedValue.ToString());
            to_month = Convert.ToInt32(ddltomonth1.SelectedValue.ToString());
            frm_year = Convert.ToInt32(txt_frmyear1.Text.ToString());
            to_year = Convert.ToInt32(txt_toyear1.Text.ToString());

            obj_ds = da_obj_Sector.GetTradelaneDetails(Sectorid, Countyid, int_bid, divid, frmmonth, frmyear, tomonth, toyear);
            obj_da = da_obj_Sector.GetTradelaneDetails(Sectorid, Countyid, int_bid, divid, frm_month, frm_year, to_month, to_year);

            if (obj_ds.Tables.Count > 1)
            {
                for (i = 0; i <= obj_ds.Tables[0].Rows.Count - 1; i++)
                {
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_ds.Tables[0].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = value1 + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value2 = value2 + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr0[2] = value1;
                        Dr0[3] = value2;
                        //Dr0[2] = Dr0[2] == DBNull.Value ? 0 : Dr0[2];
                        //Dr0[3] = Dr0[3] == DBNull.Value ? 0 : Dr0[3];
                    }
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_ds.Tables[0].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = value3 + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value4 = value4 + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr1[2] = value3;
                        Dr1[3] = value4;
                        //Dr1[2] = Dr1[2] == DBNull.Value ? 0 : Dr1[2];
                        //Dr1[3] = Dr1[3] == DBNull.Value ? 0 : Dr1[3];
                    }
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "AE")
                    {
                        value5 = value5 + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value6 = value6 + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr2[2] = value5;
                        Dr2[3] = value6;
                        //Dr2[2] = Dr2[2] == DBNull.Value ? 0 : Dr2[2];
                        //Dr2[3] = Dr2[3] == DBNull.Value ? 0 : Dr2[3];
                    }
                }
                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_ds.Tables[1].Rows.Count - 1; i++)
                {
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_ds.Tables[1].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = value1 + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value2 = value2 + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        Dr3[2] = value1;
                        Dr3[3] = value2;
                        //Dr3[2] = Dr3[2] == DBNull.Value ? 0 : Dr3[2];
                        //Dr3[3] = Dr3[3] == DBNull.Value ? 0 : Dr3[3];
                    }
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_ds.Tables[1].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = value3 + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value4 = value4 + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        Dr4[2] = value3;
                        Dr4[3] = value4;
                        //Dr4[2] = Dr4[2] == DBNull.Value ? 0 : Dr4[2];
                        //Dr4[3] = Dr4[3] == DBNull.Value ? 0 : Dr4[3];
                    }
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "AI")
                    {
                        value5 = value5 + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value6 = value6 + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        Dr5[2] = value5;
                        Dr5[3] = value6;
                        //Dr5[2] = Dr5[2] == DBNull.Value ? 0 : Dr5[2];
                        //Dr5[3] = Dr5[3] == DBNull.Value ? 0 : Dr5[3];
                    }
                }


                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_da.Tables[0].Rows.Count - 1; i++)
                {
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_da.Tables[0].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = value1 + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value2 = value2 + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr0[4] = value1;
                        Dr0[5] = value2;
                        //Dr0[4] = Dr0[4] == DBNull.Value ? 0 : Dr0[4];
                        //Dr0[5] = Dr0[5] == DBNull.Value ? 0 : Dr0[5];
                    }
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_da.Tables[0].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = value3 + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value4 = value4 + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr1[4] = value3;
                        Dr1[5] = value4;
                        //Dr1[4] = Dr1[4] == DBNull.Value ? 0 : Dr1[4];
                        //Dr1[5] = Dr1[5] == DBNull.Value ? 0 : Dr1[5];
                    }
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "AE")
                    {
                        value5 = value5 + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value6 = value6 + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr2[4] = value5;
                        Dr2[5] = value6;
                        //Dr2[4] = Dr2[4] == DBNull.Value ? 0 : Dr2[4];
                        //Dr2[5] = Dr2[5] == DBNull.Value ? 0 : Dr2[5];
                    }
                }

                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_da.Tables[1].Rows.Count - 1; i++)
                {
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_da.Tables[1].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = value1 + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value2 = value2 + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr3[4] = value1;
                        Dr3[5] = value2;
                        //Dr3[4] = Dr3[4] == DBNull.Value ? 0 : Dr3[4];
                        //Dr3[5] = Dr3[5] == DBNull.Value ? 0 : Dr3[5];
                    }
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_da.Tables[1].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = value3 + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value4 = value4 + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr4[4] = value3;
                        Dr4[5] = value4;
                        //Dr4[4] = Dr4[4] == DBNull.Value ? 0 : Dr4[4];
                        //Dr4[5] = Dr4[5] == DBNull.Value ? 0 : Dr4[5];
                    }
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "AI")
                    {
                        value5 = value5 + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value6 = value6 + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr5[4] = value5;
                        Dr5[5] = value6;
                        //Dr5[4] = Dr5[4] == DBNull.Value ? 0 : Dr5[4];
                        //Dr5[5] = Dr5[5] == DBNull.Value ? 0 : Dr5[5];
                    }
                }
                Grd_product.DataSource = obj_dt;
                Grd_product.DataBind();
                obj_dtchk.Reset();
                obj_dtchk = obj_dt.Copy();
            }
        }


        protected void Loaddetail(object sender, EventArgs e)
        {

            CheckBox chkheader = (CheckBox)Grd_Country.HeaderRow.FindControl("Chk_show");
            chkheader.Checked = false;

            CheckBox chk = sender as CheckBox;
            GridViewRow row = chk.NamingContainer as GridViewRow;
            HiddenField hid = (HiddenField)row.FindControl("hidchk");
            int cid = Convert.ToInt32(hid.Value.ToString());

            if (chk.Checked)
            {

                if (obj_dtchk.Rows.Count == 0)
                {
                    Getdetail(cid);
                }
                else
                {
                    GetdetailAdd(cid);
                }

            }
            else
            {
                GetdetailSub(cid);

            }

        }
        private void GetdetailAdd(int cid)
        {
            Grd_product.DataSource = null;
            Grd_product.DataBind();
            DataTable obj_dt = new DataTable();
            obj_dt.Columns.Add("product", typeof(string));
            obj_dt.Columns.Add("unit", typeof(string));
            obj_dt.Columns.Add(new DataColumn { ColumnName = "volume", DataType = typeof(double), DefaultValue = 0 });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "retention", DataType = typeof(double), DefaultValue = 0 });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "volume1", DataType = typeof(double), DefaultValue = 0 });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "retention1", DataType = typeof(double), DefaultValue = 0 });
            DataRow Dr0 = obj_dt.NewRow();
            DataRow Dr1 = obj_dt.NewRow();
            DataRow Dr2 = obj_dt.NewRow();
            DataRow Dr3 = obj_dt.NewRow();
            DataRow Dr4 = obj_dt.NewRow();
            DataRow Dr5 = obj_dt.NewRow();

            obj_dt.Rows.Add(Dr0);
            obj_dt.Rows.Add(Dr1);
            obj_dt.Rows.Add(Dr2);
            obj_dt.Rows.Add(Dr3);
            obj_dt.Rows.Add(Dr4);
            obj_dt.Rows.Add(Dr5);

            Dr0[0] = "Exports - FCL";
            Dr0[1] = "Teus";

            Dr1[0] = "Exports - LCL";
            Dr1[1] = "CBM";

            Dr2[0] = "Exports - Air";
            Dr2[1] = "Kgs";

            Dr3[0] = "Imports - FCL";
            Dr3[1] = "Teus";

            Dr4[0] = "Imports - LCL";
            Dr4[1] = "CBM";

            Dr5[0] = "Imports - Air";
            Dr5[1] = "Kgs";
            obj_dt = obj_dtchk.Copy();
            DataSet obj_ds = new DataSet();
            DataSet obj_da = new DataSet();

            int Sectorid, Countyid, divid, frmmonth, frmyear, tomonth, toyear, frm_month, frm_year, to_month, to_year, i;
            double value1 = 0, value2 = 0, value3 = 0, value4 = 0, value5 = 0, value6 = 0;
            Sectorid = Convert.ToInt32(ddl_sector.SelectedValue.ToString());
            Countyid = cid;
            divid = Convert.ToInt32(ddl_division.SelectedValue.ToString());
            frmmonth = Convert.ToInt32(ddlfrmmonth.SelectedValue.ToString());
            tomonth = Convert.ToInt32(ddltomonthtrad.SelectedValue.ToString());
            frmyear = Convert.ToInt32(txt_frmyear.Text.ToString());
            toyear = Convert.ToInt32(txt_toyear.Text.ToString());

            frm_month = Convert.ToInt32(ddlfrmmonth1.SelectedValue.ToString());
            to_month = Convert.ToInt32(ddltomonth1.SelectedValue.ToString());
            frm_year = Convert.ToInt32(txt_frmyear1.Text.ToString());
            to_year = Convert.ToInt32(txt_toyear1.Text.ToString());

            obj_ds = da_obj_Sector.GetTradelaneDetails(Sectorid, Countyid, int_bid, divid, frmmonth, frmyear, tomonth, toyear);
            obj_da = da_obj_Sector.GetTradelaneDetails(Sectorid, Countyid, int_bid, divid, frm_month, frm_year, to_month, to_year);

            if (obj_ds.Tables.Count > 1)
            {
                for (i = 0; i <= obj_ds.Tables[0].Rows.Count - 1; i++)
                {
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_ds.Tables[0].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = Convert.ToDouble(obj_dtchk.Rows[0]["volume"].ToString()) + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value2 = Convert.ToDouble(obj_dtchk.Rows[0]["retention"].ToString()) + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr0[2] = value1;
                        Dr0[3] = value2;
                        obj_dt.Rows[0]["volume"] = value1;
                        obj_dt.Rows[0]["retention"] = value2;

                    }
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_ds.Tables[0].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = Convert.ToDouble(obj_dtchk.Rows[1]["volume"].ToString()) + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value4 = Convert.ToDouble(obj_dtchk.Rows[1]["retention"].ToString()) + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr1[2] = value3;
                        Dr1[3] = value4;
                        obj_dt.Rows[1]["volume"] = value3;
                        obj_dt.Rows[1]["retention"] = value4;
                    }
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "AE")
                    {
                        value5 = Convert.ToDouble(obj_dtchk.Rows[2]["volume"].ToString()) + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value6 = Convert.ToDouble(obj_dtchk.Rows[2]["retention"].ToString()) + Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr2[2] = value5;
                        Dr2[3] = value6;
                        obj_dt.Rows[2]["volume"] = value5;
                        obj_dt.Rows[2]["retention"] = value6;

                    }
                }
                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_ds.Tables[1].Rows.Count - 1; i++)
                {
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_ds.Tables[1].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = Convert.ToDouble(obj_dtchk.Rows[3]["volume"].ToString()) + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value2 = Convert.ToDouble(obj_dtchk.Rows[3]["retention"].ToString()) + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        Dr3[2] = value1;
                        Dr3[3] = value2;
                        obj_dt.Rows[3]["volume"] = value1;
                        obj_dt.Rows[3]["retention"] = value2;
                    }
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_ds.Tables[1].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = Convert.ToDouble(obj_dtchk.Rows[4]["volume"].ToString()) + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value4 = Convert.ToDouble(obj_dtchk.Rows[4]["retention"].ToString()) + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        Dr4[2] = value3;
                        Dr4[3] = value4;
                        obj_dt.Rows[4]["volume"] = value3;
                        obj_dt.Rows[4]["retention"] = value4;
                    }
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "AI")
                    {
                        value5 = Convert.ToDouble(obj_dtchk.Rows[5]["volume"].ToString()) + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value6 = Convert.ToDouble(obj_dtchk.Rows[5]["retention"].ToString()) + Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        Dr5[2] = value5;
                        Dr5[3] = value6;
                        obj_dt.Rows[5]["volume"] = value5;
                        obj_dt.Rows[5]["retention"] = value6;
                    }
                }


                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_da.Tables[0].Rows.Count - 1; i++)
                {
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_da.Tables[0].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = Convert.ToDouble(obj_dtchk.Rows[0]["volume1"].ToString()) + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value2 = Convert.ToDouble(obj_dtchk.Rows[0]["retention1"].ToString()) + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr0[4] = value1;
                        Dr0[5] = value2;
                        obj_dt.Rows[0]["volume1"] = value1;
                        obj_dt.Rows[0]["retention1"] = value2;
                    }
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_da.Tables[0].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = Convert.ToDouble(obj_dtchk.Rows[1]["volume1"].ToString()) + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value4 = Convert.ToDouble(obj_dtchk.Rows[1]["retention1"].ToString()) + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr1[4] = value3;
                        Dr1[5] = value4;
                        obj_dt.Rows[1]["volume1"] = value3;
                        obj_dt.Rows[1]["retention1"] = value4;
                    }
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "AE")
                    {
                        value5 = Convert.ToDouble(obj_dtchk.Rows[2]["volume1"].ToString()) + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value6 = Convert.ToDouble(obj_dtchk.Rows[2]["retention1"].ToString()) + Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr2[4] = value5;
                        Dr2[5] = value6;

                        obj_dt.Rows[2]["volume1"] = value5;
                        obj_dt.Rows[2]["retention1"] = value6;
                    }
                }

                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_da.Tables[1].Rows.Count - 1; i++)
                {
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_da.Tables[1].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = Convert.ToDouble(obj_dtchk.Rows[3]["volume1"].ToString()) + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value2 = Convert.ToDouble(obj_dtchk.Rows[3]["retention1"].ToString()) + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr3[4] = value1;
                        Dr3[5] = value2;
                        obj_dt.Rows[3]["volume1"] = value1;
                        obj_dt.Rows[3]["retention1"] = value2;
                    }
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_da.Tables[1].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = Convert.ToDouble(obj_dtchk.Rows[4]["volume1"].ToString()) + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value4 = Convert.ToDouble(obj_dtchk.Rows[4]["retention1"].ToString()) + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr4[4] = value3;
                        Dr4[5] = value4;
                        obj_dt.Rows[4]["volume1"] = value3;
                        obj_dt.Rows[4]["retention1"] = value4;
                    }
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "AI")
                    {
                        value5 = Convert.ToDouble(obj_dtchk.Rows[5]["volume1"].ToString()) + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value6 = Convert.ToDouble(obj_dtchk.Rows[5]["retention1"].ToString()) + Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr5[4] = value5;
                        Dr5[5] = value6;
                        obj_dt.Rows[5]["volume1"] = value5;
                        obj_dt.Rows[5]["retention1"] = value6;
                    }
                }
                Grd_product.DataSource = obj_dt;
                Grd_product.DataBind();
                obj_dtchk.Reset();
                obj_dtchk = obj_dt.Copy();
            }
        }
        private void GetdetailSub(int cid)
        {
            Grd_product.DataSource = null;
            Grd_product.DataBind();
            DataTable obj_dt = new DataTable();
            obj_dt.Columns.Add("product", typeof(string));
            obj_dt.Columns.Add("unit", typeof(string));
            obj_dt.Columns.Add(new DataColumn { ColumnName = "volume", DataType = typeof(double), DefaultValue = 0, ReadOnly = false });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "retention", DataType = typeof(double), DefaultValue = 0, ReadOnly = false });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "volume1", DataType = typeof(double), DefaultValue = 0, ReadOnly = false });
            obj_dt.Columns.Add(new DataColumn { ColumnName = "retention1", DataType = typeof(double), DefaultValue = 0, ReadOnly = false });
            DataRow Dr0 = obj_dt.NewRow();
            DataRow Dr1 = obj_dt.NewRow();
            DataRow Dr2 = obj_dt.NewRow();
            DataRow Dr3 = obj_dt.NewRow();
            DataRow Dr4 = obj_dt.NewRow();
            DataRow Dr5 = obj_dt.NewRow();

            obj_dt.Rows.Add(Dr0);
            obj_dt.Rows.Add(Dr1);
            obj_dt.Rows.Add(Dr2);
            obj_dt.Rows.Add(Dr3);
            obj_dt.Rows.Add(Dr4);
            obj_dt.Rows.Add(Dr5);

            Dr0[0] = "Exports - FCL";
            Dr0[1] = "Teus";

            Dr1[0] = "Exports - LCL";
            Dr1[1] = "CBM";

            Dr2[0] = "Exports - Air";
            Dr2[1] = "Kgs";

            Dr3[0] = "Imports - FCL";
            Dr3[1] = "Teus";

            Dr4[0] = "Imports - LCL";
            Dr4[1] = "CBM";

            Dr5[0] = "Imports - Air";
            Dr5[1] = "Kgs";


            obj_dt = obj_dtchk.Copy();

            DataSet obj_ds = new DataSet();
            DataSet obj_da = new DataSet();

            int Sectorid, Countyid, divid, frmmonth, frmyear, tomonth, toyear, frm_month, frm_year, to_month, to_year, i;
            double value1 = 0, value2 = 0, value3 = 0, value4 = 0, value5 = 0, value6 = 0;
            Sectorid = Convert.ToInt32(ddl_sector.SelectedValue.ToString());
            Countyid = cid;
            divid = Convert.ToInt32(ddl_division.SelectedValue.ToString());
            frmmonth = Convert.ToInt32(ddlfrmmonth.SelectedValue.ToString());
            tomonth = Convert.ToInt32(ddltomonthtrad.SelectedValue.ToString());
            frmyear = Convert.ToInt32(txt_frmyear.Text.ToString());
            toyear = Convert.ToInt32(txt_toyear.Text.ToString());

            frm_month = Convert.ToInt32(ddlfrmmonth1.SelectedValue.ToString());
            to_month = Convert.ToInt32(ddltomonth1.SelectedValue.ToString());
            frm_year = Convert.ToInt32(txt_frmyear1.Text.ToString());
            to_year = Convert.ToInt32(txt_toyear1.Text.ToString());

            obj_ds = da_obj_Sector.GetTradelaneDetails(Sectorid, Countyid, int_bid, divid, frmmonth, frmyear, tomonth, toyear);
            obj_da = da_obj_Sector.GetTradelaneDetails(Sectorid, Countyid, int_bid, divid, frm_month, frm_year, to_month, to_year);

            if (obj_ds.Tables.Count > 1)
            {
                for (i = 0; i <= obj_ds.Tables[0].Rows.Count - 1; i++)
                {
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_ds.Tables[0].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = Convert.ToDouble(obj_dtchk.Rows[0]["volume"].ToString()) - Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value2 = Convert.ToDouble(obj_dtchk.Rows[0]["retention"].ToString()) - Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr0[2] = value1;
                        Dr0[3] = value2;
                        obj_dt.Rows[0]["volume"] = value1;
                        obj_dt.Rows[0]["retention"] = value2;

                    }
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_ds.Tables[0].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = Convert.ToDouble(obj_dtchk.Rows[1]["volume"].ToString()) - Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value4 = Convert.ToDouble(obj_dtchk.Rows[1]["retention"].ToString()) - Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr1[2] = value3;
                        Dr1[3] = value4;
                        obj_dt.Rows[1]["volume"] = value3;
                        obj_dt.Rows[1]["retention"] = value4;
                    }
                    if (obj_ds.Tables[0].Rows[i]["trantype"].ToString() == "AE")
                    {
                        value5 = Convert.ToDouble(obj_dtchk.Rows[2]["volume"].ToString()) - Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Volume"].ToString());
                        value6 = Convert.ToDouble(obj_dtchk.Rows[2]["retention"].ToString()) - Convert.ToDouble(obj_ds.Tables[0].Rows[i]["Reten"].ToString());
                        Dr2[2] = value5;
                        Dr2[3] = value6;
                        obj_dt.Rows[2]["volume"] = value5;
                        obj_dt.Rows[2]["retention"] = value6;
                    }
                }
                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_ds.Tables[1].Rows.Count - 1; i++)
                {
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_ds.Tables[1].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = Convert.ToDouble(obj_dtchk.Rows[3]["volume"].ToString()) - Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value2 = Convert.ToDouble(obj_dtchk.Rows[3]["retention"].ToString()) - Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        Dr3[2] = value1;
                        Dr3[3] = value2;
                        obj_dt.Rows[3]["volume"] = value1;
                        obj_dt.Rows[3]["retention"] = value2;
                    }
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_ds.Tables[1].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = Convert.ToDouble(obj_dtchk.Rows[4]["volume"].ToString()) - Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value4 = Convert.ToDouble(obj_dtchk.Rows[4]["retention"].ToString()) - Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        Dr4[2] = value3;
                        Dr4[3] = value4;
                        obj_dt.Rows[4]["volume"] = value3;
                        obj_dt.Rows[4]["retention"] = value4;
                    }
                    if (obj_ds.Tables[1].Rows[i]["trantype"].ToString() == "AI")
                    {
                        value5 = Convert.ToDouble(obj_dtchk.Rows[5]["volume"].ToString()) - Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Volume"].ToString());
                        value6 = Convert.ToDouble(obj_dtchk.Rows[5]["retention"].ToString()) - Convert.ToDouble(obj_ds.Tables[1].Rows[i]["Reten"].ToString());
                        obj_dt.Rows[5]["volume"] = value5;
                        obj_dt.Rows[5]["retention"] = value6;

                    }
                }


                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_da.Tables[0].Rows.Count - 1; i++)
                {
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_da.Tables[0].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = Convert.ToDouble(obj_dtchk.Rows[0]["volume1"].ToString()) - Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value2 = Convert.ToDouble(obj_dtchk.Rows[0]["retention1"].ToString()) - Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr0[4] = value1;
                        Dr0[5] = value2;
                        obj_dt.Rows[0]["volume1"] = value1;
                        obj_dt.Rows[0]["retention1"] = value2;
                    }
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "FE" && obj_da.Tables[0].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = Convert.ToDouble(obj_dtchk.Rows[1]["volume1"].ToString()) - Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value4 = Convert.ToDouble(obj_dtchk.Rows[1]["retention1"].ToString()) - Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr1[4] = value3;
                        Dr1[5] = value4;

                        obj_dt.Rows[1]["volume1"] = value3;
                        obj_dt.Rows[1]["retention1"] = value4;
                    }
                    if (obj_da.Tables[0].Rows[i]["trantype"].ToString() == "AE")
                    {
                        value5 = Convert.ToDouble(obj_dtchk.Rows[2]["volume1"].ToString()) - Convert.ToDouble(obj_da.Tables[0].Rows[i]["Volume"].ToString());
                        value6 = Convert.ToDouble(obj_dtchk.Rows[2]["retention1"].ToString()) - Convert.ToDouble(obj_da.Tables[0].Rows[i]["Reten"].ToString());
                        Dr2[4] = value5;
                        Dr2[5] = value6;

                        obj_dt.Rows[2]["volume1"] = value5;
                        obj_dt.Rows[2]["retention1"] = value6;
                    }
                }

                value1 = 0;
                value2 = 0;
                value3 = 0;
                value4 = 0;
                value5 = 0;
                value6 = 0;

                for (i = 0; i <= obj_da.Tables[1].Rows.Count - 1; i++)
                {
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_da.Tables[1].Rows[i]["jobtype"].ToString() == "FCL")
                    {
                        value1 = Convert.ToDouble(obj_dtchk.Rows[3]["volume1"].ToString()) - Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value2 = Convert.ToDouble(obj_dtchk.Rows[3]["retention1"].ToString()) - Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr3[4] = value1;
                        Dr3[5] = value2;
                        obj_dt.Rows[3]["volume1"] = value1;
                        obj_dt.Rows[3]["retention1"] = value2;
                    }
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "FI" && obj_da.Tables[1].Rows[i]["jobtype"].ToString() == "LCL")
                    {
                        value3 = Convert.ToDouble(obj_dtchk.Rows[4]["volume1"].ToString()) - Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value4 = Convert.ToDouble(obj_dtchk.Rows[4]["retention1"].ToString()) - Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr4[4] = value3;
                        Dr4[5] = value4;

                        obj_dt.Rows[4]["volume1"] = value3;
                        obj_dt.Rows[4]["retention1"] = value4;
                    }
                    if (obj_da.Tables[1].Rows[i]["trantype"].ToString() == "AI")
                    {
                        value5 = Convert.ToDouble(obj_dtchk.Rows[5]["volume1"].ToString()) - Convert.ToDouble(obj_da.Tables[1].Rows[i]["Volume"].ToString());
                        value6 = Convert.ToDouble(obj_dtchk.Rows[5]["retention1"].ToString()) - Convert.ToDouble(obj_da.Tables[1].Rows[i]["Reten"].ToString());
                        Dr5[4] = value5;
                        Dr5[5] = value6;
                        obj_dt.Rows[5]["volume1"] = value5;
                        obj_dt.Rows[5]["retention1"] = value6;
                    }
                }
                Grd_product.DataSource = obj_dt;
                Grd_product.DataBind();
                obj_dtchk.Reset();
                obj_dtchk = obj_dt.Copy();

            }
        }

        protected void Chk_show_CheckedChanged(object sender, EventArgs e)
        {

            CheckBox chk = sender as CheckBox;
            if (chk.Checked)
            {

                foreach (GridViewRow row in Grd_Country.Rows)
                {

                    CheckBox ck = (CheckBox)row.FindControl("Chk_country");
                    ck.Checked = true;
                }
                Getdetail(0);
            }
            else
            {

                {
                    foreach (GridViewRow row in Grd_Country.Rows)
                    {
                        CheckBox ck = (CheckBox)row.FindControl("Chk_country");
                        ck.Checked = false;
                    }
                    obj_dtchk.Reset();
                    Grd_product.DataSource = null;
                    Grd_product.DataBind();

                }
            }

        }

        protected void btn_get_trade_Click(object sender, EventArgs e)
        {
            try
            {


                if (string.IsNullOrEmpty(ddl_sector.SelectedValue.ToString()) == false)
                {
                    CheckBox chkheader = (CheckBox)Grd_Country.HeaderRow.FindControl("Chk_show");
                    chkheader.Checked = true;

                    foreach (GridViewRow row in Grd_Country.Rows)
                    {
                        CheckBox ck = (CheckBox)row.FindControl("Chk_country");
                        ck.Checked = true;
                    }
                    Getdetail(0);
                    da_obj_Log.InsLogDetail(Convert.ToInt32(Session["LoginEmpId"].ToString()), 1006, 3, Convert.ToInt32(Session["LoginBranchid"].ToString()), "View Details");
                }
                else
                {
                    ScriptManager.RegisterStartupScript(btnget, typeof(Button), "Get", "alertify.alert('Select Sector Name')", true);
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }

        protected void btn_cancel_trade_Click(object sender, EventArgs e)
        {
            if (btn_cancel_trade.Text == "Cancel")
            {
                div_bar.Visible = false;
                div_line.Visible = false;
                penBlRelase.Visible = false;
                //div_mis.Visible = false;
                //div_CutOffBreakUp.Visible = false;
                ////txt_to.Visible = false;
                //div_Tradelane.Visible = true;
                //btn_get.Visible = false;btn_get_id.Visible = false;
                //btn_get_trade.Visible = true;
                //btn_cancel_trade.Visible = true;
                //ddl_branch.Visible = false;ddl_branch_id.Visible = false;
                //ddl_Report.Visible = true;ddl_Report_id.Visible = true;
                //ddl_product.Visible = false;
                //divby.Visible = false;
                //ddl_by.Visible = false;
                //div_inbound.Visible = false;
                //divstatistics.Visible = false;
                //RententionLb.Attributes["class"] = "RententionLblnew";
                //txt_agent.Visible = false;txt_agent_id.Visible = false;
                //lbl_ret.Visible = false;
                //txt_retention.Visible = false;
                //btnview.Visible = false;btnview_id.Visible = false;


                ddl_branch.SelectedIndex = 0;
                ddl_division.SelectedIndex = 0;
                ddl_sector.SelectedIndex = 0;
                ddlfrmmonth.SelectedIndex = 0;
                ddltomonthtrad.SelectedIndex = 0;
                ddlfrmmonth1.SelectedIndex = 0;
                ddltomonth1.SelectedIndex = 0;

                string str_date = DateTime.Now.Year.ToString();
                txt_frmyear.Text = str_date;
                txt_toyear.Text = str_date;
                txt_frmyear1.Text = str_date;
                txt_toyear1.Text = str_date;

                Grd_Country.DataSource = null;
                Grd_Country.DataBind();

                Grd_product.DataSource = null;
                Grd_product.DataBind();
                btn_cancel_trade.Text = "Back";
            }
            else
            {
                //this.Response.End();
                Response.Redirect("../Home/CORHomeMIS.aspx");
            }
        }

        protected void bnt_details_Click(object sender, EventArgs e)
        {
            ExportToExcelNew();
        }
        //TradeLine End


        public void fn_linerwise()
        {
            try
            {
                DataTable dtnew = new DataTable();
                str_TranType = "";
                str_Branch = "";
                DataTable dt_Liner = new DataTable();
                DataTable dtemptyfree = new DataTable();
              //  DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
                if (hf_agent1.Value == "")
                {
                    hf_agent1.Value = "0";
                }
                //Convert.ToInt32(Session["LoginBranchid"].ToString())

                dt_Liner = da_obj_misgrd.GetLinerDetails(Session["StrTranType"].ToString(), 0, Convert.ToDateTime(Utility.fn_ConvertDate(txt_from.Text.ToString())), Convert.ToDateTime(Utility.fn_ConvertDate(txt_to.Text.ToString())), int.Parse(Session["LoginDivisionId"].ToString()), Convert.ToInt32(hf_agent1.Value));

                if (dt_Liner.Rows.Count > 0)
                {
                    double totalgrand40 = 0, totalgrand20 = 0, totalgrandvou = 0, totalincomegrand = 0, totalexpensegrand = 0, totalretentiongrand = 0;

                    dtemptyfree.Columns.Add("trantype");
                    dtemptyfree.Columns.Add("jobno");
                    dtemptyfree.Columns.Add("linername");
                    dtemptyfree.Columns.Add("nomination");
                    dtemptyfree.Columns.Add("volume");
                    dtemptyfree.Columns.Add("cont20");
                    dtemptyfree.Columns.Add("cont40");
                    dtemptyfree.Columns.Add("income");
                    dtemptyfree.Columns.Add("expense");
                    dtemptyfree.Columns.Add("retention");
                    dtemptyfree.Columns.Add("branchid");


                    DataView dv_co = new DataView(dt_Liner);
                    dtnew = dv_co.ToTable(true, "trantype");
                    dv_co = new DataView(dtnew);
                    dv_co.Sort = "trantype";
                    dtnew = dv_co.ToTable();
                    DataRow dr = dtemptyfree.NewRow();
                    for (int j = 0; j <= dtnew.Rows.Count - 1; j++)
                    {
                        double totalincome = 0, totalexpense = 0, totalretention = 0, total20 = 0, total40 = 0, totalvou = 0;
                        DataTable dtLi = new DataTable();
                        DataView data1 = dt_Liner.DefaultView;
                        data1.RowFilter = "trantype = '" + dtnew.Rows[j]["trantype"] + "' ";
                        dtLi = data1.ToTable();
                        // count1=dtLi.Rows.Count;
                        if (dtLi.Rows.Count > 0)
                        {

                            dr = dtemptyfree.NewRow();
                            dr["trantype"] = dtLi.Rows[0]["TrantypeFull"].ToString();
                            dr["jobno"] = "";
                            dr["linername"] = "";
                            dr["nomination"] = "";
                            dr["volume"] = "";
                            dr["cont20"] = "";
                            dr["cont40"] = "";
                            dr["income"] = "";
                            dr["expense"] = "";
                            dr["retention"] = "";
                            dr["branchid"] = "";

                            dtemptyfree.Rows.Add(dr);

                            //dtemptyfree.Rows.Add();

                            for (int i = 0; i <= dtLi.Rows.Count - 1; i++)
                            {

                                dr = dtemptyfree.NewRow();
                                dtemptyfree.Rows.Add();
                                int count = dtemptyfree.Rows.Count - 1;
                                dtemptyfree.Rows[count]["trantype"] = dtLi.Rows[i]["trantype"].ToString();
                                dtemptyfree.Rows[count]["jobno"] = dtLi.Rows[i]["jobno"].ToString();
                                dtemptyfree.Rows[count]["linername"] = dtLi.Rows[i]["linername"].ToString();
                                dtemptyfree.Rows[count]["nomination"] = dtLi.Rows[i]["nomination"].ToString();
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["volume"].ToString());
                                dtemptyfree.Rows[count]["volume"] = temp2.ToString("#,0.00");
                                totalvou = totalvou + Convert.ToDouble(dtemptyfree.Rows[count]["volume"].ToString());

                                dtemptyfree.Rows[count]["cont20"] = dtLi.Rows[i]["cont20"].ToString();
                                total20 = total20 + Convert.ToDouble(dtLi.Rows[i]["cont20"].ToString());
                                dtemptyfree.Rows[count]["cont40"] = dtLi.Rows[i]["cont40"].ToString();
                                total40 = total40 + Convert.ToDouble(dtLi.Rows[i]["cont40"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["income"].ToString());
                                dtemptyfree.Rows[count]["income"] = temp2.ToString("#,0.00");
                                totalincome = totalincome + Convert.ToDouble(dtemptyfree.Rows[count]["income"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["expense"].ToString());
                                dtemptyfree.Rows[count]["expense"] = temp2.ToString("#,0.00");

                                totalexpense = totalexpense + Convert.ToDouble(dtemptyfree.Rows[count]["expense"].ToString());
                                temp2 = Convert.ToDouble(dtLi.Rows[i]["retention"].ToString());
                                dtemptyfree.Rows[count]["retention"] = temp2.ToString("#,0.00");

                                totalretention = totalretention + Convert.ToDouble(dtemptyfree.Rows[count]["retention"].ToString());
                                dtemptyfree.Rows[count]["branchid"] = dtLi.Rows[i]["branchid"].ToString();
                            }


                            dr = dtemptyfree.NewRow();
                            dr["nomination"] = dtnew.Rows[j]["trantype"] + "-" + "Total";
                            dr["volume"] = totalvou;
                            dr["cont20"] = total20;
                            dr["cont40"] = total40;
                            dr["income"] = totalincome.ToString("#,0.00");
                            dr["expense"] = totalexpense.ToString("#,0.00");
                            dr["retention"] = totalretention.ToString("#,0.00");
                        }
                        dtemptyfree.Rows.Add(dr);
                        totalgrand40 += total40;
                        totalgrand20 += total20;
                        totalgrandvou += totalvou;
                        totalincomegrand += totalincome;
                        totalexpensegrand += totalexpense;
                        totalretentiongrand += totalretention;

                    }
                    dr = dtemptyfree.NewRow();
                    if (dt_Liner.Rows.Count > 0)
                    {
                        dr["nomination"] = "Grand Total";
                        dr["volume"] = totalgrandvou.ToString("#,0.00");
                        dr["cont20"] = totalgrand20;
                        dr["cont40"] = totalgrand40;
                        dr["income"] = totalincomegrand.ToString("#,0.00");
                        dr["expense"] = totalexpensegrand.ToString("#,0.00");
                        dr["retention"] = totalretentiongrand.ToString("#,0.00");
                        dtemptyfree.Rows.Add(dr);
                        Gridliner.Visible = true;
                        Gridliner.DataSource = dtemptyfree;
                        Gridliner.DataBind();
                        //  bnt_cancel.Text = "Cancel";

                        btn_cancel.ToolTip = "Cancel";
                        btn_cancel.Attributes["class"] = "btn ico-cancel";
                        bnt.Enabled = true;
                        //grd_Shipment.Rows[grd_Agent.Rows.Count - 1].Font.Bold = Utility.fn_Grd_GrandTotal_Bold();
                        signup.Visible = true;
                    }
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('No Data Found');", true);
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }


        protected void Gridliner_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    if (e.Row.Cells[i].Text == "&nbsp;")
                    {
                        e.Row.Cells[i].Text = "";
                    }
                    e.Row.Cells[i].ToolTip = e.Row.Cells[i].Text;
                }

                if (e.Row.Cells[1].Text == "")
                {
                    e.Row.ForeColor = System.Drawing.Color.Brown;
                } if (e.Row.Cells[1].Text != "")
                {
                    e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(Gridliner, "Select$" + e.Row.RowIndex);
                    e.Row.Attributes["style"] = "cursor:pointer";
                }
            }
        }

        protected void Gridliner_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {

                if (Gridliner.Rows.Count > 0)
                {
                    btn_cancel.Focus();
                    int i;
                    int int_jobno = Convert.ToInt32(Gridliner.SelectedRow.Cells[1].Text);
                    //int int_bid = Convert.ToInt32(Session["LoginBranchid"].ToString());
                    int int_bid = Convert.ToInt32(Gridliner.SelectedDataKey.Values[1].ToString());

                    DataTable obj_dt = new DataTable();
                    DataTable obj_dtjob = new DataTable();
                    string str_fromdate = Utility.fn_ConvertDate(txt_from.Text);
                    string str_todate = Utility.fn_ConvertDate(txt_to.Text);
                   // DataAccess.MISGrd da_obj_misgrd = new DataAccess.MISGrd();
                    obj_dtjob = da_obj_misgrd.GetshipmentDetailsfromjobno(Gridliner.SelectedDataKey.Values[0].ToString(), int_bid, Convert.ToDateTime(str_fromdate), Convert.ToDateTime(str_todate), int_jobno, Convert.ToInt32(Session["LoginDivisionId"].ToString()), " ");
                    if (obj_dtjob.Rows.Count > 0)
                    {
                        Gridliner.Visible = false;
                        if (Session["StrTranType"].ToString() != "CH")
                        {

                            obj_dt.Columns.Add("Product", typeof(string));
                            obj_dt.Columns.Add("Job #", typeof(string));
                            obj_dt.Columns.Add("Job type", typeof(string));
                            obj_dt.Columns.Add("BL #", typeof(string));
                            obj_dt.Columns.Add("Nomination", typeof(string));
                            obj_dt.Columns.Add("Shipper", typeof(string));
                            obj_dt.Columns.Add("Consignee", typeof(string));
                            obj_dt.Columns.Add("Agent", typeof(string));
                            obj_dt.Columns.Add("PoL", typeof(string));
                            obj_dt.Columns.Add("PoD", typeof(string));
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Volume", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Cont 20", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Cont 40", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Income", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Expense", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Retention", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add("Trantype", typeof(string));
                        }
                        else
                        {

                            obj_dt.Columns.Add("Product", typeof(string));
                            obj_dt.Columns.Add("Job #", typeof(string));
                            obj_dt.Columns.Add("Job type", typeof(string));
                            obj_dt.Columns.Add("Doc #", typeof(string));
                            obj_dt.Columns.Add("Nomination", typeof(string));
                            obj_dt.Columns.Add("Shipper", typeof(string));
                            obj_dt.Columns.Add("Consignee", typeof(string));
                            obj_dt.Columns.Add("Agent", typeof(string));
                            obj_dt.Columns.Add("PoL", typeof(string));
                            obj_dt.Columns.Add("PoD", typeof(string));
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Net wt", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Cont 20", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Cont 40", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Income", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Expense", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add(new DataColumn { ColumnName = "Retention", DataType = typeof(string), DefaultValue = 0 });
                            obj_dt.Columns.Add("Trantype", typeof(string));
                        }

                        for (i = 0; i <= obj_dtjob.Rows.Count - 1; i++)
                        {
                            DataRow dr = obj_dt.NewRow();
                            obj_dt.Rows.Add(dr);
                            if (obj_dtjob.Rows[i]["jobtype"].ToString() == "1")
                            {
                                dr[2] = "Consol";
                            }
                            else if (obj_dtjob.Rows[i]["jobtype"].ToString() == "2")
                            {
                                dr[2] = "Co-Load";
                            }
                            else if (obj_dtjob.Rows[i]["jobtype"].ToString() == "3")
                            {
                                dr[2] = "FCL";
                            }
                            else if (obj_dtjob.Rows[i]["jobtype"].ToString() == "4")
                            {
                                dr[2] = "MCC";
                            }
                            else if (obj_dtjob.Rows[i]["jobtype"].ToString() == "5")
                            {
                                dr[2] = "Buyer Consol";
                            }

                            dr[0] = obj_dtjob.Rows[i]["trantype"].ToString();
                            dr[1] = obj_dtjob.Rows[i]["jobno"].ToString();
                            dr[3] = obj_dtjob.Rows[i]["blno"].ToString();
                            dr[4] = obj_dtjob.Rows[i]["Nomination"].ToString();
                            dr[5] = obj_dtjob.Rows[i]["shipper"].ToString();
                            dr[6] = obj_dtjob.Rows[i]["Consignee"].ToString();
                            dr[7] = obj_dtjob.Rows[i]["agent"].ToString();
                            dr[8] = obj_dtjob.Rows[i]["pol"].ToString();
                            dr[9] = obj_dtjob.Rows[i]["pod"].ToString();
                            dr[10] = obj_dtjob.Rows[i]["volume"].ToString();
                            dr[11] = obj_dtjob.Rows[i]["cont20"].ToString();
                            dr[12] = obj_dtjob.Rows[i]["cont40"].ToString();
                            dr[13] = obj_dtjob.Rows[i]["income"].ToString();
                            dr[14] = obj_dtjob.Rows[i]["expense"].ToString();
                            dr[15] = obj_dtjob.Rows[i]["retention"].ToString();
                            dr[16] = obj_dtjob.Rows[i]["trantype"].ToString();
                        }
                        var sum_volume = obj_dtjob.Compute("sum(Volume)", "");
                        var sum_cont20 = obj_dtjob.Compute("sum(cont20)", "");
                        var sum_cont40 = obj_dtjob.Compute("sum(cont40)", "");
                        var sum_income = obj_dtjob.Compute("sum(Income)", "");
                        var sum_expense = obj_dtjob.Compute("sum(Expense)", "");
                        var sum_retention = obj_dtjob.Compute("sum(Retention)", "");
                        DataRow dr1 = obj_dt.NewRow();
                        obj_dt.Rows.Add(dr1);
                        dr1[9] = "Total";
                        dr1[10] = sum_volume;
                        dr1[11] = sum_cont20;
                        dr1[12] = sum_cont40;
                        dr1[13] = sum_income;
                        dr1[14] = sum_expense;
                        dr1[15] = sum_retention;
                        GRD_Common.Visible = true;
                        GRD_Common.DataSource = obj_dt;
                        GRD_Common.DataBind();
                        // bnt_cancel.Text = "Cancel";


                        btn_cancel.ToolTip = "Cancel";
                        btn_cancel1.Attributes["class"] = "btn ico-cancel";
                    }
                }

            }
            catch (Exception ex)
            {
                string message = ex.Message.ToString();
                ScriptManager.RegisterClientScriptBlock(this, typeof(System.Web.UI.WebControls.Button), "logix", "alertify.alert('" + message + "');", true);
            }
        }


    }
}